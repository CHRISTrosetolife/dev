{"./public/src/add.mjs":"export function add(a, b) {\n    return a + b;\n}\n","./public/src/add_1.mjs":"import {add} from \"./add.mjs\";\nexport function add_1(input) {\n    return add(input, 1);\n}\n","./public/src/and.mjs":"export function and(token, verse) {\n    return token && verse;\n}\n","./public/src/app_bible.mjs":"import {html_spaced_tokens} from \"./html_spaced_tokens.mjs\";\nimport {html_div} from \"./html_div.mjs\";\nimport {html_document_body} from \"./html_document_body.mjs\";\nimport {assert} from './assert.mjs';\nimport {bible_data_jas01} from './bible_data_jas01.mjs';\nimport {equal_by} from './equal_by.mjs';\nimport {html_element} from './html_element.mjs';\nimport {list_length} from './list_length.mjs';\nimport {range} from './range.mjs';\nimport {html_inner_set} from './html_inner_set.mjs';\nimport {list_get} from './list_get.mjs';\nimport {object_property_get} from './object_property_get.mjs';\nimport {noop} from './noop.mjs';\nimport {html_style} from './html_style.mjs';\nimport {html_on_click} from './html_on_click.mjs';\nimport {bible_token_normalize} from './bible_token_normalize.mjs';\nexport function app_bible() {\n    let root = html_document_body();\n    html_style(root, {\n        'font-family': 'Sans-Serif',\n        'font-size': '5vh',\n        'margin': '0'\n    });\n    let top = html_div(root);\n    html_style(top, {\n        'height': '75vh',\n        'overflow-y': 'scroll'\n    });\n    let bottom = html_element(root, 'div');\n    html_style(bottom, {\n        'height': '25vh',\n        'overflow-y': 'scroll',\n        'background-color': 'lightgreen'\n    });\n    let data = bible_data_jas01();\n    let {eng} = data;\n    let {ceb} = data;\n    let {definitions} = data;\n    assert(equal_by, [eng, ceb, list_length]);\n    let length = list_length(eng);\n    for (let i of range(length)) {\n        let verse = html_element(top, 'div');\n        let first = html_element(verse, 'div');\n        let eng_i = list_get(eng, i);\n        let eng_tokens = object_property_get(eng_i, 'tokens');\n        let ceb_i = list_get(ceb, i);\n        let ceb_tokens = object_property_get(ceb_i, 'tokens');\n        let verse_number = object_property_get(eng_i, 'verse_number');\n        let verse_number_element = html_element(first, 'span');\n        html_inner_set(verse_number_element, verse_number);\n        html_style(verse_number_element, {\n            'font-weight': 'bold'\n        });\n        html_spaced_tokens(first, eng_tokens, noop);\n        let second = html_element(verse, 'div');\n        html_style(second, {\n            'color': 'green'\n        });\n        html_spaced_tokens(second, ceb_tokens, (token_element, token) => {\n            html_on_click(token_element, () => {\n                html_inner_set(bottom, '');\n                let n = bible_token_normalize(token);\n                let d = object_property_get(definitions, n);\n                html_spaced_tokens(bottom, d, () => {\n                    let spacer = html_element(bottom, 'span');\n                    html_inner_set(spacer, ',');\n                });\n            });\n        });\n    }\n}\n","./public/src/app_code.mjs":"import {html_style_margin_none} from \"./html_style_margin_none.mjs\";\nimport {html_style_word_break_all} from \"./html_style_word_break_all.mjs\";\nimport {app_learn_code_style_rounded_padded} from \"./app_learn_code_style_rounded_padded.mjs\";\nimport {function_path_to_name} from \"./function_path_to_name.mjs\";\nimport {function_run} from \"./function_run.mjs\";\nimport {functions_source} from \"./functions_source.mjs\";\nimport {html_button_width_full_text} from \"./html_button_width_full_text.mjs\";\nimport {html_document_body} from \"./html_document_body.mjs\";\nimport {html_element} from \"./html_element.mjs\";\nimport {html_style_default_initialize} from \"./html_style_default_initialize.mjs\";\nimport {html_style_width_full} from \"./html_style_width_full.mjs\";\nimport {object_properties} from \"./object_properties.mjs\";\nimport {html_style} from \"./html_style.mjs\";\nexport async function app_code() {\n    html_style_default_initialize();\n    let result = await function_run(functions_source.name, []);\n    let root = html_document_body();\n    html_style_margin_none(root);\n    let input = html_element(root, 'input');\n    html_style_width_full(input);\n    html_style(input, {\n        'display': 'block'\n    });\n    app_learn_code_style_rounded_padded(input);\n    let paths = object_properties(result);\n    for (let p of paths) {\n        let name = function_path_to_name(p);\n        let b = html_button_width_full_text(root, name);\n        html_style_word_break_all(b);\n    }\n}\n","./public/src/app_html_generate.mjs":"import {folder_name_src} from \"./folder_name_src.mjs\";\nimport {file_overwrite} from \"./file_overwrite.mjs\";\nimport {folder_name_public} from \"./folder_name_public.mjs\";\nimport {path_join} from \"./path_join.mjs\";\nimport {js_code_call} from \"./js_code_call.mjs\";\nimport {js_code_import_path} from \"./js_code_import_path.mjs\";\nimport {folder_current} from \"./folder_current.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nimport {app_prefix} from \"./app_prefix.mjs\";\nexport async function app_html_generate(name) {\n    let prefix = app_prefix();\n    let name_prefixed = string_combine(prefix, name);\n    let import_path = `${folder_current()}/${folder_name_src()}/`;\n    let html = `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <title>${name}</title>\n      </head>\n      <body>\n        <script type=\"module\">\n          ${js_code_import_path(import_path, name_prefixed)}\n          ${js_code_call(name_prefixed)}\n        </script>\n      </body>\n    </html>        \n`;\n    let output_path = path_join([folder_name_public(), `${name}.html`]);\n    await file_overwrite(output_path, html);\n}\n","./public/src/app_learn_code.mjs":"import {html_style_default_font_size_value} from \"./html_style_default_font_size_value.mjs\";\nimport {html_style_default_initialize} from \"./html_style_default_initialize.mjs\";\nimport {html_hash} from \"./html_hash.mjs\";\nimport {app_learn_code_lessons} from \"./app_learn_code_lessons.mjs\";\nimport {string_combine_multiple} from \"./string_combine_multiple.mjs\";\nimport {html_scroll_top} from \"./html_scroll_top.mjs\";\nimport {string_multiply} from \"./string_multiply.mjs\";\nimport {each_reverse} from \"./each_reverse.mjs\";\nimport {round} from \"./round.mjs\";\nimport {number_string_to} from \"./number_string_to.mjs\";\nimport {divide} from \"./divide.mjs\";\nimport {square} from \"./square.mjs\";\nimport {multiply} from \"./multiply.mjs\";\nimport {subtract_1} from \"./subtract_1.mjs\";\nimport {add_1} from \"./add_1.mjs\";\nimport {list_add_multiple} from \"./list_add_multiple.mjs\";\nimport {html_disable} from \"./html_disable.mjs\";\nimport {html_button_width_full_text_click} from \"./html_button_width_full_text_click.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {html_clear} from \"./html_clear.mjs\";\nimport {list_get} from \"./list_get.mjs\";\nimport {object_property_get} from \"./object_property_get.mjs\";\nimport {html_document_body} from \"./html_document_body.mjs\";\nimport {list_length} from \"./list_length.mjs\";\nimport {list_index_last} from \"./list_index_last.mjs\";\nimport {html_style} from \"./html_style.mjs\";\nimport {list_add} from \"./list_add.mjs\";\nimport {html_hr} from \"./html_hr.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {list_index} from \"./list_index.mjs\";\nimport {list_take} from \"./list_take.mjs\";\nimport {list_sum} from \"./list_sum.mjs\";\nimport {each_index} from \"./each_index.mjs\";\nimport {add} from \"./add.mjs\";\nimport {html_spacer_vertical} from \"./html_spacer_vertical.mjs\";\nimport {html_span_text} from \"./html_span_text.mjs\";\nimport {html_style_bold} from \"./html_style_bold.mjs\";\nimport {range} from \"./range.mjs\";\nimport {string_length} from \"./string_length.mjs\";\nexport function app_learn_code() {\n    let root = html_document_body();\n    html_hash({\n        'background_color': value => {\n            html_style(root, {\n                'background-color': value\n            });\n        }\n    });\n    html_style_default_initialize();\n    let default_font_size = html_style_default_font_size_value();\n    let lesson_creates = app_learn_code_lessons();\n    let lesson_screens = [];\n    let lessons = [];\n    for (let lesson_create of lesson_creates) {\n        let lesson = lesson_create();\n        list_add(lessons, lesson);\n        let s = object_property_get(lesson, 'screens');\n        list_add_multiple(lesson_screens, s);\n    }\n    function refresh_settings() {\n        clear_scroll();\n        button_home_hr();\n        let base = 16;\n        let max_rgb = square(base) - 1;\n        let max = 20;\n        let index = 0;\n        each_reverse(range(max), i => {\n            index++;\n            let percent = divide(i, subtract_1(max));\n            let product = multiply(percent, max_rgb);\n            let rounded = round(product);\n            let rgb_part = number_string_to(rounded, base);\n            if (equal(string_length(rgb_part), 1)) {\n                rgb_part = string_combine('0', rgb_part);\n            }\n            let parts = 3;\n            let rgb = string_multiply(rgb_part, parts);\n            let color = string_combine('#', rgb);\n            let font_color;\n            if (percent > 0.5) {\n                font_color = 'black';\n            } else {\n                font_color = 'white';\n            }\n            let change = html_button_width_full_text_click(root, string_combine_multiple([index, '.', ' background color : ', color]), () => html_style(root, {\n                'color': font_color,\n                'background-color': color\n            }));\n            html_style(change, {\n                'color': font_color,\n                'background-color': color\n            });\n        });\n    }\n    function refresh_main() {\n        clear_scroll();\n        html_button_width_full_text_click(root, '⚙️ settings', refresh_settings);\n        html_p_text(root, 'if you want to start from the beginning , choose \"begin\" : ');\n        let begin = html_button_width_full_text_click(root, '🚀 begin', async () => await refresh_lesson_screen(0));\n        html_style(begin, {\n            'font-size': string_combine(multiply(default_font_size, 1.2).toString(), 'vh')\n        });\n        html_style_bold(begin);\n        html_p_text(root, 'or choose a lesson below :');\n        for (let lesson of lessons) {\n            let {description} = lesson;\n            html_button_width_full_text_click(root, description, () => refresh_lesson(lesson));\n        }\n    }\n    refresh_main();\n    let index_last = list_index_last(lesson_screens);\n    function clear_scroll() {\n        html_clear(root);\n        html_scroll_top();\n    }\n    function refresh_lesson(lesson) {\n        clear_scroll();\n        button_home_hr();\n        let lesson_index = list_index(lessons, lesson);\n        let previous = list_take(lessons, lesson_index);\n        let index_first = list_sum(s => {\n            for (let p of previous) {\n                let {screens} = p;\n                s(list_length(screens));\n            }\n        });\n        let {screens} = lesson;\n        each_index(screens, (screen, index) => {\n            let message = string_combine('screen ', add_1(index));\n            let button = html_button_width_full_text_click(root, '', async () => await refresh_lesson_screen(add(index_first, index)));\n            if (equal(index, 0)) {\n                let begin_lesson = html_span_text(button, `begin the lesson`);\n                html_style_bold(begin_lesson);\n                html_span_text(button, ` ( ${message} )`);\n            } else {\n                html_span_text(button, message);\n            }\n        });\n    }\n    function button_home_hr() {\n        button_home();\n        html_hr(root);\n    }\n    async function refresh_lesson_screen(index) {\n        clear_scroll();\n        let lesson_screen = list_get(lesson_screens, index);\n        await lesson_screen(root);\n        html_hr(root);\n        let button_next = html_button_width_full_text_click(root, '➡️ next', async function on_click() {\n            await refresh_lesson_screen(add_1(index));\n        });\n        let button_previous = html_button_width_full_text_click(root, '⬅️ previous', async function on_click() {\n            await refresh_lesson_screen(subtract_1(index));\n        });\n        if (equal(index, 0)) {\n            html_disable(button_previous);\n        }\n        if (equal(index, index_last)) {\n            html_disable(button_next);\n        }\n        html_spacer_vertical(root);\n        html_spacer_vertical(root);\n        button_home();\n    }\n    function button_home() {\n        html_button_width_full_text_click(root, '🏠 go back home', function on_click() {\n            refresh_main();\n        });\n    }\n}\n","./public/src/app_learn_code_answer_correct.mjs":"import {html_style_units} from \"./html_style_units.mjs\";\nimport {html_style} from \"./html_style.mjs\";\nimport {app_learn_code_style_rounded_padded} from \"./app_learn_code_style_rounded_padded.mjs\";\nimport {app_learn_code_style_success} from \"./app_learn_code_style_success.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nexport function app_learn_code_answer_correct(container_bottom) {\n    let p = html_p_text(container_bottom, '✅ your answer is correct');\n    app_learn_code_style_success(p);\n    app_learn_code_style_rounded_padded(p);\n    html_style(p, {\n        'padding': html_style_units(3.5)\n    });\n}\n","./public/src/app_learn_code_code.mjs":"import {app_learn_code_eval_to_string} from \"./app_learn_code_eval_to_string.mjs\";\nimport {app_learn_code_code_part_titled_output} from \"./app_learn_code_code_part_titled_output.mjs\";\nimport {html_hr} from \"./html_hr.mjs\";\nimport {app_learn_code_code_part_titled_code} from \"./app_learn_code_code_part_titled_code.mjs\";\nimport {app_learn_code_code_container} from \"./app_learn_code_code_container.mjs\";\nexport function app_learn_code_code(parent, code) {\n    let container = app_learn_code_code_container(parent);\n    app_learn_code_code_part_titled_code(container, code);\n    html_hr(container);\n    let output = app_learn_code_eval_to_string(code);\n    app_learn_code_code_part_titled_output(container, output);\n}\n","./public/src/app_learn_code_code_background.mjs":"export function app_learn_code_code_background() {\n    return 'black';\n}\n","./public/src/app_learn_code_code_container.mjs":"import {html_style_background_color} from \"./html_style_background_color.mjs\";\nimport {app_learn_code_style_rounded_padded} from \"./app_learn_code_style_rounded_padded.mjs\";\nimport {html_div} from \"./html_div.mjs\";\nexport function app_learn_code_code_container(parent) {\n    let container = html_div(parent);\n    app_learn_code_style_rounded_padded(container);\n    html_style_background_color(container, 'lightgray');\n    return container;\n}\n","./public/src/app_learn_code_code_part.mjs":"import {app_learn_code_code_part_generic} from \"./app_learn_code_code_part_generic.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nexport function app_learn_code_code_part(parent, source_code, background_color) {\n    return app_learn_code_code_part_generic(html_p_text, parent, source_code, background_color);\n}\n","./public/src/app_learn_code_code_part_contrast.mjs":"import {app_learn_code_style_code_color_background} from \"./app_learn_code_style_code_color_background.mjs\";\nimport {html_style_pre_wrap} from \"./html_style_pre_wrap.mjs\";\nimport {html_style_margin_y} from \"./html_style_margin_y.mjs\";\nimport {app_learn_code_style_code_color} from \"./app_learn_code_style_code_color.mjs\";\nimport {app_learn_code_code_part} from \"./app_learn_code_code_part.mjs\";\nexport function app_learn_code_code_part_contrast(parent, code) {\n    let component = app_learn_code_code_part(parent, code, app_learn_code_style_code_color_background());\n    app_learn_code_style_code_color(component);\n    html_style_margin_y(component, '0.5dvh');\n    html_style_pre_wrap(component);\n}\n","./public/src/app_learn_code_code_part_generic.mjs":"import {html_style_word_break_all} from \"./html_style_word_break_all.mjs\";\nimport {html_style_margin_none} from \"./html_style_margin_none.mjs\";\nimport {app_learn_code_style_code} from \"./app_learn_code_style_code.mjs\";\nimport {html_style_background_color} from \"./html_style_background_color.mjs\";\nexport function app_learn_code_code_part_generic(create, parent, source_code, background_color) {\n    let code = create(parent, source_code);\n    app_learn_code_style_code(code);\n    html_style_margin_none(code);\n    html_style_word_break_all(code);\n    html_style_background_color(background_color);\n    return code;\n}\n","./public/src/app_learn_code_code_part_title.mjs":"import {html_spacer_vertical} from \"./html_spacer_vertical.mjs\";\nimport {html_style_margin_none} from \"./html_style_margin_none.mjs\";\nimport {html_style} from \"./html_style.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nexport function app_learn_code_code_part_title(parent, title_text) {\n    let title = html_p_text(parent, title_text);\n    html_style(title, {\n        'font-size': '2.3vh'\n    });\n    html_style_margin_none(title);\n    html_spacer_vertical(parent);\n}\n","./public/src/app_learn_code_code_part_titled.mjs":"import {app_learn_code_code_part_title} from \"./app_learn_code_code_part_title.mjs\";\nimport {app_learn_code_code_part} from \"./app_learn_code_code_part.mjs\";\nexport function app_learn_code_code_part_titled(parent, title_text, source_code, background_color) {\n    app_learn_code_code_part_title(parent, title_text);\n    let code = app_learn_code_code_part(parent, source_code, background_color);\n    return {\n        code\n    };\n}\n","./public/src/app_learn_code_code_part_titled_code.mjs":"import {html_style_pre_wrap} from \"./html_style_pre_wrap.mjs\";\nimport {app_learn_code_code_background} from \"./app_learn_code_code_background.mjs\";\nimport {app_learn_code_style_code_color} from \"./app_learn_code_style_code_color.mjs\";\nimport {app_learn_code_code_part_titled} from \"./app_learn_code_code_part_titled.mjs\";\nexport function app_learn_code_code_part_titled_code(container, source) {\n    let result = app_learn_code_code_part_titled(container, 'code :', source, app_learn_code_code_background());\n    let {code} = result;\n    app_learn_code_style_code_color(code);\n    html_style_pre_wrap(code);\n    return result;\n}\n","./public/src/app_learn_code_code_part_titled_output.mjs":"import {app_learn_code_output_background} from \"./app_learn_code_output_background.mjs\";\nimport {app_learn_code_code_part_title_output} from \"./app_learn_code_code_part_title_output.mjs\";\nimport {app_learn_code_code_part_titled} from \"./app_learn_code_code_part_titled.mjs\";\nexport function app_learn_code_code_part_titled_output(container, output) {\n    app_learn_code_code_part_titled(container, app_learn_code_code_part_title_output(), output, app_learn_code_output_background());\n}\n","./public/src/app_learn_code_code_part_title_output.mjs":"export function app_learn_code_code_part_title_output() {\n    return 'output :';\n}\n","./public/src/app_learn_code_eval.mjs":"export function app_learn_code_eval(c) {\n    let source_augmented = `let log_old = console.log;\n            let messages = [];\n            console.log = message => messages.push(message);\n            ${c};\n            console.log = log_old;\n            messages;`;\n    let messages = eval(source_augmented);\n    return messages;\n}\n","./public/src/app_learn_code_eval_messages_to_string.mjs":"import {list_join} from \"./list_join.mjs\";\nexport function app_learn_code_eval_messages_to_string(messages) {\n    return list_join(messages, '<br>');\n}\n","./public/src/app_learn_code_eval_to_string.mjs":"import {app_learn_code_eval_messages_to_string} from \"./app_learn_code_eval_messages_to_string.mjs\";\nimport {app_learn_code_eval} from \"./app_learn_code_eval.mjs\";\nexport function app_learn_code_eval_to_string(source) {\n    let messages = app_learn_code_eval(source);\n    let joined = app_learn_code_eval_messages_to_string(messages);\n    return joined;\n}\n","./public/src/app_learn_code_lessons.mjs":"import {lesson_variables_declare_shorthand} from \"./lesson_variables_declare_shorthand.mjs\";\nimport {lesson_variable_change} from \"./lesson_variable_change.mjs\";\nimport {lesson_log_boolean} from \"./lesson_log_boolean.mjs\";\nimport {lesson_statements_three} from \"./lesson_statements_three.mjs\";\nimport {lesson_statements_two} from \"./lesson_statements_two.mjs\";\nimport {lesson_equal_string} from \"./lesson_equal_string.mjs\";\nimport {lesson_equal_number} from \"./lesson_equal_number.mjs\";\nimport {lesson_greater_than_equal} from \"./lesson_greater_than_equal.mjs\";\nimport {lesson_less_than_equal} from \"./lesson_less_than_equal.mjs\";\nimport {lesson_greater_than} from \"./lesson_greater_than.mjs\";\nimport {lesson_less_than} from \"./lesson_less_than.mjs\";\nimport {lesson_divide} from \"./lesson_divide.mjs\";\nimport {lesson_multiply} from \"./lesson_multiply.mjs\";\nimport {lesson_subtract} from \"./lesson_subtract.mjs\";\nimport {lesson_add} from \"./lesson_add.mjs\";\nimport {lesson_log_number} from \"./lesson_log_number.mjs\";\nimport {lesson_console_log} from \"./lesson_console_log.mjs\";\nimport {list_add} from \"./list_add.mjs\";\nimport {lesson_equal_not_number} from \"./lesson_equal_not_number.mjs\";\nimport {lesson_equal_not_string} from \"./lesson_equal_not_string.mjs\";\nimport {lesson_variable} from \"./lesson_variable.mjs\";\nimport {lesson_variable_log_twice} from \"./lesson_variable_log_twice.mjs\";\nimport {lesson_variable_shorthand} from \"./lesson_variable_shorthand.mjs\";\nimport {lesson_variables_two} from \"./lesson_variables_two.mjs\";\nimport {lesson_variable_change_2} from \"./lesson_variable_change_2.mjs\";\nimport {lesson_add_numbers_three} from \"./lesson_add_numbers_three.mjs\";\nimport {lesson_variables_three} from \"./lesson_variables_three.mjs\";\nimport {lesson_if_true} from \"./lesson_if_true.mjs\";\nimport {lesson_if_false} from \"./lesson_if_false.mjs\";\nimport {lesson_if_binary} from \"./lesson_if_binary.mjs\";\nimport {lesson_if_variable} from \"./lesson_if_variable.mjs\";\nimport {lesson_variable_binary} from \"./lesson_variable_binary.mjs\";\nimport {lesson_if_else} from \"./lesson_if_else.mjs\";\nimport {lesson_if_else_zero} from \"./lesson_if_else_zero.mjs\";\nimport {lesson_if_else_positive} from \"./lesson_if_else_positive.mjs\";\nimport {lesson_if_else_negative} from \"./lesson_if_else_negative.mjs\";\nimport {lesson_if_else_if} from \"./lesson_if_else_if.mjs\";\nimport {lesson_mod} from \"./lesson_mod.mjs\";\nexport function app_learn_code_lessons() {\n    let lesson_creates = [];\n    list_add(lesson_creates, lesson_console_log);\n    list_add(lesson_creates, lesson_log_number);\n    list_add(lesson_creates, lesson_add);\n    list_add(lesson_creates, lesson_subtract);\n    list_add(lesson_creates, lesson_multiply);\n    list_add(lesson_creates, lesson_divide);\n    list_add(lesson_creates, lesson_less_than);\n    list_add(lesson_creates, lesson_greater_than);\n    list_add(lesson_creates, lesson_equal_number);\n    list_add(lesson_creates, lesson_equal_string);\n    list_add(lesson_creates, lesson_less_than_equal);\n    list_add(lesson_creates, lesson_greater_than_equal);\n    list_add(lesson_creates, lesson_equal_not_number);\n    list_add(lesson_creates, lesson_equal_not_string);\n    list_add(lesson_creates, lesson_statements_two);\n    list_add(lesson_creates, lesson_statements_three);\n    list_add(lesson_creates, lesson_log_boolean);\n    list_add(lesson_creates, lesson_variable);\n    list_add(lesson_creates, lesson_variable_log_twice);\n    list_add(lesson_creates, lesson_variable_change);\n    list_add(lesson_creates, lesson_variable_shorthand);\n    list_add(lesson_creates, lesson_variable_change_2);\n    list_add(lesson_creates, lesson_variables_two);\n    list_add(lesson_creates, lesson_variables_declare_shorthand);\n    list_add(lesson_creates, lesson_add_numbers_three);\n    list_add(lesson_creates, lesson_variables_three);\n    list_add(lesson_creates, lesson_variable_binary);\n    list_add(lesson_creates, lesson_if_true);\n    list_add(lesson_creates, lesson_if_false);\n    list_add(lesson_creates, lesson_if_binary);\n    list_add(lesson_creates, lesson_if_variable);\n    list_add(lesson_creates, lesson_if_else);\n    list_add(lesson_creates, lesson_if_else_zero);\n    list_add(lesson_creates, lesson_if_else_positive);\n    list_add(lesson_creates, lesson_if_else_negative);\n    list_add(lesson_creates, lesson_if_else_if);\n    list_add(lesson_creates, lesson_mod);\n    return lesson_creates;\n}\n","./public/src/app_learn_code_log.mjs":"export function app_learn_code_log(code) {\n    return `console.log(${code});`;\n}\n","./public/src/app_learn_code_log_add.mjs":"import {js_code_add} from \"./js_code_add.mjs\";\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\nexport function app_learn_code_log_add(a, b) {\n    return app_learn_code_log(js_code_add(a, b));\n}\n","./public/src/app_learn_code_log_add_3.mjs":"import {js_code_add_3} from \"./js_code_add_3.mjs\";\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\nexport function app_learn_code_log_add_3(a, b, c) {\n    return app_learn_code_log(js_code_add_3(a, b, c));\n}\n","./public/src/app_learn_code_log_delimit.mjs":"import {string_delimit} from \"./string_delimit.mjs\";\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\nexport function app_learn_code_log_delimit(message) {\n    return app_learn_code_log(string_delimit(message));\n}\n","./public/src/app_learn_code_log_random_value.mjs":"import {app_learn_code_random_value} from \"./app_learn_code_random_value.mjs\";\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\nexport function app_learn_code_log_random_value() {\n    return app_learn_code_log(app_learn_code_random_value());\n}\n","./public/src/app_learn_code_output_background.mjs":"export function app_learn_code_output_background() {\n    return 'lightgreen';\n}\n","./public/src/app_learn_code_quiz.mjs":"import {app_learn_code_quiz_inner} from \"./app_learn_code_quiz_inner.mjs\";\nexport function app_learn_code_quiz(source_get) {\n    return parent => app_learn_code_quiz_inner(parent, source_get);\n}\n","./public/src/app_learn_code_quiz_inner.mjs":"import {app_learn_code_range_retry} from \"./app_learn_code_range_retry.mjs\";\nimport {app_learn_code_answer_correct} from \"./app_learn_code_answer_correct.mjs\";\nimport {list_get} from \"./list_get.mjs\";\nimport {list_random_index} from \"./list_random_index.mjs\";\nimport {app_learn_code_style_success} from \"./app_learn_code_style_success.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {list_any} from \"./list_any.mjs\";\nimport {app_learn_code_eval_to_string} from \"./app_learn_code_eval_to_string.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nimport {html_disable} from \"./html_disable.mjs\";\nimport {html_style} from \"./html_style.mjs\";\nimport {html_button_width_full_text_click} from \"./html_button_width_full_text_click.mjs\";\nimport {each_index} from \"./each_index.mjs\";\nimport {app_learn_code_code_part_title_output} from \"./app_learn_code_code_part_title_output.mjs\";\nimport {app_learn_code_code_part_title} from \"./app_learn_code_code_part_title.mjs\";\nimport {html_hr} from \"./html_hr.mjs\";\nimport {app_learn_code_code_part_titled_code} from \"./app_learn_code_code_part_titled_code.mjs\";\nimport {list_add} from \"./list_add.mjs\";\nimport {array_new} from \"./array_new.mjs\";\nimport {range} from \"./range.mjs\";\nimport {app_learn_code_code_container} from \"./app_learn_code_code_container.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {html_clear} from \"./html_clear.mjs\";\nimport {html_div} from \"./html_div.mjs\";\nimport {list_sort_string} from \"./list_sort_string.mjs\";\nexport function app_learn_code_quiz_inner(parent, source_get) {\n    let previous;\n    let div = html_div(parent);\n    refresh(false);\n    function refresh(refreshed) {\n        html_clear(div);\n        html_p_text(div, 'below is a quiz');\n        html_p_text(div, 'choose the correct output for the code');\n        let container = app_learn_code_code_container(div);\n        let choices_count = 4;\n        let r = range(choices_count);\n        let choices = array_new();\n        for (let c of r) {\n            for (let i of app_learn_code_range_retry()) {\n                let source = source_get();\n                let answer = app_learn_code_eval_to_string(source);\n                if (list_any(choices, c => equal(c.answer, answer))) {\n                    continue;\n                }\n                if (equal(source, previous)) {\n                    continue;\n                }\n                list_add(choices, {\n                    source,\n                    answer\n                });\n                break;\n            }\n        }\n        list_sort_string(choices, c => c.answer);\n        let correct_index = list_random_index(choices);\n        let {source} = list_get(choices, correct_index);\n        previous = source;\n        app_learn_code_code_part_titled_code(container, source);\n        html_hr(container);\n        app_learn_code_code_part_title(container, app_learn_code_code_part_title_output());\n        each_index(choices, (c, index) => {\n            let {answer} = c;\n            let button = html_button_width_full_text_click(container, answer, function on_click() {\n                if (index === correct_index) {\n                    app_learn_code_style_success(button);\n                    setTimeout(() => {\n                        refresh(true);\n                        container_bottom_show();\n                    }, 200);\n                } else {\n                    container_bottom_hide();\n                    html_disable(button);\n                    html_style(button, {\n                        'background-color': 'salmon',\n                        'border-color': 'tomato'\n                    });\n                }\n            });\n            html_style_monospace(button);\n        });\n        let container_bottom = html_div(div);\n        if (!refreshed) {\n            container_bottom_hide();\n        }\n        app_learn_code_answer_correct(container_bottom);\n        html_p_text(container_bottom, 'if you want , take another quiz above');\n        html_p_text(container_bottom, 'otherwise , press the \"next\" button below');\n        function container_bottom_hide() {\n            html_style(container_bottom, {\n                display: 'none'\n            });\n        }\n        function container_bottom_show() {\n            html_style(container_bottom, {\n                display: 'block'\n            });\n        }\n    }\n}\n","./public/src/app_learn_code_random_boolean_binary.mjs":"import {random_50_50} from \"./random_50_50.mjs\";\nimport {list_includes} from \"./list_includes.mjs\";\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\nimport {call_multiple} from \"./call_multiple.mjs\";\nimport {list_random_item} from \"./list_random_item.mjs\";\nexport function app_learn_code_random_boolean_binary() {\n    let operators = ['<', '<=', '>', '>=', '===', '!=='];\n    let operator = list_random_item(operators);\n    let operators_equality = ['===', '!=='];\n    let values = call_multiple(integer_random_digit_single_positive, 2);\n    let [a, b] = values;\n    if (list_includes(operators_equality, operator) && random_50_50()) {\n        b = a;\n    }\n    let boolean = `${a} ${operator} ${b}`;\n    return boolean;\n}\n","./public/src/app_learn_code_random_identifier.mjs":"import {list_single} from \"./list_single.mjs\";\nimport {app_learn_code_random_identifiers} from \"./app_learn_code_random_identifiers.mjs\";\nexport function app_learn_code_random_identifier() {\n    let list = app_learn_code_random_identifiers(1);\n    return list_single(list);\n}\n","./public/src/app_learn_code_random_identifiers.mjs":"import {keyboard_keys} from \"./keyboard_keys.mjs\";\nimport {list_remove} from \"./list_remove.mjs\";\nimport {list_scramble} from \"./list_scramble.mjs\";\nimport {list_take} from \"./list_take.mjs\";\nexport function app_learn_code_random_identifiers(count) {\n    let ks = keyboard_keys();\n    'the letter l looks like an i and a 1 so removing to to avoid visual ambiguity';\n    list_remove(ks, 'l');\n    list_scramble(ks);\n    return list_take(ks, count);\n}\n","./public/src/app_learn_code_random_value.mjs":"import {lesson_console_log_quiz_value} from \"./lesson_console_log_quiz_value.mjs\";\nimport {random_50_50} from \"./random_50_50.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {integer_random} from \"./integer_random.mjs\";\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\nexport function app_learn_code_random_value() {\n    let value;\n    let r = integer_random(1, 3);\n    if (equal(r, 1)) {\n        value = integer_random_digit_single_positive();\n    } else if (equal(r, 2)) {\n        value = random_50_50();\n    } else {\n        value = lesson_console_log_quiz_value();\n    }\n    return value;\n}\n","./public/src/app_learn_code_range_retry.mjs":"import {app_learn_code_retry_count} from \"./app_learn_code_retry_count.mjs\";\nimport {range} from \"./range.mjs\";\nexport function app_learn_code_range_retry() {\n    return range(app_learn_code_retry_count());\n}\n","./public/src/app_learn_code_retry_count.mjs":"export function app_learn_code_retry_count() {\n    return 100;\n}\n","./public/src/app_learn_code_source_to_tokens.mjs":"import {list_includes} from \"./list_includes.mjs\";\nimport {string_delimit} from \"./string_delimit.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {list_map} from \"./list_map.mjs\";\nimport {js_tokenize} from \"./js_tokenize.mjs\";\nimport {list_adder} from \"./list_adder.mjs\";\nexport function app_learn_code_source_to_tokens(source) {\n    let tokens = list_adder(la => {\n        for (let token of js_tokenize(source)) {\n            la(token);\n        }\n    });\n    let answer = list_map(tokens, t => {\n        let {type} = t;\n        let {label} = type;\n        let {value} = t;\n        if (equal(label, 'string')) {\n            return string_delimit(value);\n        }\n        let labels = ['name', 'num', '+/-', '</>/<=/>=', '==/!=/===/!=='];\n        if (list_includes(labels, label)) {\n            return value;\n        }\n        return label;\n    });\n    return answer;\n}\n","./public/src/app_learn_code_source_variations.mjs":"import {js_unparse_indent_none} from \"./js_unparse_indent_none.mjs\";\nimport {list_empty_not_is} from \"./list_empty_not_is.mjs\";\nimport {list_includes_not} from \"./list_includes_not.mjs\";\nimport {list_remove} from \"./list_remove.mjs\";\nimport {js_node_types} from \"./js_node_types.mjs\";\nimport {js_visit_node} from \"./js_visit_node.mjs\";\nimport {less_than} from \"./less_than.mjs\";\nimport {string_split_empty} from \"./string_split_empty.mjs\";\nimport {number_string_to} from \"./number_string_to.mjs\";\nimport {list_filter} from \"./list_filter.mjs\";\nimport {object_property_swap} from \"./object_property_swap.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {js_node_type} from \"./js_node_type.mjs\";\nimport {js_parse} from \"./js_parse.mjs\";\nimport {list_includes} from \"./list_includes.mjs\";\nimport {list_length} from \"./list_length.mjs\";\nimport {range} from \"./range.mjs\";\nimport {list_get} from \"./list_get.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nimport {string_length} from \"./string_length.mjs\";\nimport {list_add} from \"./list_add.mjs\";\nimport {list_empty_is} from \"./list_empty_is.mjs\";\nimport {object_property_set} from \"./object_property_set.mjs\";\nimport {list_pop} from \"./list_pop.mjs\";\nexport function app_learn_code_source_variations(source) {\n    let operators = ['+', '*', '===', '!=='];\n    let {filtered, ast} = ast_filtered(source);\n    let filtered_length = list_length(filtered);\n    let s = js_unparse_indent_none(ast);\n    if (equal(filtered_length, 0)) {\n        return [s];\n    }\n    let result = [];\n    let remaining = [s];\n    while (list_empty_not_is(remaining)) {\n        let r = list_pop(remaining);\n        let count = Math.pow(2, filtered_length);\n        for (let i of range(count)) {\n            let {filtered, ast} = ast_filtered(r);\n            let base2 = number_string_to(i, 2);\n            while (less_than(string_length(base2), filtered_length)) {\n                base2 = string_combine(\"0\", base2);\n            }\n            let b_split = string_split_empty(base2);\n            let b_split_length = list_length(b_split);\n            for (let n of range(filtered_length)) {\n                let swap = false;\n                if (less_than(n, b_split_length)) {\n                    let b_split_n = list_get(b_split, n);\n                    swap = equal(b_split_n, '0');\n                }\n                if (swap) {\n                    let filtered_n = list_get(filtered, n);\n                    object_property_swap(filtered_n, 'left', 'right');\n                }\n            }\n            js_visit_node(ast, 'BinaryExpression', v => {\n                let {node} = v;\n                let nt = js_node_types(node);\n                let valid = ['BinaryExpression', 'Identifier', 'Literal'];\n                for (let v of valid) {\n                    if (list_includes(nt, v)) {\n                        list_remove(nt, v);\n                    }\n                }\n                if (list_empty_is(nt)) {\n                    let {right} = node;\n                    let {type} = right;\n                    if (equal(type, 'BinaryExpression')) {\n                        let {operator} = node;\n                        let {operator: operator_r} = right;\n                        if (equal(operator_r, operator)) {\n                            let {left} = node;\n                            let {left: left_r, right: right_r} = right;\n                            object_property_set(node, 'left', right);\n                            object_property_set(right, 'left', left);\n                            object_property_set(right, 'right', left_r);\n                            object_property_set(node, 'right', right_r);\n                        }\n                    }\n                }\n            });\n            let alternative = js_unparse_indent_none(ast);\n            if (list_includes_not(result, alternative)) {\n                list_add(result, alternative);\n                list_add(remaining, alternative);\n            }\n        }\n    }\n    return result;\n    function ast_filtered(source) {\n        let ast = js_parse(source);\n        let bes = js_node_type(ast, 'BinaryExpression');\n        let filtered = list_filter(bes, be => {\n            let {operator} = be;\n            return list_includes(operators, operator);\n        });\n        return {\n            filtered,\n            ast\n        };\n    }\n}\n","./public/src/app_learn_code_style_code.mjs":"import {html_style_monospace} from \"./html_style_monospace.mjs\";\nimport {app_learn_code_style_rounded_padded} from \"./app_learn_code_style_rounded_padded.mjs\";\nexport function app_learn_code_style_code(code) {\n    app_learn_code_style_rounded_padded(code);\n    html_style_monospace(code);\n}\n","./public/src/app_learn_code_style_code_color.mjs":"import {html_style} from \"./html_style.mjs\";\nexport function app_learn_code_style_code_color(code) {\n    html_style(code, {\n        'color': 'white'\n    });\n}\n","./public/src/app_learn_code_style_code_colored.mjs":"import {app_learn_code_style_code} from \"./app_learn_code_style_code.mjs\";\nimport {html_style_background_color} from \"./html_style_background_color.mjs\";\nexport function app_learn_code_style_code_colored(component) {\n    html_style_background_color(component, '#cfe7f7');\n    app_learn_code_style_code(component);\n}\n","./public/src/app_learn_code_style_code_color_background.mjs":"export function app_learn_code_style_code_color_background() {\n    return 'black';\n}\n","./public/src/app_learn_code_style_rounded_padded.mjs":"import {app_learn_code_style_rounded_padded_style} from \"./app_learn_code_style_rounded_padded_style.mjs\";\nimport {html_style} from \"./html_style.mjs\";\nexport function app_learn_code_style_rounded_padded(component) {\n    html_style(component, app_learn_code_style_rounded_padded_style());\n}\n","./public/src/app_learn_code_style_rounded_padded_style.mjs":"import {html_style_units} from \"./html_style_units.mjs\";\nexport function app_learn_code_style_rounded_padded_style() {\n    return {\n        'padding': html_style_units(2),\n        'border-radius': html_style_units(5)\n    };\n}\n","./public/src/app_learn_code_style_success.mjs":"import {html_style} from \"./html_style.mjs\";\nexport function app_learn_code_style_success(component) {\n    html_style(component, {\n        'background-color': 'lightgreen',\n        'border-color': 'MediumSeaGreen'\n    });\n}\n","./public/src/app_learn_code_unique.mjs":"import {list_includes_not} from \"./list_includes_not.mjs\";\nimport {app_learn_code_range_retry} from \"./app_learn_code_range_retry.mjs\";\nexport function app_learn_code_unique(value_get, existing) {\n    let value2;\n    for (let i of app_learn_code_range_retry()) {\n        value2 = value_get();\n        if (list_includes_not(existing, value2)) {\n            break;\n        }\n    }\n    return value2;\n}\n","./public/src/app_learn_code_unique_multiple.mjs":"import {greater_than_equal} from \"./greater_than_equal.mjs\";\nimport {list_add} from \"./list_add.mjs\";\nimport {app_learn_code_unique} from \"./app_learn_code_unique.mjs\";\nimport {range} from \"./range.mjs\";\nimport {array_new} from \"./array_new.mjs\";\nimport {assert} from \"./assert.mjs\";\nexport function app_learn_code_unique_multiple(value_get, count) {\n    assert(greater_than_equal, [count, 2]);\n    let names = array_new();\n    for (let i of range(count)) {\n        let name = app_learn_code_unique(value_get, names);\n        list_add(names, name);\n    }\n    return names;\n}\n","./public/src/app_learn_code_unscramble.mjs":"import {html_style_hidden} from \"./html_style_hidden.mjs\";\nimport {list_empty_is} from \"./list_empty_is.mjs\";\nimport {null_not_is} from \"./null_not_is.mjs\";\nimport {app_learn_code_source_to_tokens} from \"./app_learn_code_source_to_tokens.mjs\";\nimport {app_learn_code_source_variations} from \"./app_learn_code_source_variations.mjs\";\nimport {app_learn_code_answer_correct} from \"./app_learn_code_answer_correct.mjs\";\nimport {list_scramble} from \"./list_scramble.mjs\";\nimport {string_take} from \"./string_take.mjs\";\nimport {list_take} from \"./list_take.mjs\";\nimport {app_learn_code_code_part_titled_code} from \"./app_learn_code_code_part_titled_code.mjs\";\nimport {list_copy} from \"./list_copy.mjs\";\nimport {app_learn_code_code_part_titled_output} from \"./app_learn_code_code_part_titled_output.mjs\";\nimport {html_style_units} from \"./html_style_units.mjs\";\nimport {app_learn_code_style_code_color} from \"./app_learn_code_style_code_color.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {app_learn_code_code_background} from \"./app_learn_code_code_background.mjs\";\nimport {html_span_text} from \"./html_span_text.mjs\";\nimport {app_learn_code_code_part_generic} from \"./app_learn_code_code_part_generic.mjs\";\nimport {app_learn_code_eval_messages_to_string} from \"./app_learn_code_eval_messages_to_string.mjs\";\nimport {app_learn_code_eval} from \"./app_learn_code_eval.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {list_map} from \"./list_map.mjs\";\nimport {html_style} from \"./html_style.mjs\";\nimport {list_length} from \"./list_length.mjs\";\nimport {list_get} from \"./list_get.mjs\";\nimport {html_on_click} from \"./html_on_click.mjs\";\nimport {array_new} from \"./array_new.mjs\";\nimport {list_add} from \"./list_add.mjs\";\nimport {html_inner_set} from \"./html_inner_set.mjs\";\nimport {html_clear} from \"./html_clear.mjs\";\nimport {add} from \"./add.mjs\";\nimport {string_length} from \"./string_length.mjs\";\nimport {html_div} from \"./html_div.mjs\";\nimport {html_button_width_full_text_click} from \"./html_button_width_full_text_click.mjs\";\nimport {html_style_centered} from \"./html_style_centered.mjs\";\nimport {list_first} from \"./list_first.mjs\";\nimport {add_1} from \"./add_1.mjs\";\nimport {list_concat} from \"./list_concat.mjs\";\nimport {list_equal} from \"./list_equal.mjs\";\nimport {list_filter} from \"./list_filter.mjs\";\nimport {html_style_background_color} from \"./html_style_background_color.mjs\";\nimport {app_learn_code_range_retry} from \"./app_learn_code_range_retry.mjs\";\nimport {equal_not} from \"./equal_not.mjs\";\nexport function app_learn_code_unscramble(source_get) {\n    return function app_learn_code_unscramble_inner(parent) {\n        let previous;\n        let div = html_div(parent);\n        refresh();\n        function refresh() {\n            html_clear(div);\n            let source;\n            for (let i of app_learn_code_range_retry()) {\n                source = source_get();\n                if (equal_not(source, previous)) {\n                    break;\n                }\n            }\n            previous = source;\n            let variations = app_learn_code_source_variations(source);\n            source = list_first(variations);\n            let messages = app_learn_code_eval(source);\n            let joined = app_learn_code_eval_messages_to_string(messages);\n            html_p_text(div, 'below is another quiz');\n            html_p_text(div, 'write a program that outputs the following :');\n            app_learn_code_code_part_titled_output(div, joined);\n            html_p_text(div, 'tap or click each part of the program in the correct order');\n            let {code} = app_learn_code_code_part_titled_code(div, 'a');\n            html_style_hidden(code);\n            let success = html_div(div);\n            let answers = list_map(variations, v => {\n                return {\n                    tokens: app_learn_code_source_to_tokens(v),\n                    source: v\n                };\n            });\n            let answer = app_learn_code_source_to_tokens(source);\n            console.log({\n                answer\n            });\n            let scrambled = list_copy(answer);\n            list_scramble(scrambled);\n            let parts = array_new();\n            let current_index = 0;\n            let choices = array_new();\n            for (let s of scrambled) {\n                let part = app_learn_code_code_part_generic(html_span_text, div, s, app_learn_code_code_background());\n                list_add(parts, part);\n                app_learn_code_style_code_color(part);\n                html_style(part, {\n                    margin: html_style_units(3),\n                    display: 'inline-block',\n                    cursor: 'pointer',\n                    'min-width': html_style_units(15)\n                });\n                html_style_centered(part);\n                html_on_click(part, () => {\n                    let mapped = list_map(answers, a => {\n                        let {tokens} = a;\n                        let expected = list_take(tokens, add_1(current_index));\n                        let actual = list_concat(choices, [s]);\n                        if (list_equal(expected, actual)) {\n                            return a;\n                        }\n                        return null;\n                    });\n                    let filtered = list_filter(mapped, m => null_not_is(m));\n                    if (list_empty_is(filtered)) {\n                        html_style_background_color(part, 'darkred');\n                        return;\n                    }\n                    let first = list_first(filtered);\n                    let {tokens} = first;\n                    let current = list_get(tokens, current_index);\n                    list_add(choices, s);\n                    html_style(code, {\n                        visibility: 'visible'\n                    });\n                    for (let p of parts) {\n                        html_style_background_color(p, app_learn_code_code_background());\n                    }\n                    html_style(part, {\n                        display: 'none'\n                    });\n                    let first_source = first.source;\n                    current_index++;\n                    let source_index = 0;\n                    for (let c of choices) {\n                        source_index = first_source.indexOf(c, source_index);\n                    }\n                    let take_count = add(source_index, string_length(current.toString()));\n                    html_inner_set(code, string_take(first_source, take_count));\n                    if (equal(current_index, list_length(answer))) {\n                        html_style_background_color(code, 'darkgreen');\n                        app_learn_code_answer_correct(success);\n                        html_p_text(success, 'if you want to take another quiz , press the \"another quiz\" button below : ');\n                        html_p_text(success, 'otherwise , press the \"next\" button below');\n                        html_button_width_full_text_click(success, 'another quiz', refresh);\n                    }\n                });\n            }\n        }\n    };\n}\n","./public/src/app_memorize.mjs":"import {html_style_button_default} from \"./html_style_button_default.mjs\";\nimport {keyboard_keys_rows} from \"./keyboard_keys_rows.mjs\";\nimport {html_hash} from \"./html_hash.mjs\";\nimport {html_style_visible} from \"./html_style_visible.mjs\";\nimport {html_style_hidden} from \"./html_style_hidden.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {list_last} from \"./list_last.mjs\";\nimport {app_memorize_group} from \"./app_memorize_group.mjs\";\nimport {undefined_not_is} from \"./undefined_not_is.mjs\";\nimport {html_style_font_color} from \"./html_style_font_color.mjs\";\nimport {html_scroll_center} from \"./html_scroll_center.mjs\";\nimport {list_adder} from \"./list_adder.mjs\";\nimport {greater_than_equal} from \"./greater_than_equal.mjs\";\nimport {string_case_lower} from \"./string_case_lower.mjs\";\nimport {string_letter_first} from \"./string_letter_first.mjs\";\nimport {html_style_button_default_initialize} from \"./html_style_button_default_initialize.mjs\";\nimport {multiply} from \"./multiply.mjs\";\nimport {list_length} from \"./list_length.mjs\";\nimport {string_case_upper} from \"./string_case_upper.mjs\";\nimport {html_style_centered} from \"./html_style_centered.mjs\";\nimport {html_button} from \"./html_button.mjs\";\nimport {html_div} from \"./html_div.mjs\";\nimport {subtract} from \"./subtract.mjs\";\nimport {string_to} from \"./string_to.mjs\";\nimport {html_style_background_color} from \"./html_style_background_color.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {and} from \"./and.mjs\";\nimport {html_style_default_font_size} from \"./html_style_default_font_size.mjs\";\nimport {bible_engbsb_storage_path_file} from \"./bible_engbsb_storage_path_file.mjs\";\nimport {storage_url} from \"./storage_url.mjs\";\nimport {http_get} from \"./http_get.mjs\";\nimport {html_document_body} from \"./html_document_body.mjs\";\nimport {html_element} from \"./html_element.mjs\";\nimport {html_inner_set} from \"./html_inner_set.mjs\";\nimport {html_span_text} from \"./html_span_text.mjs\";\nimport {html_strong_text} from \"./html_strong_text.mjs\";\nimport {html_style_sans_serif} from \"./html_style_sans_serif.mjs\";\nimport {each_index} from \"./each_index.mjs\";\nimport {html_style} from \"./html_style.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nimport {string_split} from \"./string_split.mjs\";\nimport {html_button_width_full_text_click} from \"./html_button_width_full_text_click.mjs\";\nimport {add} from \"./add.mjs\";\nimport {html_on_click} from \"./html_on_click.mjs\";\nimport {list_get} from \"./list_get.mjs\";\nimport {html_clear} from \"./html_clear.mjs\";\nimport {list_first} from \"./list_first.mjs\";\nimport {string_combine_multiple} from \"./string_combine_multiple.mjs\";\nimport {mod} from \"./mod.mjs\";\nimport {add_1} from \"./add_1.mjs\";\nimport {list_index} from \"./list_index.mjs\";\nimport {list_map} from \"./list_map.mjs\";\nimport {string_replace} from \"./string_replace.mjs\";\nimport {html_on} from \"./html_on.mjs\";\nimport {object_property_set} from \"./object_property_set.mjs\";\nimport {object_property_get} from \"./object_property_get.mjs\";\nimport {list_add} from \"./list_add.mjs\";\nexport async function app_memorize() {\n    let root = html_document_body();\n    html_style(root, {\n        margin: '0'\n    });\n    html_style_sans_serif(root);\n    html_style_default_font_size(3);\n    html_style_button_default_initialize();\n    let file_path = bible_engbsb_storage_path_file('JHN19');\n    let verses = await http_get(storage_url(file_path));\n    let verses_length = list_length(verses);\n    let groups = app_memorize_group(verses_length);\n    let patterns;\n    let patterns_length;\n    let pattern_index;\n    let group_current;\n    let verse_index;\n    let token_index;\n    let previous_spacer2;\n    let previous_token_element;\n    let verse_elements;\n    let keyboard_buttons;\n    let mistakes;\n    let button_height = 7;\n    group_current_set(list_first(groups));\n    html_hash({\n        'verses': value => {\n            let mapped = list_map(groups, group_to_range_string);\n            let mapped2 = list_map(mapped, m => string_replace(m, ' ', ''));\n            let index = list_index(mapped2, value);\n            let g = list_get(groups, index);\n            group_current_set(g);\n        },\n        'pattern': value => {\n            pattern_index = list_index(patterns, value);\n        }\n    });\n    refresh_memorize();\n    function group_current_set(g) {\n        group_current = g;\n        if (equal(list_length(group_current), 1)) {\n            patterns = ['1', '110', '10', '01', '01001', '001', '0', '0', '0', '0'];\n        } else {\n            patterns = ['1', '10', '0', '0', '0', '0'];\n        }\n        patterns_length = list_length(patterns);\n        verse_index = 0;\n        token_index = 0;\n        pattern_index = 0;\n        mistakes = false;\n    }\n    function refresh_settings() {\n        html_clear(root);\n        html_button_width_full_text_click(root, 'back', () => {\n            refresh_memorize();\n        });\n        html_button_width_full_text_click(root, string_combine_multiple(['verses ', group_to_range_string(group_current)]), () => {\n            html_clear(root);\n            html_button_width_full_text_click(root, 'back', () => {\n                refresh_settings();\n            });\n            html_p_text(root, 'which verse range do you want to focus on ?');\n            for (let g of groups) {\n                let b = html_button(root);\n                html_inner_set(b, group_to_range_string(g));\n                html_on_click(b, () => {\n                    group_current_set(g);\n                    refresh_settings();\n                });\n            }\n        });\n        html_button_width_full_text_click(root, string_combine_multiple(['pattern ', list_get(patterns, pattern_index)]), () => {\n            html_clear(root);\n            html_button_width_full_text_click(root, 'back', () => {\n                refresh_settings();\n            });\n            html_p_text(root, 'which pattern of shown and hidden words do you want ?');\n            each_index(patterns, (p, i) => {\n                let b = html_button(root);\n                html_inner_set(b, p);\n                html_on_click(b, () => {\n                    pattern_index = i;\n                    refresh_settings();\n                });\n            });\n        });\n    }\n    function group_to_range_string(g) {\n        let first_verse_index = list_first(g);\n        let first_verse = list_get(verses, first_verse_index);\n        let {verse_number: first_verse_number} = first_verse;\n        let first_number = first_verse_number;\n        let last_verse_index = list_last(g);\n        let last_verse = list_get(verses, last_verse_index);\n        let {verse_number: last_verse_number} = last_verse;\n        let last_number = last_verse_number;\n        return string_combine_multiple([first_number, ' - ', last_number]);\n    }\n    function refresh_memorize() {\n        html_clear(root);\n        verse_index = 0;\n        token_index = 0;\n        previous_spacer2 = undefined;\n        previous_token_element = undefined;\n        verse_elements = undefined;\n        mistakes = false;\n        keyboard_buttons = {};\n        let p = list_get(patterns, pattern_index);\n        let pattern = string_split(p, '');\n        let settings_element = html_element(root, 'div');\n        let settings_button = html_button_width_full_text_click(settings_element, '⚙️ settings', refresh_settings);\n        html_style(settings_button, {\n            'margin-left': 0,\n            'margin-right': 0\n        });\n        let verses_element = html_element(root, 'div');\n        let keys = keyboard_keys_rows();\n        let keys_length = list_length(keys);\n        let keyboard_height = multiply(button_height, keys_length);\n        let offset = add(keyboard_height, 7);\n        let height_max = subtract(100, offset);\n        html_style(verses_element, {\n            'max-height': number_to_dvh(height_max),\n            'min-height': number_to_dvh(height_max),\n            'overflow-y': 'scroll'\n        });\n        let pattern_length = list_length(pattern);\n        let token_count = 0;\n        verse_elements = list_adder(la => {\n            each_index(group_current, (i, j) => {\n                let verse = list_get(verses, i);\n                let verse_element = html_element(verses_element, 'div');\n                let {tokens, verse_number} = verse;\n                let number_element = html_strong_text(verse_element, verse_number);\n                html_on_click(number_element, () => {\n                    token_index = 0;\n                    verse_index = j;\n                    html_scroll_center(verse_element);\n                });\n                let token_objects = list_adder(la => {\n                    each_index(tokens, (token, j) => {\n                        let m = mod(token_count, pattern_length);\n                        let token_pattern = list_get(pattern, m);\n                        let spacer = html_span_text(verse_element, ' ');\n                        let spacer2 = html_span_text(verse_element, '.');\n                        html_style_background_color(spacer2, 'green');\n                        html_style_font_color(spacer2, 'green');\n                        for (let s of [spacer, spacer2]) {\n                            html_style_hidden(s);\n                        }\n                        let token_element = html_span_text(verse_element, token);\n                        if (equal(token_pattern, '0')) {\n                            html_style_hidden(token_element);\n                            console.log({\n                                verse_index,\n                                j,\n                                token_element\n                            });\n                        }\n                        la({\n                            spacer2,\n                            token_element\n                        });\n                        token_count++;\n                    });\n                });\n                la({\n                    verse_element,\n                    token_objects\n                });\n            });\n        });\n        update_colors();\n        let keyboard_element = html_element(root, 'div');\n        html_style(keyboard_element, {\n            'max-height': number_to_dvh(keyboard_height)\n        });\n        for (let row of keys) {\n            let row_element = html_div(keyboard_element);\n            html_style_centered(row_element);\n            for (let k of row) {\n                let b = html_button(row_element);\n                object_property_set(keyboard_buttons, k, b);\n                html_inner_set(b, string_case_upper(k));\n                button_stylize(b);\n                html_on_click(b, () => {\n                    on_keydown(k);\n                });\n            }\n        }\n        return {\n            verse_elements\n        };\n    }\n    function button_stylize(b) {\n        let b_width = number_to_dvw(10 - 1);\n        html_style_centered(b);\n        html_style(b, {\n            'font-size': '3.8dvh',\n            margin: '0.25dvh',\n            'min-width': b_width,\n            'max-width': b_width,\n            'height': number_to_dvh(button_height - 0.6)\n        });\n    }\n    function update_colors() {\n        let current_verse = list_get(verse_elements, verse_index);\n        let {verse_element, token_objects} = current_verse;\n        let current_token = list_get(token_objects, token_index);\n        html_scroll_center(verse_element);\n        let {spacer2, token_element} = current_token;\n        html_style_visible(spacer2);\n        if (undefined_not_is(previous_spacer2)) {\n            html_style_hidden(previous_spacer2);\n        }\n        if (undefined_not_is(previous_token_element)) {\n            html_style_visible(previous_token_element);\n            console.log('here', previous_token_element);\n        }\n        previous_spacer2 = spacer2;\n        previous_token_element = token_element;\n    }\n    html_on(root, 'keydown', e => {\n        let {keyCode} = e;\n        let c = String.fromCharCode(keyCode);\n        let c_lower = string_case_lower(c);\n        on_keydown(c_lower);\n    });\n    let errored_keys = [];\n    function on_keydown(k) {\n        let j = list_get(group_current, verse_index);\n        let current_verse = list_get(verses, j);\n        let {tokens} = current_verse;\n        let current_token = list_get(tokens, token_index);\n        let letter_first = string_case_lower(string_letter_first(current_token));\n        if (equal(k, letter_first)) {\n            token_index++;\n            let tokens_length = list_length(tokens);\n            if (greater_than_equal(token_index, tokens_length)) {\n                verse_index++;\n                token_index = 0;\n            }\n            let group_current_length = list_length(group_current);\n            if (greater_than_equal(verse_index, group_current_length)) {\n                verse_index = 0;\n                let pattern = list_get(patterns, pattern_index);\n                if (and(equal(pattern, '0'), mistakes)) {\n                    mistakes = false;\n                } else {\n                    pattern_index++;\n                    if (greater_than_equal(pattern_index, patterns_length)) {\n                        let group_current_index = list_index(groups, group_current);\n                        let group_next_index = add_1(group_current_index);\n                        let group_next = list_get(groups, group_next_index);\n                        group_current_set(group_next);\n                    }\n                }\n                refresh_memorize();\n            } else {\n                update_colors();\n            }\n            for (let errored_key of errored_keys) {\n                html_style(errored_key, html_style_button_default());\n                button_stylize(errored_key, button_height);\n            }\n        } else {\n            mistakes = true;\n            html_style_visible(previous_token_element);\n            html_style_font_color(previous_token_element, 'red');\n            let keyboard_button = object_property_get(keyboard_buttons, k);\n            html_style(keyboard_button, {\n                'border-color': 'red'\n            });\n            html_style_background_color(keyboard_button, 'salmon');\n            list_add(errored_keys, keyboard_button);\n        }\n    }\n    function number_to_dvh(value) {\n        return string_combine(string_to(value), 'dvh');\n    }\n    function number_to_dvw(value) {\n        return string_combine(string_to(value), 'dvw');\n    }\n}\n","./public/src/app_memorize_group.mjs":"import {add} from \"./add.mjs\";\nimport {divide} from \"./divide.mjs\";\nimport {less_than_equal} from \"./less_than_equal.mjs\";\nimport {list_add} from \"./list_add.mjs\";\nimport {list_length} from \"./list_length.mjs\";\nimport {list_skip} from \"./list_skip.mjs\";\nimport {list_take} from \"./list_take.mjs\";\nimport {mod} from \"./mod.mjs\";\nimport {range} from \"./range.mjs\";\nexport function app_memorize_group(count) {\n    let indices = range(count);\n    let sub = 2;\n    let result = [];\n    recursive(result, indices);\n    return result;\n    function recursive(result, list) {\n        let length = list_length(list);\n        if (less_than_equal(length, 1)) {\n            list_add(result, list);\n            return;\n        }\n        let half = divide(length, sub);\n        let half_floor = floor(half);\n        let remainder = mod(length, sub);\n        let first_count = add(half_floor, remainder);\n        let first = list_take(list, first_count);\n        let second = list_skip(list, first_count);\n        let both = [first, second];\n        for (let b of both) {\n            recursive(result, b);\n        }\n        list_add(result, list);\n    }\n}\nfunction floor(value) {\n    return Math.floor(value);\n}\n","./public/src/app_new.mjs":"import {app_html_generate} from \"./app_html_generate.mjs\";\nimport {app_prefix} from \"./app_prefix.mjs\";\nimport {function_new} from \"./function_new.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nexport async function app_new(name) {\n    await app_html_generate(name);\n    let prefix = app_prefix();\n    let name_prefixed = string_combine(prefix, name);\n    await function_new(name_prefixed);\n}\n","./public/src/app_prefix.mjs":"export function app_prefix() {\n    return 'app_';\n}\n","./public/src/array_new.mjs":"export function array_new() {\n    return [];\n}\n","./public/src/assert.mjs":"import {returns} from \"./returns.mjs\";\nexport function assert(fn, args) {\n    returns(fn, true, args);\n}\n","./public/src/assert_async.mjs":"import {returns_async} from \"./returns_async.mjs\";\nexport async function assert_async(fn, args) {\n    await returns_async(fn, true, args);\n}\n","./public/src/assert_boolean.mjs":"import {error} from \"./error.mjs\";\nexport function assert_boolean(condition) {\n    if (condition === false) {\n        error('assert');\n    }\n}\n","./public/src/assert_not.mjs":"import {returns} from \"./returns.mjs\";\nexport function assert_not(fn, args) {\n    returns(fn, false, args);\n}\n","./public/src/assert_not_async.mjs":"import {returns_async} from \"./returns_async.mjs\";\nexport async function assert_not_async(fn, args) {\n    await returns_async(fn, false, args);\n}\n","./public/src/bible_ceb_chapter.mjs":"import {bible_engbsb_chapter} from \"./bible_engbsb_chapter.mjs\";\nimport {bible_verses_parse} from \"./bible_verses_parse.mjs\";\nimport {bible_chapter_parsed} from './bible_chapter_parsed.mjs';\nimport {string_case_lower} from './string_case_lower.mjs';\nimport {list_adder_unique} from './list_adder_unique.mjs';\nimport {string_replace_multiple} from './string_replace_multiple.mjs';\nimport {ceb_definition} from './ceb_definition.mjs';\nimport {object_property_set} from './object_property_set.mjs';\nimport {equal_by} from './equal_by.mjs';\nimport {assert} from './assert.mjs';\nimport {list_length} from './list_length.mjs';\nimport {json_to} from './json_to.mjs';\nimport {function_new_generic} from './function_new_generic.mjs';\nimport {js_code_return} from './js_code_return.mjs';\nexport async function bible_ceb_chapter(chapter_name) {\n    let eng = await bible_engbsb_chapter(chapter_name);\n    let parsed_ceb = await bible_chapter_parsed('cebulb_html', chapter_name);\n    let verses_ceb = parsed_ceb.querySelector('.p');\n    let rawText = verses_ceb.rawText;\n    let ceb = bible_verses_parse(rawText);\n    assert(equal_by, [eng, ceb, list_length]);\n    let symbols = [',', '1', '2', '.', ';', '“', '”', ':'];\n    let words_unique = list_adder_unique(la => {\n        for (let m of ceb) {\n            let {tokens} = m;\n            for (let token of tokens) {\n                let mapped3 = string_case_lower(token);\n                let mapped4 = string_replace_multiple(mapped3, symbols, '');\n                if (mapped4.length >= 1) {\n                    la(mapped4);\n                }\n            }\n        }\n    });\n    let definitions = {};\n    for (let w of words_unique) {\n        let d = await ceb_definition(w);\n        object_property_set(definitions, w, d);\n    }\n    let data = {\n        ceb,\n        eng,\n        definitions\n    };\n    let body_string = js_code_return(json_to(data));\n    const fn_name = `bible_data_${string_case_lower(chapter_name)}`;\n    await function_new_generic(fn_name, ``, body_string, false, [], false, false);\n    return fn_name;\n}\n","./public/src/bible_chapter_parsed.mjs":"import {file_read} from './file_read.mjs';\nimport {path_join} from './path_join.mjs';\nimport {string_combine} from './string_combine.mjs';\nimport {html_parse} from './html_parse.mjs';\nimport {folder_gitignore} from './folder_gitignore.mjs';\nexport async function bible_chapter_parsed(bible_folder, chapter_name) {\n    let folder_gitignore_result = folder_gitignore();\n    let folder = path_join([folder_gitignore_result, bible_folder]);\n    let chapter_path = string_combine(chapter_name, '.htm');\n    let joined = path_join([folder, chapter_path]);\n    let read = await file_read(joined);\n    let parsed = html_parse(read);\n    let notemarks = parsed.querySelectorAll('.notemark');\n    for (let n of notemarks) {\n        n.remove();\n    }\n    return parsed;\n}\n","./public/src/bible_data_jas01.mjs":"export function bible_data_jas01() {\n    return {\n        \"ceb\": [{\n            \"verse_number\": \"1\",\n            \"tokens\": [\"Si\", \"Santiago,\", \"usa\", \"ka\", \"sulugoon\", \"sa\", \"Dios\", \"ug\", \"kang\", \"Ginoong\", \"Jesu-Cristo,\", \"ngadto\", \"sa\", \"12\", \"ka\", \"mga\", \"tribo\", \"nga\", \"Nagkatibulaag,\", \"mga\", \"pangamusta.\"]\n        }, {\n            \"verse_number\": \"2\",\n            \"tokens\": [\"Isipa\", \"kining\", \"tanan\", \"nga\", \"kalipay,\", \"akong\", \"mga\", \"igsoon,\", \"sa\", \"dihang\", \"kamo\", \"makasinati\", \"sa\", \"daghang\", \"mga\", \"kasamok,\"]\n        }, {\n            \"verse_number\": \"3\",\n            \"tokens\": [\"nasayod\", \"kamo\", \"nga\", \"ang\", \"pagsulay\", \"sa\", \"inyong\", \"pagtuo\", \"mosangpot\", \"sa\", \"paglahutay.\"]\n        }, {\n            \"verse_number\": \"4\",\n            \"tokens\": [\"Tugoti\", \"nga\", \"ang\", \"paglahutay\", \"nga\", \"hingpit\", \"mabuhat,\", \"aron\", \"nga\", \"kamo\", \"mamahimong\", \"mahingpit\", \"ug\", \"hingkod,\", \"ug\", \"walay\", \"makulang.\"]\n        }, {\n            \"verse_number\": \"5\",\n            \"tokens\": [\"Apan\", \"kung\", \"adunay\", \"usa\", \"kaninyo\", \"nga\", \"nanginahanglan\", \"ug\", \"kaalam,\", \"pangayo\", \"niini\", \"gikan\", \"sa\", \"Dios,\", \"ang\", \"usa\", \"nga\", \"mohatag\", \"nga\", \"madagayaon\", \"ug\", \"walay\", \"pagbadlong\", \"sa\", \"tanan\", \"nga\", \"mangayo,\", \"ug\", \"siya\", \"mohatag\", \"niini.\"]\n        }, {\n            \"verse_number\": \"6\",\n            \"tokens\": [\"Apan\", \"pangayo\", \"uban\", \"sa\", \"pagtuo,\", \"nga\", \"walay\", \"pagduhaduha,\", \"kay\", \"ang\", \"usa\", \"nga\", \"nagduhaduha\", \"sama\", \"sa\", \"balod\", \"sa\", \"dagat,\", \"dad-on\", \"pinaagi\", \"sa\", \"hangin\", \"ug\", \"dalahon\", \"bisan\", \"asa.\"]\n        }, {\n            \"verse_number\": \"7\",\n            \"tokens\": [\"Tungod\", \"kay\", \"ang\", \"usa\", \"ka\", \"tawo\", \"kinahanglan\", \"dili\", \"maghunahuna\", \"nga\", \"siya\", \"makadawat\", \"sa\", \"iyang\", \"gihangyo\", \"sa\", \"Ginoo;\"]\n        }, {\n            \"verse_number\": \"8\",\n            \"tokens\": [\"kanang\", \"tawhana\", \"nagduhaduha,\", \"mabalhinbalhinon\", \"sa\", \"tanan\", \"niya\", \"nga\", \"mga\", \"pamaagi.\"]\n        }, {\n            \"verse_number\": \"9\",\n            \"tokens\": [\"Ang\", \"kabos\", \"nga\", \"igsoon\", \"kinahanglan\", \"nga\", \"magmaya\", \"sa\", \"iyang\", \"pagkahalangdon,\"]\n        }, {\n            \"verse_number\": \"10\",\n            \"tokens\": [\"samtang\", \"ang\", \"dato\", \"nga\", \"igsoon\", \"diha\", \"sa\", \"iyang\", \"pagpaubos,\", \"tungod\", \"kay\", \"siya\", \"molabay\", \"lamang\", \"sama\", \"sa\", \"usa\", \"ka\", \"bulak\", \"sa\", \"uma\", \"nga\", \"malaya.\"]\n        }, {\n            \"verse_number\": \"11\",\n            \"tokens\": [\"Ang\", \"adlaw\", \"mosubang\", \"uban\", \"sa\", \"makasunog\", \"nga\", \"kainit\", \"ug\", \"makapauga\", \"sa\", \"mga\", \"tanom,\", \"ug\", \"ang\", \"mga\", \"bulak\", \"mangatagak\", \"ug\", \"ang\", \"iyang\", \"kaanyag\", \"mamatay.\", \"Sa\", \"samang\", \"paagi\", \"ang\", \"dato\", \"nga\", \"tawo\", \"mangawala\", \"lang\", \"sa\", \"tunga-tunga\", \"sa\", \"ilang\", \"mga\", \"buluhaton.\"]\n        }, {\n            \"verse_number\": \"12\",\n            \"tokens\": [\"Bulahan\", \"ang\", \"tawo\", \"nga\", \"molahutay\", \"sa\", \"pagsulay,\", \"kay\", \"human\", \"siya\", \"makalahutay\", \"sa\", \"pagsulay,\", \"siya\", \"makadawat\", \"ug\", \"korona\", \"sa\", \"kinabuhi,\", \"nga\", \"gisaad\", \"niadtong\", \"nahigugma\", \"sa\", \"Dios.\"]\n        }, {\n            \"verse_number\": \"13\",\n            \"tokens\": [\"Walay\", \"usa\", \"nga\", \"moingon\", \"sa\", \"dihang\", \"siya\", \"tintalon,\", \"“Kini\", \"nga\", \"tintasyon\", \"gikan\", \"sa\", \"Dios,”\", \"tungod\", \"kay\", \"ang\", \"Dios\", \"dili\", \"matintal\", \"pinaagi\", \"sa\", \"daotan,\", \"ug\", \"ang\", \"Dios\", \"dili\", \"motintal\", \"ni\", \"bisan\", \"kinsa.\"]\n        }, {\n            \"verse_number\": \"14\",\n            \"tokens\": [\"Ang\", \"matag-usa\", \"nga\", \"tawo\", \"matintal\", \"pinaagi\", \"sa\", \"iyang\", \"daotang\", \"mga\", \"tinguha\", \"nga\", \"nagkabig\", \"ug\", \"nagguyod\", \"kaniya\", \"palayo.\"]\n        }, {\n            \"verse_number\": \"15\",\n            \"tokens\": [\"Unya\", \"human\", \"nga\", \"ang\", \"makasasala\", \"nga\", \"tinguha\", \"manamkon,\", \"ang\", \"sala\", \"matawo,\", \"ug\", \"pagkahuman\", \"nga\", \"ang\", \"sala\", \"dako\", \"na,\", \"kini\", \"mosangpot\", \"sa\", \"kamatayon.\"]\n        }, {\n            \"verse_number\": \"16\",\n            \"tokens\": [\"Ayaw\", \"kamo\", \"pagpalimbong,\", \"akong\", \"hinigugmang\", \"mga\", \"igsoon.\"]\n        }, {\n            \"verse_number\": \"17\",\n            \"tokens\": [\"Ang\", \"matag\", \"maayo\", \"nga\", \"gasa\", \"ug\", \"matag\", \"hingpit\", \"nga\", \"gasa\", \"kini\", \"gikan\", \"sa\", \"kahitas-an,\", \"nga\", \"moabot\", \"kanato\", \"gikan\", \"sa\", \"Amahan\", \"sa\", \"mga\", \"kahayag.\", \"Siya\", \"dili\", \"mausab\", \"sama\", \"sa\", \"gabalhinbalhin\", \"nga\", \"mga\", \"anino.\"]\n        }, {\n            \"verse_number\": \"18\",\n            \"tokens\": [\"Gipili\", \"sa\", \"Dios\", \"ang\", \"paghatag\", \"sa\", \"kinabuhi\", \"nganhi\", \"kanato\", \"pinaagi\", \"sa\", \"pulong\", \"sa\", \"kamatuoran,\", \"aron\", \"nga\", \"mahisama\", \"kita\", \"sa\", \"unang\", \"abot\", \"taliwala\", \"sa\", \"iyang\", \"mga\", \"binuhat.\"]\n        }, {\n            \"verse_number\": \"19\",\n            \"tokens\": [\"Kamo\", \"nasayod\", \"niini,\", \"akong\", \"hinigugma\", \"nga\", \"mga\", \"igsoon.\", \"Ang\", \"matag\", \"tawo\", \"kinahanglan\", \"nga\", \"maabtikon\", \"sa\", \"pagpamati,\", \"magmahinay\", \"sa\", \"pagsulti,\", \"ug\", \"magmahinay\", \"sa\", \"pagkasuko,\"]\n        }, {\n            \"verse_number\": \"20\",\n            \"tokens\": [\"kay\", \"ang\", \"pagkasuko\", \"sa\", \"usa\", \"ka\", \"tawo\", \"dili\", \"mosangpot\", \"sa\", \"pagkamatarong\", \"sa\", \"Dios.\"]\n        }, {\n            \"verse_number\": \"21\",\n            \"tokens\": [\"Busa\", \"biyai\", \"ang\", \"tanang\", \"mahugaw\", \"nga\", \"sala\", \"ug\", \"ang\", \"daotan\", \"nga\", \"anaa\", \"sa\", \"bisan\", \"asa,\", \"ug\", \"diha\", \"sa\", \"pagkamaubsanon\", \"madawat\", \"ang\", \"natanom\", \"nga\", \"pulong,\", \"nga\", \"makahimo\", \"sa\", \"pagluwas\", \"sa\", \"inyong\", \"mga\", \"kalag.\"]\n        }, {\n            \"verse_number\": \"22\",\n            \"tokens\": [\"Tumana\", \"ang\", \"pulong,\", \"ayaw\", \"lamang\", \"kini\", \"paminawa,\", \"aron\", \"dili\", \"malimbongan\", \"ang\", \"inyong\", \"kaugalingon.\"]\n        }, {\n            \"verse_number\": \"23\",\n            \"tokens\": [\"Kay\", \"kung\", \"ang\", \"usa\", \"makadungog\", \"sa\", \"pulong\", \"ug\", \"dili\", \"magbuhat\", \"niini,\", \"siya\", \"sama\", \"sa\", \"usa\", \"ka\", \"tawo\", \"nga\", \"misusi\", \"sa\", \"iyang\", \"naandan\", \"nga\", \"dagway\", \"sa\", \"samin.\"]\n        }, {\n            \"verse_number\": \"24\",\n            \"tokens\": [\"Siya\", \"misusi\", \"sa\", \"iyang\", \"dagway,\", \"ug\", \"siya\", \"milakaw\", \"ug\", \"sa\", \"wala\", \"madugay\", \"nalimtan\", \"na\", \"niya\", \"kung\", \"unsa\", \"ang\", \"iyang\", \"dagway.\"]\n        }, {\n            \"verse_number\": \"25\",\n            \"tokens\": [\"Apan\", \"ang\", \"tawo\", \"nga\", \"mitan-aw\", \"ug\", \"mabinantayon\", \"ngadto\", \"sa\", \"hingpit\", \"nga\", \"balaod,\", \"ang\", \"balaod\", \"sa\", \"kagawasan,\", \"ug\", \"padayon\", \"sa\", \"pagtuman\", \"niini,\", \"dili\", \"lamang\", \"usa\", \"ka\", \"tigpaminaw\", \"nga\", \"makalimot,\", \"kini\", \"nga\", \"tawo\", \"mahimong\", \"mapanalanginan\", \"samtang\", \"ginabuhat\", \"niya\", \"kini.\"]\n        }, {\n            \"verse_number\": \"26\",\n            \"tokens\": [\"Kung\", \"ang\", \"adunay\", \"usa\", \"kaninyo\", \"nga\", \"naghunahuna\", \"sa\", \"iyang\", \"kaugalingon\", \"nga\", \"relihiyoso,\", \"apan\", \"dili\", \"niya\", \"mapugngan\", \"ang\", \"iyang\", \"dila,\", \"iyang\", \"gilimbongan\", \"ang\", \"iyang\", \"kasingkasing\", \"ug\", \"ang\", \"iyang\", \"relihiyon\", \"walay\", \"pulos.\"]\n        }, {\n            \"verse_number\": \"27\",\n            \"tokens\": [\"Putli\", \"ug\", \"walay\", \"buling\", \"nga\", \"relihiyon\", \"atubangan\", \"sa\", \"atong\", \"Dios\", \"ug\", \"Amahan\", \"mao\", \"kini:\", \"ang\", \"pagtabang\", \"sa\", \"wala\", \"nay\", \"mga\", \"amahan\", \"ug\", \"sa\", \"mga\", \"balo\", \"sa\", \"ilang\", \"mga\", \"pag-antos,\", \"ug\", \"sa\", \"pagpanalipod\", \"sa\", \"ilang\", \"kaugalingon\", \"gikan\", \"sa\", \"dunot\", \"nga\", \"kalibotan.\"]\n        }],\n        \"eng\": [{\n            \"verse_number\": \"1\",\n            \"tokens\": [\"James,\", \"a\", \"servant\", \"of\", \"God\", \"and\", \"of\", \"the\", \"Lord\", \"Jesus\", \"Christ,\", \"To\", \"the\", \"twelve\", \"tribes\", \"of\", \"the\", \"Dispersion:\", \"Greetings.\"]\n        }, {\n            \"verse_number\": \"2\",\n            \"tokens\": [\"Consider\", \"it\", \"pure\", \"joy,\", \"my\", \"brothers,\", \"when\", \"you\", \"encounter\", \"trials\", \"of\", \"many\", \"kinds,\"]\n        }, {\n            \"verse_number\": \"3\",\n            \"tokens\": [\"because\", \"you\", \"know\", \"that\", \"the\", \"testing\", \"of\", \"your\", \"faith\", \"develops\", \"perseverance.\"]\n        }, {\n            \"verse_number\": \"4\",\n            \"tokens\": [\"Allow\", \"perseverance\", \"to\", \"finish\", \"its\", \"work,\", \"so\", \"that\", \"you\", \"may\", \"be\", \"mature\", \"and\", \"complete,\", \"not\", \"lacking\", \"anything.\"]\n        }, {\n            \"verse_number\": \"5\",\n            \"tokens\": [\"Now\", \"if\", \"any\", \"of\", \"you\", \"lacks\", \"wisdom,\", \"he\", \"should\", \"ask\", \"God,\", \"who\", \"gives\", \"generously\", \"to\", \"all\", \"without\", \"finding\", \"fault,\", \"and\", \"it\", \"will\", \"be\", \"given\", \"to\", \"him.\"]\n        }, {\n            \"verse_number\": \"6\",\n            \"tokens\": [\"But\", \"he\", \"must\", \"ask\", \"in\", \"faith,\", \"without\", \"doubting,\", \"because\", \"he\", \"who\", \"doubts\", \"is\", \"like\", \"a\", \"wave\", \"of\", \"the\", \"sea,\", \"blown\", \"and\", \"tossed\", \"by\", \"the\", \"wind.\"]\n        }, {\n            \"verse_number\": \"7\",\n            \"tokens\": [\"That\", \"man\", \"should\", \"not\", \"expect\", \"to\", \"receive\", \"anything\", \"from\", \"the\", \"Lord.\"]\n        }, {\n            \"verse_number\": \"8\",\n            \"tokens\": [\"He\", \"is\", \"a\", \"double-minded\", \"man,\", \"unstable\", \"in\", \"all\", \"his\", \"ways.\"]\n        }, {\n            \"verse_number\": \"9\",\n            \"tokens\": [\"The\", \"brother\", \"in\", \"humble\", \"circumstances\", \"should\", \"exult\", \"in\", \"his\", \"high\", \"position.\"]\n        }, {\n            \"verse_number\": \"10\",\n            \"tokens\": [\"But\", \"the\", \"one\", \"who\", \"is\", \"rich\", \"should\", \"exult\", \"in\", \"his\", \"low\", \"position,\", \"because\", \"he\", \"will\", \"pass\", \"away\", \"like\", \"a\", \"flower\", \"of\", \"the\", \"field.\"]\n        }, {\n            \"verse_number\": \"11\",\n            \"tokens\": [\"For\", \"the\", \"sun\", \"rises\", \"with\", \"scorching\", \"heat\", \"and\", \"withers\", \"the\", \"plant;\", \"its\", \"flower\", \"falls\", \"and\", \"its\", \"beauty\", \"is\", \"lost.\", \"So\", \"too,\", \"the\", \"rich\", \"man\", \"will\", \"fade\", \"away\", \"in\", \"the\", \"midst\", \"of\", \"his\", \"pursuits.\"]\n        }, {\n            \"verse_number\": \"12\",\n            \"tokens\": [\"Blessed\", \"is\", \"the\", \"man\", \"who\", \"perseveres\", \"under\", \"trial,\", \"because\", \"when\", \"he\", \"has\", \"stood\", \"the\", \"test,\", \"he\", \"will\", \"receive\", \"the\", \"crown\", \"of\", \"life\", \"that\", \"God\", \"has\", \"promised\", \"to\", \"those\", \"who\", \"love\", \"Him.\"]\n        }, {\n            \"verse_number\": \"13\",\n            \"tokens\": [\"When\", \"tempted,\", \"no\", \"one\", \"should\", \"say,\", \"“God\", \"is\", \"tempting\", \"me.”\", \"For\", \"God\", \"cannot\", \"be\", \"tempted\", \"by\", \"evil,\", \"nor\", \"does\", \"He\", \"tempt\", \"anyone.\"]\n        }, {\n            \"verse_number\": \"14\",\n            \"tokens\": [\"But\", \"each\", \"one\", \"is\", \"tempted\", \"when\", \"by\", \"his\", \"own\", \"evil\", \"desires\", \"he\", \"is\", \"lured\", \"away\", \"and\", \"enticed.\"]\n        }, {\n            \"verse_number\": \"15\",\n            \"tokens\": [\"Then\", \"after\", \"desire\", \"has\", \"conceived,\", \"it\", \"gives\", \"birth\", \"to\", \"sin;\", \"and\", \"sin,\", \"when\", \"it\", \"is\", \"full-grown,\", \"gives\", \"birth\", \"to\", \"death.\"]\n        }, {\n            \"verse_number\": \"16\",\n            \"tokens\": [\"Do\", \"not\", \"be\", \"deceived,\", \"my\", \"beloved\", \"brothers.\"]\n        }, {\n            \"verse_number\": \"17\",\n            \"tokens\": [\"Every\", \"good\", \"and\", \"perfect\", \"gift\", \"is\", \"from\", \"above,\", \"coming\", \"down\", \"from\", \"the\", \"Father\", \"of\", \"the\", \"heavenly\", \"lights,\", \"with\", \"whom\", \"there\", \"is\", \"no\", \"change\", \"or\", \"shifting\", \"shadow.\"]\n        }, {\n            \"verse_number\": \"18\",\n            \"tokens\": [\"He\", \"chose\", \"to\", \"give\", \"us\", \"birth\", \"through\", \"the\", \"word\", \"of\", \"truth,\", \"that\", \"we\", \"would\", \"be\", \"a\", \"kind\", \"of\", \"firstfruits\", \"of\", \"His\", \"creation.\"]\n        }, {\n            \"verse_number\": \"19\",\n            \"tokens\": [\"My\", \"beloved\", \"brothers,\", \"understand\", \"this:\", \"Everyone\", \"should\", \"be\", \"quick\", \"to\", \"listen,\", \"slow\", \"to\", \"speak,\", \"and\", \"slow\", \"to\", \"anger,\"]\n        }, {\n            \"verse_number\": \"20\",\n            \"tokens\": [\"for\", \"man’s\", \"anger\", \"does\", \"not\", \"bring\", \"about\", \"the\", \"righteousness\", \"that\", \"God\", \"desires.\"]\n        }, {\n            \"verse_number\": \"21\",\n            \"tokens\": [\"Therefore,\", \"get\", \"rid\", \"of\", \"all\", \"moral\", \"filth\", \"and\", \"every\", \"expression\", \"of\", \"evil,\", \"and\", \"humbly\", \"accept\", \"the\", \"word\", \"planted\", \"in\", \"you,\", \"which\", \"can\", \"save\", \"your\", \"souls.\"]\n        }, {\n            \"verse_number\": \"22\",\n            \"tokens\": [\"Be\", \"doers\", \"of\", \"the\", \"word,\", \"and\", \"not\", \"hearers\", \"only.\", \"Otherwise,\", \"you\", \"are\", \"deceiving\", \"yourselves.\"]\n        }, {\n            \"verse_number\": \"23\",\n            \"tokens\": [\"For\", \"anyone\", \"who\", \"hears\", \"the\", \"word\", \"but\", \"does\", \"not\", \"carry\", \"it\", \"out\", \"is\", \"like\", \"a\", \"man\", \"who\", \"looks\", \"at\", \"his\", \"face\", \"in\", \"a\", \"mirror,\"]\n        }, {\n            \"verse_number\": \"24\",\n            \"tokens\": [\"and\", \"after\", \"observing\", \"himself\", \"goes\", \"away\", \"and\", \"immediately\", \"forgets\", \"what\", \"he\", \"looks\", \"like.\"]\n        }, {\n            \"verse_number\": \"25\",\n            \"tokens\": [\"But\", \"the\", \"one\", \"who\", \"looks\", \"intently\", \"into\", \"the\", \"perfect\", \"law\", \"of\", \"freedom,\", \"and\", \"continues\", \"to\", \"do\", \"so—not\", \"being\", \"a\", \"forgetful\", \"hearer,\", \"but\", \"an\", \"effective\", \"doer—he\", \"will\", \"be\", \"blessed\", \"in\", \"what\", \"he\", \"does.\"]\n        }, {\n            \"verse_number\": \"26\",\n            \"tokens\": [\"If\", \"anyone\", \"considers\", \"himself\", \"religious\", \"and\", \"yet\", \"does\", \"not\", \"bridle\", \"his\", \"tongue,\", \"he\", \"deceives\", \"his\", \"heart\", \"and\", \"his\", \"religion\", \"is\", \"worthless.\"]\n        }, {\n            \"verse_number\": \"27\",\n            \"tokens\": [\"Pure\", \"and\", \"undefiled\", \"religion\", \"before\", \"our\", \"God\", \"and\", \"Father\", \"is\", \"this:\", \"to\", \"care\", \"for\", \"orphans\", \"and\", \"widows\", \"in\", \"their\", \"distress,\", \"and\", \"to\", \"keep\", \"oneself\", \"from\", \"being\", \"polluted\", \"by\", \"the\", \"world.\"]\n        }],\n        \"definitions\": {\n            \"si\": [\"personal marker\"],\n            \"santiago\": [],\n            \"usa\": [\"one\", \"deer\", \"before\"],\n            \"ka\": [\"quantifier\", \"you\"],\n            \"sulugoon\": [\"servant\", \"errand\", \"mandate\", \"command\", \"order\", \"prescribe\"],\n            \"sa\": [\"at\", \"by\", \"for\", \"from\", \"in\", \"into\", \"of\", \"on\", \"through\", \"to\", \"fault\", \"guilt\", \"sin\", \"offence\", \"living room\", \"offense\", \"salon\", \"strain\", \"filter\"],\n            \"dios\": [\"god\"],\n            \"ug\": [\"a\", \"an\", \"and\"],\n            \"kang\": [\"whom\", \"four mahjong tiles of the same kind\"],\n            \"ginoong\": [\"deity\", \"lord\"],\n            \"jesu-cristo\": [\"jesus christ\"],\n            \"ngadto\": [\"forward\", \"there[motion/far]\", \"onto\", \"to\", \"unto\"],\n            \"mga\": [\"among\", \"many\", \"about\"],\n            \"tribo\": [\"tribe\"],\n            \"nga\": [\"grammatical ligature\"],\n            \"nagkatibulaag\": [\"scattered\", \"separated\"],\n            \"pangamusta\": [\"howdy\", \"hello\", \"hi\", \"how are you\"],\n            \"isipa\": [\"as\", \"consider\", \"mind\"],\n            \"kining\": [\"this [nominative/near you and me]\", \"this\"],\n            \"tanan\": [\"all\", \"everybody\", \"everyone\", \"everything\"],\n            \"kalipay\": [\"cheer\", \"croton\", \"glee\", \"happiness\", \"mirth\", \"pleasure\", \"glad\", \"happy\"],\n            \"akong\": [\"I\", \"mine\"],\n            \"igsoon\": [\"brother\", \"sibling\", \"sister\", \"fill up\", \"imitate\"],\n            \"dihang\": [\"there [near]\", \"upon\"],\n            \"kamo\": [\"touch food with bare hands\", \"you\", \"you-all\"],\n            \"makasinati\": [\"acquainted\", \"long-familiar\"],\n            \"daghang\": [\"many\", \"numerous\", \"several\", \"substantial\", \"voluminous\", \"much\", \"plenty\"],\n            \"kasamok\": [\"annoyance\", \"conflict\", \"disorder\", \"frenzy\", \"mess(n.) mischief\", \"muddle\", \"trouble\", \"turbulence\", \"turmoil\", \"uproar\", \"vexation\", \"agitate\", \"annoy\", \"bother\", \"distract\", \"harass\", \"perturb\", \"pester\"],\n            \"nasayod\": [\"aware\", \"knowing\", \"betrothal ceremony\", \"know\", \"transpire\"],\n            \"ang\": [\"the\"],\n            \"pagsulay\": [\"attempt\", \"test\", \"trial\", \"undertaking\", \"try\", \"undertake\"],\n            \"inyong\": [\"your\"],\n            \"pagtuo\": [\"conviction\", \"creed\", \"faith\", \"notion\", \"religion\", \"supposition\", \"right\", \"really\", \"believe\", \"heed\"],\n            \"mosangpot\": [\"outcome\"],\n            \"paglahutay\": [\"endure\", \"endurance\", \"stamina\"],\n            \"tugoti\": [\"approve\", \"endorse\", \"accede\", \"allow\", \"grant\", \"let\", \"pay out\", \"permit\", \"sanction\", \"yield\"],\n            \"hingpit\": [\"complete\", \"full-fledged\", \"outright\", \"perfect\", \"thorough\"],\n            \"mabuhat\": [\"doable\", \"deed\", \"compose\", \"create\", \"make\", \"moil\", \"work\"],\n            \"aron\": [\"in order to\"],\n            \"mamahimong\": [\"feasible\", \"possible\", \"potential\", \"probable\", \"possibly\", \"can\", \"could\", \"enable\", \"achieve\", \"become\", \"do\", \"make\", \"produce\", \"render\", \"transact\"],\n            \"mahingpit\": [\"complete\", \"full-fledged\", \"outright\", \"perfect\", \"thorough\"],\n            \"hingkod\": [\"mature\"],\n            \"walay\": [\"left\", \"no\", \"without\", \"non\", \"none\"],\n            \"makulang\": [\"deficient\", \"devoid\", \"insufficient\", \"less\", \"meager\", \"scanty\", \"sketchy\"],\n            \"apan\": [\"but\", \"yet\", \"defect\", \"demerit\", \"fault\", \"flaw\", \"handicap\", \"liability\", \"obstacle\"],\n            \"kung\": [\"if\"],\n            \"adunay\": [\"available\", \"has\", \"have\"],\n            \"kaninyo\": [\"you\", \"your\"],\n            \"nanginahanglan\": [\"in need\", \"essential\", \"imperative\", \"mandatory\", \"necessary\", \"vital\", \"must\", \"need\", \"ought\", \"require\", \"should\", \"greedy\", \"needy\"],\n            \"kaalam\": [\"expertise\", \"know\"],\n            \"pangayo\": [\"ask\", \"beg\", \"request\", \"solicit\", \"fire\", \"flame\", \"= pangayo\"],\n            \"niini\": [\"this [possesive/near you and me]\", \"thus\", \"this\"],\n            \"gikan\": [\"from\", \"depart\", \"emanate\", \"leave\"],\n            \"mohatag\": [\"give\", \"provide\", \"tender\"],\n            \"madagayaon\": [\"plenteous\", \"abundant\"],\n            \"pagbadlong\": [\"rebuke\", \"reproof\", \"admonish\", \"reprove\"],\n            \"mangayo\": [\"ask\", \"solicit\", \"request\", \"beg\", \"fire\", \"flame\", \"= pangayo\"],\n            \"siya\": [\"he\", \"she\", \"set of three consecutive mahjong tiles\", \"chair\"],\n            \"uban\": [\"gray hair\", \"another\", \"other\", \"along\", \"companion\", \"mate\", \"with\", \"accompany\", \"join\"],\n            \"pagduhaduha\": [\"misgiving\", \"reluctance\", \"doubt\", \"both\", \"two\"],\n            \"kay\": [\"instead\", \"because\"],\n            \"nagduhaduha\": [\"doubted\", \"doubting\", \"reluctant\", \"doubt\", \"both\", \"two\"],\n            \"sama\": [\"like\", \"same\"],\n            \"balod\": [\"imperial pigeon\", \"wave\"],\n            \"dagat\": [\"sea\"],\n            \"dad-on\": [\"bring\", \"bear\", \"carry\", \"conduct\", \"transport\"],\n            \"pinaagi\": [\"through\", \"thru\", \"device\", \"manner\", \"method\", \"mode\", \"procedure\", \"process\", \"scheme\", \"mean\", \"course\", \"handwriting\", \"result\", \"track record\", \"wake\", \"pass\", \"trace\", \"undergo\"],\n            \"hangin\": [\"air\", \"draft\", \"wind\"],\n            \"dalahon\": [\"bear\", \"bring\", \"carry\", \"conduct\", \"transport\"],\n            \"bisan\": [\"albeit\", \"although\", \"despite\", \"even\", \"though\", \"yet\", \"nor\"],\n            \"asa\": [\"where\", \"hope\"],\n            \"tungod\": [\"directly beneath\", \"because\", \"due to\"],\n            \"tawo\": [\"character\", \"human\", \"individual\", \"man\", \"mortal\", \"person\"],\n            \"kinahanglan\": [\"essential\", \"imperative\", \"mandatory\", \"necessary\", \"vital\", \"must\", \"need\", \"ought\", \"require\", \"should\", \"greedy\", \"needy\"],\n            \"dili\": [\"nay\", \"no\", \"not\"],\n            \"maghunahuna\": [\"thinking\", \"mindful\", \"concept\", \"consideration\", \"imagination\", \"mind\", \"regard\", \"thought\", \"suppose\", \"think\"],\n            \"makadawat\": [\"accept\", \"gather palm toddy\", \"receive\"],\n            \"iyang\": [\"hers\", \"his\", \"its\"],\n            \"gihangyo\": [\"appealed\", \"bargained\", \"appeal\", \"bargain\", \"bargain down\", \"dicker\", \"haggle\", \"petition\", \"plea\", \"request\"],\n            \"ginoo\": [\"deity\", \"lord\"],\n            \"kanang\": [\"american lady\", \"it\", \"that\", \"that [nominative/near you]\"],\n            \"tawhana\": [\"person\", \"character\", \"human\", \"individual\", \"man\", \"mortal\"],\n            \"mabalhinbalhinon\": [\"migratory\", \"variable\", \"move back and forth\", \"displace\", \"move\", \"rearrange\", \"shift\", \"transfer\"],\n            \"niya\": [\"her\", \"hers\", \"him\", \"his\"],\n            \"pamaagi\": [\"means\", \"method\", \"process\", \"ways\", \"device\", \"manner\", \"mode\", \"procedure\", \"scheme\", \"mean\", \"course\", \"handwriting\", \"result\", \"track record\", \"wake\", \"pass\", \"trace\", \"undergo\"],\n            \"kabos\": [\"destitute\", \"poor\", \"pauper\", \"slum\"],\n            \"magmaya\": [\"rejoicing\", \"cheerful\", \"jubilant\", \"black-headed munia\", \"Lonchura atricapilla\"],\n            \"pagkahalangdon\": [\"eminence\", \"cachet\", \"distinguished\", \"eminent\", \"honourable\", \"majestic\", \"noble\", \"notable\", \"superb\", \"venerable\", \"look up\"],\n            \"samtang\": [\"meantime\", \"meanwhile\", \"whereas\", \"while\"],\n            \"dato\": [\"chieftain\", \"opulent\", \"rich\", \"wealthy\", \"well-to-do\"],\n            \"diha\": [\"there [near]\", \"upon\"],\n            \"pagpaubos\": [\"abasement\", \"downwards\", \"demote\", \"deteriorate\", \"downgrade\", \"lower\", \"reduce\", \"down\", \"humble\", \"ignoble\", \"low\", \"minor\", \"subordinate\", \"under\", \"below\", \"beneath\"],\n            \"molabay\": [\"elapse\", \"pass by\", \"throw\"],\n            \"lamang\": [\"mere\", \"just\", \"only\"],\n            \"bulak\": [\"blossom\", \"flower\"],\n            \"uma\": [\"farm\", \"field\"],\n            \"malaya\": [\"cast net\", \"dried\", \"shrivel\", \"wither\"],\n            \"adlaw\": [\"day\", \"sun\"],\n            \"mosubang\": [\"rise\"],\n            \"makasunog\": [\"caustic\", \"fire\", \"burn\"],\n            \"kainit\": [\"ardor\", \"ardour\", \"heat\", \"thermal\", \"warmth\", \"zeal\", \"hot\"],\n            \"makapauga\": [\"dessicate\", \"dehydrate\", \"dry\"],\n            \"tanom\": [\"crop\", \"plant\"],\n            \"mangatagak\": [\"fall\", \"join strands of abaca at the ends to make a long thread\"],\n            \"kaanyag\": [\"beauty\", \"charm\", \"beaut\"],\n            \"mamatay\": [\"pip out\", \"die\"],\n            \"samang\": [\"like\", \"same\"],\n            \"paagi\": [\"device\", \"manner\", \"method\", \"mode\", \"procedure\", \"process\", \"scheme\", \"mean\", \"course\", \"handwriting\", \"result\", \"track record\", \"wake\", \"pass\", \"trace\", \"undergo\"],\n            \"mangawala\": [\"absence\", \"left\", \"no\", \"without\", \"non\", \"none\"],\n            \"lang\": [\"just\", \"mediocre\", \"naturally\", \"only\"],\n            \"tunga-tunga\": [\"halfway\", \"median\", \"medium\", \"mid\", \"middle\", \"midway\", \"center\", \"half\", \"rise up\", \"emerge\"],\n            \"ilang\": [\"birthmark\", \"nevus\", \"their\", \"theirs\", \"acknowledge\", \"distuinguish\", \"recognise\", \"recognize\"],\n            \"buluhaton\": [\"chore\", \"deed\", \"compose\", \"create\", \"make\", \"moil\", \"work\"],\n            \"bulahan\": [\"bingo cage\", \"blessed\", \"fortunate\", \"Lansium domesticum\", \"bubble\", \"foam\", \"froth\", \"lather\", \"heave\", \"ball\", \"drawing\"],\n            \"molahutay\": [\"endurance\", \"stamina\"],\n            \"human\": [\"done\", \"after\", \"finish\"],\n            \"makalahutay\": [\"endurance\", \"stamina\"],\n            \"korona\": [\"crown\", \"wreath\"],\n            \"kinabuhi\": [\"ephemeral\", \"existence\", \"life\", \"alive\", \"animate\", \"live\", \"living\", \"survive\"],\n            \"gisaad\": [\"promised\", \"pledge\", \"promise\", \"vow\"],\n            \"niadtong\": [\"that [possesive/far]\", \"went\", \"go\", \"go to\"],\n            \"nahigugma\": [\"enamored\", \"fall in love\", \"affection\", \"love\"],\n            \"moingon\": [\"like\", \"such\", \"thus\", \"say\"],\n            \"tintalon\": [\"tempt\"],\n            \"kini\": [\"this [nominative/near you and me]\", \"this\"],\n            \"tintasyon\": [\"temptation\"],\n            \"matintal\": [\"tempt\"],\n            \"daotan\": [\"bad\", \"depraved\", \"harmful\", \"lousy\", \"mean\", \"nefarious\", \"pernicious\", \"vile\", \"emaciated\", \"gaunt\", \"sorcery\", \"damage\", \"go bad\", \"ravage\"],\n            \"motintal\": [\"tempt\"],\n            \"ni\": [\"by\", \"this\", \"nor\", \"of\"],\n            \"kinsa\": [\"who\", \"whoever\"],\n            \"matag-usa\": [\"each and everyone\", \"one\", \"deer\", \"before\"],\n            \"daotang\": [\"bad\", \"depraved\", \"harmful\", \"lousy\", \"mean\", \"nefarious\", \"pernicious\", \"vile\", \"emaciated\", \"gaunt\", \"sorcery\", \"damage\", \"go bad\", \"ravage\"],\n            \"tinguha\": [\"aim\", \"desire\", \"object\", \"zeal\", \"covet\", \"crave\", \"yearn\", \"miscarriage\", \"derive\", \"earn\", \"fetch\", \"gain\", \"garner\", \"get\", \"obtain\", \"take\"],\n            \"nagkabig\": [\"rake\", \"entice\", \"attract\"],\n            \"nagguyod\": [\"dragged\", \"white snapping shrimp\", \"drag\"],\n            \"kaniya\": [\"her\", \"hers\", \"him\", \"his\"],\n            \"palayo\": [\"walk away\", \"distant\", \"far\", \"remote\", \"yonder\"],\n            \"unya\": [\"then\", \"after\", \"afterward\", \"later\"],\n            \"makasasala\": [\"malefactor\", \"outlaw\", \"sinner\", \"living room\", \"salon\", \"fault\", \"guilt\", \"offence\", \"offense\", \"sin\", \"filter\", \"strain\"],\n            \"manamkon\": [\"will conceive\", \"conceive\"],\n            \"sala\": [\"living room\", \"salon\", \"fault\", \"guilt\", \"offence\", \"offense\", \"sin\", \"filter\", \"strain\"],\n            \"matawo\": [\"be born\", \"character\", \"human\", \"individual\", \"man\", \"mortal\", \"person\"],\n            \"pagkahuman\": [\"thereafter\", \"conclusion\", \"done\", \"after\", \"finish\"],\n            \"dako\": [\"big\", \"great\", \"large\"],\n            \"na\": [\"already\", \"although\", \"that\"],\n            \"kamatayon\": [\"death\", \"die\"],\n            \"ayaw\": [\"do not\", \"don't\", \"for a child to cry when a parent leaves\"],\n            \"pagpalimbong\": [\"cheat\", \"deceive\", \"defraud\", \"trick\", \"wangle\"],\n            \"hinigugmang\": [\"steady\", \"sweetheart\", \"sweetie\", \"fall in love\", \"affection\", \"love\"],\n            \"matag\": [\"every\", \"per\"],\n            \"maayo\": [\"fair\", \"good\", \"well\", \"asking for trouble\", \"fix\"],\n            \"gasa\": [\"gas mantle\", \"gauze\", \"gift\", \"gratuity\", \"present\", \"endow\"],\n            \"kahitas-an\": [\"heavens\", \"long\", \"tall\"],\n            \"moabot\": [\"output\", \"arrive\", \"reach\"],\n            \"kanato\": [\"ours\", \"us\", \"our\"],\n            \"amahan\": [\"father\", \"= amahan\"],\n            \"kahayag\": [\"light\", \"effulgence\", \"limelight\", \"sheen\", \"splendour\", \"bright\"],\n            \"mausab\": [\"flexible\", \"convert\", \"iterate\", \"modify\", \"recur\", \"repeat\"],\n            \"gabalhinbalhin\": [\"shifting\", \"displace\", \"move\", \"rearrange\", \"shift\", \"transfer\"],\n            \"anino\": [\"shadow\"],\n            \"gipili\": [\"chose\", \"selected\", \"preferred\", \"picked\", \"opted\", \"elected\", \"Canarium ovatum\", \"choose\", \"elect\", \"pick\", \"select\"],\n            \"paghatag\": [\"give\", \"provide\", \"tender\"],\n            \"nganhi\": [\"here[motion/near you and me]\"],\n            \"pulong\": [\"term\", \"text\", \"word\"],\n            \"kamatuoran\": [\"evidence\", \"proof\", \"truth\", \"verification\", \"true\", \"prove\", \"actually\", \"be serious\", \"stump\", \"know where\"],\n            \"mahisama\": [\"likened\", \"like\", \"same\"],\n            \"kita\": [\"we\", \"see\", \"proceeds\"],\n            \"unang\": [\"juice of the salted fish\", \"first\", \"prime\", \"go ahead\", \"initiate\", \"precede\", \"before\"],\n            \"abot\": [\"output\", \"arrive\", \"reach\"],\n            \"taliwala\": [\"midst\"],\n            \"binuhat\": [\"manufactured\", \"creature\", \"deed\", \"compose\", \"create\", \"make\", \"moil\", \"work\"],\n            \"hinigugma\": [\"steady\", \"sweetheart\", \"sweetie\", \"fall in love\", \"affection\", \"love\"],\n            \"maabtikon\": [\"dynamic\", \"zestful\", \"active\", \"agile\", \"cunning\", \"foxy\", \"nimble\", \"quick\"],\n            \"pagpamati\": [\"hearing\", \"heeding\", \"listening\", \"listen\", \"sense\", \"ugly\", \"feel\", \"hear\", \"percieve\"],\n            \"magmahinay\": [\"mild\", \"gently\", \"softly\", \"slow\", \"sluggish\"],\n            \"pagsulti\": [\"remark\", \"say\", \"speak\", \"talk\"],\n            \"pagkasuko\": [\"fury\", \"rage\", \"ire\", \"anger\", \"angry\", \"mad\"],\n            \"pagkamatarong\": [\"righteous\", \"upright\", \"just\", \"proper\", \"sane\", \"suited\", \"large tin can\"],\n            \"busa\": [\"consequently\", \"ergo\", \"hence\", \"therefore\"],\n            \"biyai\": [\"quit\", \"desert\", \"abandon\", \"junk\", \"underdog\", \"give up\", \"leave\", \"relinquish\", \"vacate\"],\n            \"tanang\": [\"all\", \"everybody\", \"everyone\", \"everything\"],\n            \"mahugaw\": [\"corrupt\", \"dingy\", \"dirty\", \"filthy\", \"foul\", \"impure\", \"insanitary\", \"nasty\", \"unclean\", \"unhealthy\", \"unsanitary\", \"vile\", \"sordid\", \"cesspool\", \"filth\", \"sewage\", \"waste\", \"pollute\"],\n            \"anaa\": [\"is there\", \"exist\", \"there [existential/near you]\", \"has\", \"have\"],\n            \"pagkamaubsanon\": [\"lower\", \"reduce\", \"down\", \"humble\", \"ignoble\", \"low\", \"minor\", \"subordinate\", \"under\", \"below\", \"beneath\"],\n            \"madawat\": [\"acceptable\", \"admissible\", \"eligible\", \"accept\", \"gather palm toddy\", \"receive\"],\n            \"natanom\": [\"planted\", \"crop\", \"plant\"],\n            \"makahimo\": [\"able\", \"capable\", \"competent\", \"achieve\", \"become\", \"do\", \"make\", \"produce\", \"render\", \"transact\"],\n            \"pagluwas\": [\"deliverance\", \"rescue\", \"salvage\", \"free\", \"safe\", \"save\"],\n            \"kalag\": [\"ghost\", \"soul\", \"specter\", \"spectre\", \"wraith\"],\n            \"tumana\": [\"old village site\", \"obey\", \"utmost\", \"comply\", \"conform\", \"fufill\"],\n            \"paminawa\": [\"listen\"],\n            \"malimbongan\": [\"cheater\", \"knave\", \"crook\", \"cheat\", \"deceive\", \"defraud\", \"trick\", \"wangle\"],\n            \"kaugalingon\": [\"oneself\", \"self\", \"itself\"],\n            \"makadungog\": [\"able to hear\", \"prestige\", \"reputation\", \"hear\"],\n            \"magbuhat\": [\"creating\", \"making\", \"laboring\", \"toiling\", \"deed\", \"compose\", \"create\", \"make\", \"moil\", \"work\"],\n            \"misusi\": [\"investigated\", \"examined\", \"inspected\", \"examine\", \"inspect\", \"investigate\"],\n            \"naandan\": [\"habitual\", \"normal\", \"traditional\", \"routine\", \"docile\", \"domesticated\", \"familiar\", \"tame\", \"used to\"],\n            \"dagway\": [\"apparently\", \"face\", \"facet\", \"semblance\"],\n            \"samin\": [\"mirror\"],\n            \"milakaw\": [\"leaved\", \"walked\", \"went\", \"walk\"],\n            \"wala\": [\"left\", \"no\", \"without\", \"non\", \"none\"],\n            \"madugay\": [\"tardy\", \"lengthy\"],\n            \"nalimtan\": [\"forgotten\", \"forget\"],\n            \"unsa\": [\"what\", \"ounce\"],\n            \"mitan-aw\": [\"looked\", \"scanned\", \"look\", \"watch\"],\n            \"mabinantayon\": [\"careful\", \"cautious\", \"discreet\", \"furtive\", \"vigilant\", \"escort\", \"sentinel\", \"sentry\", \"warden\", \"watch dog\", \"guard\", \"keep\"],\n            \"balaod\": [\"law\"],\n            \"kagawasan\": [\"freedom\", \"liberty\", \"outward\", \"exterior\", \"out\", \"outside\", \"get out\", \"go out\"],\n            \"padayon\": [\"carry on\", \"continue\", \"go ahead\", \"go on\", \"last\", \"maintain\", \"persist\", \"remain\", \"resume\", \"immediately\", \"instantly\", \"onward\", \"soon\", \"come\", \"enter\", \"get in\", \"push on\"],\n            \"pagtuman\": [\"follow\", \"fulfill\", \"utmost\", \"comply\", \"conform\", \"fufill\", \"obey\"],\n            \"tigpaminaw\": [\"audience\", \"listener\", \"listen\"],\n            \"makalimot\": [\"oblivion\", \"forget\"],\n            \"mahimong\": [\"feasible\", \"possible\", \"potential\", \"probable\", \"possibly\", \"can\", \"could\", \"achieve\", \"become\", \"do\", \"make\", \"produce\", \"render\", \"transact\"],\n            \"mapanalanginan\": [\"blessing\", \"pray\"],\n            \"ginabuhat\": [\"done\", \"created\", \"made\", \"toiled\", \"deed\", \"compose\", \"create\", \"make\", \"moil\", \"work\"],\n            \"naghunahuna\": [\"mindful\", \"thinking\", \"concept\", \"consideration\", \"imagination\", \"mind\", \"regard\", \"thought\", \"suppose\", \"think\"],\n            \"relihiyoso\": [\"religious\"],\n            \"mapugngan\": [\"preventable\", \"prevent\", \"repress\", \"clip\", \"abstain\", \"preclude\", \"restrain\", \"restrict\"],\n            \"dila\": [\"tongue\"],\n            \"gilimbongan\": [\"cheater\", \"knave\", \"crook\", \"cheat\", \"deceive\", \"defraud\", \"trick\", \"wangle\"],\n            \"kasingkasing\": [\"heart\"],\n            \"relihiyon\": [\"religion\"],\n            \"pulos\": [\"all\", \"function\", \"use\"],\n            \"putli\": [\"pure\", \"virgin\", \"sever\", \"amputate\", \"cut\"],\n            \"buling\": [\"black mark\", \"blemish\", \"bowling\", \"dirt\", \"stain\", \"stigma\", \"blot\", \"smudge\", \"spot\"],\n            \"atubangan\": [\"forefront\", \"frontage\", \"facade\", \"front\", \"face\"],\n            \"atong\": [\"be present\"],\n            \"mao\": [\"is\"],\n            \"pagtabang\": [\"assistance\", \"aid\", \"assist\", \"help\"],\n            \"nay\": [\"already\", \"mom\", \"mother\", \"although\", \"that\"],\n            \"balo\": [\"don't know\", \"garfish\", \"loop\", \"needlefish\", \"dowager\", \"widow\", \"widower\"],\n            \"pag-antos\": [\"affliction\", \"endurance\", \"patience\", \"sufferings\", \"bear\", \"endure\", \"put up\", \"suffer\", \"tolerate\", \"withstand\"],\n            \"pagpanalipod\": [\"defense\", \"protection\", \"defend\", \"protect\", \"shield\", \"block\", \"obstruct\"],\n            \"dunot\": [\"putrid\", \"rotten\"],\n            \"kalibotan\": [\"awareness\", \"earth\", \"world\", \"around\", \"go around\", \"orbit\"]\n        }\n    };\n}\n","./public/src/bible_engbsb_chapter.mjs":"import {bible_verses_parse} from \"./bible_verses_parse.mjs\";\nimport {list_join} from \"./list_join.mjs\";\nimport {list_map} from \"./list_map.mjs\";\nimport {bible_chapter_parsed} from \"./bible_chapter_parsed.mjs\";\nexport async function bible_engbsb_chapter(chapter_name) {\n    let parsed_bsb = await bible_chapter_parsed('engbsb_html', chapter_name);\n    let verses_bsb = parsed_bsb.querySelectorAll('.m,.pc');\n    let mapped6 = list_map(verses_bsb, v => v.rawText);\n    let joined = list_join(mapped6, '');\n    let eng = bible_verses_parse(joined);\n    return eng;\n}\n","./public/src/bible_engbsb_chapter_upload.mjs":"import {bible_engbsb_storage_path_file} from \"./bible_engbsb_storage_path_file.mjs\";\nimport {storage_upload_object} from \"./storage_upload_object.mjs\";\nimport {bible_engbsb_chapter} from \"./bible_engbsb_chapter.mjs\";\nexport async function bible_engbsb_chapter_upload(chapter_name) {\n    let data = await bible_engbsb_chapter(chapter_name);\n    let destination = bible_engbsb_storage_path_file(chapter_name);\n    await storage_upload_object(data, destination);\n}\n","./public/src/bible_engbsb_storage_path.mjs":"export function bible_engbsb_storage_path() {\n    return 'bible/engbsb/';\n}\n","./public/src/bible_engbsb_storage_path_file.mjs":"import {file_name_json} from \"./file_name_json.mjs\";\nimport {bible_engbsb_storage_path} from \"./bible_engbsb_storage_path.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nexport function bible_engbsb_storage_path_file(chapter_name) {\n    let file_name = file_name_json(chapter_name);\n    return string_combine(bible_engbsb_storage_path(), file_name);\n}\n","./public/src/bible_token_normalize.mjs":"import {string_case_lower} from \"./string_case_lower.mjs\";\nimport {string_replace_multiple} from \"./string_replace_multiple.mjs\";\nexport function bible_token_normalize(token) {\n    let mapped3 = string_case_lower(token);\n    let symbols = [',', '1', '2', '.', ';', '“', '”', ':'];\n    let mapped4 = string_replace_multiple(mapped3, symbols, '');\n    return mapped4;\n}\n","./public/src/bible_verses_parse.mjs":"import {equal} from \"./equal.mjs\";\nimport {string_empty_not_is} from \"./string_empty_not_is.mjs\";\nimport {number_is} from \"./number_is.mjs\";\nimport {integer_parse} from \"./integer_parse.mjs\";\nimport {list_last} from \"./list_last.mjs\";\nimport {each_pairs} from \"./each_pairs.mjs\";\nimport {string_split_space} from \"./string_split_space.mjs\";\nimport {list_map} from \"./list_map.mjs\";\nimport {string_split} from \"./string_split.mjs\";\nimport {list_index_last} from \"./list_index_last.mjs\";\nimport {assert} from \"./assert.mjs\";\nimport {list_adder} from \"./list_adder.mjs\";\nimport {list_take} from \"./list_take.mjs\";\nimport {list_filter} from \"./list_filter.mjs\";\nexport function bible_verses_parse(rawText) {\n    let split = string_split(rawText, '&#160;');\n    let mapped = list_map(split, s => {\n        let s2 = string_split_space(s);\n        return list_filter(s2, string_empty_not_is);\n    });\n    let last = list_last(mapped);\n    return list_adder(la => {\n        each_pairs(mapped, (previous, current) => {\n            let {verse_number} = verse_get(previous);\n            let {tokens} = verse_get(current);\n            if (equal(current, last)) {\n                tokens = current;\n            }\n            la({\n                verse_number,\n                tokens\n            });\n        });\n    });\n    function verse_get(verse_tokens) {\n        let verse_number = list_last(verse_tokens);\n        let parsed = integer_parse(verse_number);\n        assert(number_is, [parsed]);\n        let less_1 = list_index_last(verse_tokens);\n        let tokens = list_take(verse_tokens, less_1);\n        return {\n            verse_number,\n            tokens\n        };\n    }\n}\n","./public/src/call_multiple.mjs":"import {list_adder} from \"./list_adder.mjs\";\nimport {range} from \"./range.mjs\";\nexport function call_multiple(fn, times) {\n    return list_adder(la => {\n        for (let i of range(times)) {\n            la(fn());\n        }\n    });\n}\n","./public/src/ceb_definition.mjs":"import {string_combine_multiple} from './string_combine_multiple.mjs';\nimport {http_cache} from './http_cache.mjs';\nimport {html_parse} from './html_parse.mjs';\nimport {list_map} from './list_map.mjs';\nimport {object_property_get} from './object_property_get.mjs';\nimport {string_starts_with} from './string_starts_with.mjs';\nimport {string_trim} from './string_trim.mjs';\nimport {list_unique} from './list_unique.mjs';\nimport {list_filter} from './list_filter.mjs';\nexport async function ceb_definition(word) {\n    let url = string_combine_multiple(['https://www.binisaya.com/node/21?search=binisaya&word=', word, '&Search=Search']);\n    let html = await http_cache(url);\n    let parsed = html_parse(html);\n    let q = parsed.querySelectorAll('a[href]');\n    let filtered = list_filter(q, i => {\n        let href = i.getAttribute('href');\n        return string_starts_with(href, 'http://www.binisaya.com/english/');\n    });\n    let mapped = list_map(filtered, i => object_property_get(i, 'text'));\n    let mapped3 = list_map(mapped, i => string_trim(i));\n    let u = list_unique(mapped3);\n    return u;\n}\n","./public/src/ceb_learn.mjs":"import {html_style_centered} from \"./html_style_centered.mjs\";\nimport {html_button_width_full_text} from \"./html_button_width_full_text.mjs\";\nimport {html_document_body} from \"./html_document_body.mjs\";\nimport {ceb_translations} from \"./ceb_translations.mjs\";\nimport {list_map} from \"./list_map.mjs\";\nimport {object_properties} from \"./object_properties.mjs\";\nimport {object_property_get} from \"./object_property_get.mjs\";\nimport {string_length} from \"./string_length.mjs\";\nimport {list_sort} from \"./list_sort.mjs\";\nimport {html_element} from \"./html_element.mjs\";\nimport {list_get} from \"./list_get.mjs\";\nimport {html_inner_set} from \"./html_inner_set.mjs\";\nimport {html_style} from \"./html_style.mjs\";\nimport {html_style_width_full} from \"./html_style_width_full.mjs\";\nimport {html_on_click} from \"./html_on_click.mjs\";\nimport {html_value_set} from \"./html_value_set.mjs\";\nimport {html_on} from \"./html_on.mjs\";\nimport {html_value_get} from \"./html_value_get.mjs\";\nexport function ceb_learn() {\n    let root = html_document_body();\n    let button_font_size = '5vh';\n    let button1 = html_element(root, 'div');\n    html_style(button1, {\n        'font-size': button_font_size\n    });\n    html_style(button1, {\n        'font-weight': 'bold'\n    });\n    html_style_centered(button1);\n    html_style_width_full(button1);\n    let button2 = html_element(root, 'div');\n    html_style(button2, {\n        'font-size': button_font_size\n    });\n    html_style(button2, {\n        'font-weight': 'bold'\n    });\n    html_style_centered(button2);\n    html_style_width_full(button2);\n    const button_text = 'previous';\n    let button_previous = html_button_width_full_text(root, button_text);\n    html_style(button_previous, {\n        'font-size': button_font_size\n    });\n    let button_next = html_element(root, 'button');\n    html_style(button_next, {\n        'font-size': button_font_size\n    });\n    html_style_width_full(button_next);\n    html_inner_set(button_next, 'next');\n    let input = html_element(root, 'input');\n    html_style(input, {\n        'font-size': button_font_size\n    });\n    html_style_centered(input);\n    html_style_width_full(input);\n    let translations = ceb_translations();\n    let keys = object_properties(translations);\n    let mapped = list_map(keys, key => {\n        return {\n            key,\n            value: object_property_get(translations, key)\n        };\n    });\n    list_sort(mapped, item => string_length(item.key));\n    let index = 0;\n    refresh();\n    function refresh() {\n        html_value_set(input, index);\n        let item = list_get(mapped, index);\n        html_inner_set(button1, item.key);\n        html_inner_set(button2, item.value);\n    }\n    html_on_click(button_previous, () => {\n        index--;\n        refresh();\n    });\n    html_on_click(button_next, () => {\n        index++;\n        refresh();\n    });\n    html_on(input, 'change', () => {\n        index = parseInt(html_value_get(input), 10);\n        refresh();\n    });\n}\n","./public/src/ceb_translations_generate.mjs":"import {folder_read} from './folder_read.mjs';\nimport {file_read} from './file_read.mjs';\nimport {newline} from './newline.mjs';\nimport {string_split} from './string_split.mjs';\nimport {string_get} from './string_get.mjs';\nimport {function_new_generic} from './function_new_generic.mjs';\nimport {list_join} from './list_join.mjs';\nimport {object_property_get} from './object_property_get.mjs';\nimport {string_combine_multiple} from './string_combine_multiple.mjs';\nimport {list_adder} from './list_adder.mjs';\nimport {string_delimit} from './string_delimit.mjs';\nimport {js_code_return} from './js_code_return.mjs';\nexport async function ceb_translations_generate() {\n    let folder = `./translations/ceb/learnentry/letters/`;\n    let extension = `.txt`;\n    let words = {};\n    let files = await folder_read(folder, extension);\n    for (let file of files) {\n        let contents = await file_read(file);\n        let lines = string_split(contents, newline());\n        for (let line of lines) {\n            let split = string_split(line, '\\t');\n            let first = string_get(split, 0);\n            let second = string_get(split, 1);\n            words[first] = second;\n        }\n    }\n    let pairs = list_adder(la => {\n        for (let word in words) {\n            let value = object_property_get(words, word);\n            la(string_combine_multiple([string_delimit(word), ':', string_delimit(value)]));\n        }\n    });\n    let entries_string = list_join(pairs, ', ');\n    let body_string = js_code_return(`{ ${entries_string} }`);\n    await function_new_generic(`ceb_translations`, ``, body_string, false, [], false);\n}\n","./public/src/command_line.mjs":"import {exec} from \"child_process\";\nexport async function command_line(command) {\n    return await new Promise(resolve => {\n        exec(command, (error, stdout, stderr) => {\n            resolve({\n                error,\n                stdout,\n                stderr\n            });\n        });\n    });\n}\n","./public/src/command_line_git.mjs":"import {command_line} from \"./command_line.mjs\";\nexport async function command_line_git(args) {\n    await command_line(`git ${args}`);\n}\n","./public/src/divide.mjs":"export function divide(i, max) {\n    return i / max;\n}\n","./public/src/each_index.mjs":"export function each_index(list, lambda) {\n    let index = 0;\n    for (let element of list) {\n        lambda(element, index);\n        index++;\n    }\n}\n","./public/src/each_pairs.mjs":"import {add_1} from \"./add_1.mjs\";\nimport {list_get} from \"./list_get.mjs\";\nimport {list_index_last} from \"./list_index_last.mjs\";\nimport {range} from \"./range.mjs\";\nexport function each_pairs(list, lambda) {\n    let last_index = list_index_last(list);\n    for (let i of range(last_index)) {\n        let i_next = add_1(i);\n        let current = list_get(list, i);\n        let next = list_get(list, i_next);\n        lambda(current, next);\n    }\n}\n","./public/src/each_reverse.mjs":"import {list_index_first} from \"./list_index_first.mjs\";\nimport {list_get} from \"./list_get.mjs\";\nimport {list_index_last} from \"./list_index_last.mjs\";\nexport function each_reverse(list, lambda) {\n    let index_last = list_index_last(list);\n    for (let i = index_last; i >= list_index_first(); i--) {\n        let element = list_get(list, i);\n        lambda(element);\n    }\n}\n","./public/src/equal.mjs":"export function equal(a, b) {\n    return a === b;\n}\n","./public/src/equal_1.mjs":"import {equal} from \"./equal.mjs\";\nexport function equal_1(length) {\n    return equal(length, 1);\n}\n","./public/src/equal_by.mjs":"import {equal} from \"./equal.mjs\";\nexport function equal_by(a, b, mapper) {\n    return equal(mapper(a), mapper(b));\n}\n","./public/src/equal_json.mjs":"import {equal_by} from \"./equal_by.mjs\";\nimport {json_to} from \"./json_to.mjs\";\nexport function equal_json(a, b) {\n    return equal_by(a, b, json_to);\n}\n","./public/src/equal_not.mjs":"export function equal_not(value, value2) {\n    return value !== value2;\n}\n","./public/src/error.mjs":"export function error(message) {\n    throw new Error(message);\n}\n","./public/src/file_copy.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nimport {file_open} from './file_open.mjs';\r\nimport {assert_not_async} from './assert_not_async.mjs';\r\nimport {file_exists} from './file_exists.mjs';\r\nexport async function file_copy(file_name_from, file_name_to) {\r\n    await assert_not_async(file_exists, [file_name_to]);\r\n    await fs.promises.copyFile(file_name_from, file_name_to);\r\n    await file_open(file_name_to);\r\n}\r\n","./public/src/file_delete.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nexport async function file_delete(file_name) {\r\n    return await fs.promises.rm(file_name);\r\n}\r\n","./public/src/file_empty.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nexport async function file_empty(file_new_name) {\r\n    await fs.promises.writeFile(file_new_name, '');\r\n}\r\n","./public/src/file_exists.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nexport function file_exists(file_name) {\r\n    return new Promise((resolve, reject) => {\r\n        fs.stat(file_name, function (err, stat) {\r\n            if (err == null) {\r\n                resolve(true);\r\n            } else if (err.code === 'ENOENT') {\r\n                resolve(false);\r\n            } else {\r\n                reject(err);\r\n            }\r\n        });\r\n    });\r\n}\r\n","./public/src/file_js_identifier_rename.mjs":"import {js_identifier_rename} from \"./js_identifier_rename.mjs\";\nimport {file_js_transform} from \"./file_js_transform.mjs\";\nexport async function file_js_identifier_rename(file_path, identifier_from, identifier_to) {\n    let lambda = js_identifier_rename;\n    await file_js_transform(lambda, file_path, [identifier_from, identifier_to]);\n}\n","./public/src/file_js_parse.mjs":"import {file_read} from './file_read.mjs';\nimport {js_parse} from './js_parse.mjs';\nexport async function file_js_parse(file_name) {\n    let code = await file_read(file_name);\n    let parsed = js_parse(code);\n    return parsed;\n}\n","./public/src/file_js_transform.mjs":"import {file_js_parse} from \"./file_js_parse.mjs\";\nimport {file_js_unparse} from \"./file_js_unparse.mjs\";\nexport async function file_js_transform(lambda, file_path, args) {\n    let ast = await file_js_parse(file_path);\n    let result = await lambda(ast, ...args);\n    await file_js_unparse(file_path, ast);\n    return result;\n}\n","./public/src/file_js_unparse.mjs":"import {file_overwrite} from './file_overwrite.mjs';\nimport {js_unparse} from './js_unparse.mjs';\nexport async function file_js_unparse(file_name, ast) {\n    let code = js_unparse(ast);\n    await file_overwrite(file_name, code);\n}\n","./public/src/file_line_append.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nimport {newline} from './newline.mjs';\r\nexport async function file_line_append(file_new_name, line) {\r\n    await fs.promises.appendFile(file_new_name, [newline(), line].join(''));\r\n}\r\n","./public/src/file_line_prepend.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nimport {newline} from './newline.mjs';\r\nexport async function file_line_prepend(file_new_name, line) {\r\n    await fs.promises.appendFile(file_new_name, [line, newline()].join(''));\r\n}\r\n","./public/src/file_name_json.mjs":"import {string_combine} from \"./string_combine.mjs\";\nexport function file_name_json(key_encoded) {\n    return string_combine(key_encoded, '.json');\n}\n","./public/src/file_new.mjs":"import {assert_not_async} from \"./assert_not_async.mjs\";\r\nimport {file_exists} from \"./file_exists.mjs\";\r\nimport {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nexport async function file_new(file_new_name, contents) {\r\n    await assert_not_async(file_exists, [file_new_name]);\r\n    await fs.promises.writeFile(file_new_name, contents);\r\n}\r\n","./public/src/file_open.mjs":"import {command_line} from './command_line.mjs';\nexport async function file_open(file_name) {\n    await command_line(`code ${file_name}`);\n}\n","./public/src/file_overwrite.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nexport async function file_overwrite(file_name, data) {\r\n    return await fs.promises.writeFile(file_name, data, 'utf-8');\r\n}\r\n","./public/src/file_read.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nexport async function file_read(file_name) {\r\n    return await fs.promises.readFile(file_name, 'utf-8');\r\n}\r\n","./public/src/file_read_json.mjs":"import {json_from} from \"./json_from.mjs\";\nimport {file_read} from \"./file_read.mjs\";\nexport async function file_read_json(file_path) {\n    let json = await file_read(file_path);\n    let object = json_from(json);\n    return object;\n}\n","./public/src/file_rename.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nexport async function file_rename(file_name_from, file_name_to) {\r\n    await fs.promises.rename(file_name_from, file_name_to);\r\n}\r\n","./public/src/file_write.mjs":"import {assert_not_async} from './assert_not_async.mjs';\nimport {file_exists} from './file_exists.mjs';\nimport {file_overwrite} from './file_overwrite.mjs';\nexport async function file_write(file_name, data) {\n    await assert_not_async(file_exists, file_name);\n    return await file_overwrite(file_name, data);\n}\n","./public/src/file_write_json.mjs":"import {file_write} from \"./file_write.mjs\";\nimport {json_to} from \"./json_to.mjs\";\nexport async function file_write_json(file_path, object) {\n    let json = json_to(object);\n    await file_write(file_path, json);\n}\n","./public/src/floor.mjs":"export function floor(n) {\n    return Math.floor(n);\n}\n","./public/src/folder_current.mjs":"export function folder_current() {\n    return `.`;\n}\n","./public/src/folder_gitignore.mjs":"import {path_join} from './path_join.mjs';\nexport function folder_gitignore() {\n    return path_join(['.', 'gitignore']);\n}\n","./public/src/folder_name_public.mjs":"export function folder_name_public() {\n    return 'public';\n}\n","./public/src/folder_name_src.mjs":"export function folder_name_src() {\n    return 'src';\n}\n","./public/src/folder_new.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nexport async function folder_new(folder_new_name) {\r\n    await fs.promises.mkdir(folder_new_name);\r\n}\r\n","./public/src/folder_path_src.mjs":"import {folder_name_src} from \"./folder_name_src.mjs\";\nimport {folder_name_public} from \"./folder_name_public.mjs\";\nexport function folder_path_src() {\n    let a = `${folder_name_public()}/${folder_name_src()}/`;\n    return a;\n}\n","./public/src/folder_read.mjs":"import {import_node} from './import_node.mjs';\nlet g = await import_node('glob');\nexport async function folder_read(folder, file_extension) {\n    let {glob} = g;\n    let files = await glob(`${folder}**/*${file_extension}`);\n    return files;\n}\n","./public/src/functions_source.mjs":"import {list_first} from \"./list_first.mjs\";\nimport {file_read} from \"./file_read.mjs\";\nimport {function_name_to_path} from \"./function_name_to_path.mjs\";\nimport {promise_all} from \"./promise_all.mjs\";\nimport {function_names} from \"./function_names.mjs\";\nimport {list_map} from \"./list_map.mjs\";\nimport {object_property_set} from \"./object_property_set.mjs\";\nexport async function functions_source() {\n    let names = await function_names();\n    let mapped = list_map(names, async n => {\n        let file_path = function_name_to_path(n);\n        return {\n            file_path,\n            contents: await file_read(file_path)\n        };\n    });\n    await promise_all(mapped);\n    let result = {};\n    for (let fc of mapped) {\n        let {file_path, contents} = await fc;\n        object_property_set(result, file_path, contents);\n    }\n    return result;\n}\n","./public/src/function_cache.mjs":"import {file_name_json} from \"./file_name_json.mjs\";\nimport {file_write_json} from \"./file_write_json.mjs\";\nimport {file_read_json} from \"./file_read_json.mjs\";\nimport {json_to} from './json_to.mjs';\nimport {path_join} from './path_join.mjs';\nimport {folder_gitignore} from './folder_gitignore.mjs';\nimport {file_exists} from './file_exists.mjs';\nimport {string_encoded_to} from './string_encoded_to.mjs';\nimport {object_property_get} from './object_property_get.mjs';\nexport async function function_cache(fn, args) {\n    let function_name = fn.name;\n    let key = {\n        function_name,\n        args\n    };\n    let key_json = json_to(key);\n    let key_encoded = string_encoded_to(key_json);\n    let file_name = file_name_json(key_encoded);\n    let file_path = path_join([folder_gitignore(), 'cache', file_name]);\n    let result;\n    let json;\n    let object;\n    if (await file_exists(file_path)) {\n        object = await file_read_json(file_path);\n        result = object_property_get(object, 'result');\n        return result;\n    }\n    result = await fn(...args);\n    object = {\n        result\n    };\n    await file_write_json(file_path, object);\n    return result;\n}\n","./public/src/function_call_append.mjs":"import {js_call_append} from \"./js_call_append.mjs\";\nimport {function_transform_args_split} from \"./function_transform_args_split.mjs\";\nimport {assert} from \"./assert.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {list_get} from \"./list_get.mjs\";\nimport {list_length} from \"./list_length.mjs\";\nimport {string_split} from \"./string_split.mjs\";\nimport {string_split_comma} from \"./string_split_comma.mjs\";\nexport async function function_call_append(function_name, combined) {\n    let split = string_split(combined, ':');\n    let length = list_length(split);\n    assert(equal, [length, 3]);\n    let callee = list_get(split, 0);\n    let args_string = list_get(split, 1);\n    let result_name = list_get(split, 2);\n    let args;\n    if (equal(args_string, '')) {\n        args = [];\n    } else {\n        args = string_split_comma(args_string);\n    }\n    await function_transform_args_split(js_call_append.name, function_name, [{\n        function_name: callee,\n        args,\n        result_name\n    }]);\n}\n","./public/src/function_copy.mjs":"import {file_copy} from \"./file_copy.mjs\";\nimport {function_copy_generic} from \"./function_copy_generic.mjs\";\nexport async function function_copy(fn_name_from, fn_name_to) {\n    let lambda = file_copy;\n    function_copy_generic(lambda, fn_name_from, fn_name_to);\n}\n","./public/src/function_copy_generic.mjs":"import {function_name_to_path} from \"./function_name_to_path.mjs\";\nimport {file_js_identifier_rename} from \"./file_js_identifier_rename.mjs\";\nexport async function function_copy_generic(file_lambda, fn_name_from, fn_name_to) {\n    let fn_path_from = function_name_to_path(fn_name_from);\n    let fn_path_to = function_name_to_path(fn_name_to);\n    await file_lambda(fn_path_from, fn_path_to);\n    await file_js_identifier_rename(fn_path_to, fn_name_from, fn_name_to);\n}\n","./public/src/function_extension.mjs":"export function function_extension() {\n    let extension = 'mjs';\n    return extension;\n}\n","./public/src/function_import.mjs":"import {import_node} from './import_node.mjs';let path = await import_node('path');\nimport {function_extension} from './function_extension.mjs';\nexport async function function_import(function_name) {\n    let extension = function_extension();\n    let extension_marker = '.';\n    let folder_current = '.';\n    let first_with_extension = [function_name, extension_marker, extension].join('');\n    let function_path_second = path.join(folder_current, first_with_extension);\n    let function_path = './' + function_path_second;\n    let imported = await import(function_path);\n    let imported_function = imported[function_name];\n    return imported_function;\n}\n","./public/src/function_imports_add.mjs":"import {js_imports_add} from \"./js_imports_add.mjs\";\nimport {function_transform} from \"./function_transform.mjs\";\nexport async function function_imports_add(function_name) {\n    await function_transform(js_imports_add.name, function_name);\n}\n","./public/src/function_import_add.mjs":"import {function_name_to_path} from \"./function_name_to_path.mjs\";\nimport {file_line_prepend} from \"./file_line_prepend.mjs\";\nimport {js_code_import} from \"./js_code_import.mjs\";\nexport async function function_import_add(function_name, import_name) {\n    let function_path = function_name_to_path(function_name);\n    let import_code = js_code_import(import_name);\n    await file_line_prepend(function_path, import_code);\n}\n","./public/src/function_names.mjs":"import {list_reverse} from \"./list_reverse.mjs\";\nimport {folder_path_src} from \"./folder_path_src.mjs\";\nimport {list_map} from './list_map.mjs';\nimport {string_prefix_without} from './string_prefix_without.mjs';\nimport {string_suffix_without} from './string_suffix_without.mjs';\nimport {string_replace} from './string_replace.mjs';\nimport {folder_read} from './folder_read.mjs';\nexport async function function_names() {\n    let prefix = folder_path_src();\n    let suffix = '.mjs';\n    let files = await folder_read(prefix, suffix);\n    let mapped = list_map(files, file_path => {\n        let replaced = string_replace(file_path, '\\\\', '/');\n        let mapped2 = string_prefix_without(replaced, prefix);\n        let mapped3 = string_suffix_without(mapped2, suffix);\n        return mapped3;\n    });\n    list_reverse(mapped);\n    return mapped;\n}\n","./public/src/function_name_to_parts.mjs":"import {string_split_underscore} from './string_split_underscore.mjs';\nexport function function_name_to_parts(function_name) {\n    return string_split_underscore(function_name);\n}\n","./public/src/function_name_to_path.mjs":"import {function_path_suffix} from \"./function_path_suffix.mjs\";\nimport {function_path_prefix} from \"./function_path_prefix.mjs\";\nimport {string_combine_multiple} from './string_combine_multiple.mjs';\nexport function function_name_to_path(function_name) {\n    return string_combine_multiple([function_path_prefix(), function_name, function_path_suffix()]);\n}\n","./public/src/function_new.mjs":"import {function_new_generic} from \"./function_new_generic.mjs\";\nexport async function function_new(function_name) {\n    await function_new_generic(function_name, '', '', true, [], false);\n}\n","./public/src/function_new_args.mjs":"import {function_new_generic} from \"./function_new_generic.mjs\";\nimport {list_join} from \"./list_join.mjs\";\nimport {string_split_comma} from \"./string_split_comma.mjs\";\nexport async function function_new_args(function_name, args) {\n    let args_split = string_split_comma(args);\n    let args_joined = list_join(args_split, ', ');\n    await function_new_generic(function_name, args_joined, '', true, [], false);\n}\n","./public/src/function_new_generic.mjs":"import {file_new} from './file_new.mjs';\nimport {file_open} from './file_open.mjs';\nimport {function_name_to_path} from './function_name_to_path.mjs';\nimport {list_map} from './list_map.mjs';\nimport {js_code_import} from './js_code_import.mjs';\nimport {list_concat} from './list_concat.mjs';\nimport {list_join} from './list_join.mjs';\nimport {newline} from './newline.mjs';\nimport {js_parse} from './js_parse.mjs';\nimport {js_unparse} from './js_unparse.mjs';\nexport async function function_new_generic(function_name, args_string, body_string, open, imports, async_is) {\n    let space = async_is ? ` async ` : ' ';\n    let contents_function = `export${space}function ${function_name}(${args_string}) {\n${body_string}\n}`;\n    let mapped = list_map(imports, js_code_import);\n    let concat = list_concat(mapped, [contents_function]);\n    let contents = list_join(concat, newline());\n    let parsed = js_parse(contents);\n    let unparsed = js_unparse(parsed);\n    let file_path = function_name_to_path(function_name);\n    await file_new(file_path, unparsed);\n    if (open) {\n        await file_open(file_path);\n    }\n}\n","./public/src/function_open.mjs":"import {file_open} from \"./file_open.mjs\";\nimport {function_name_to_path} from \"./function_name_to_path.mjs\";\nexport async function function_open(function_name) {\n    const file_path = function_name_to_path(function_name);\n    await file_open(file_path);\n}\n","./public/src/function_path_prefix.mjs":"import {folder_path_src} from \"./folder_path_src.mjs\";\nexport function function_path_prefix() {\n    return `./${folder_path_src()}`;\n}\n","./public/src/function_path_suffix.mjs":"import {function_extension} from \"./function_extension.mjs\";\nexport function function_path_suffix() {\n    return `.${function_extension()}`;\n}\n","./public/src/function_path_to_name.mjs":"import { function_path_prefix } from \"./function_path_prefix.mjs\";\nimport { function_path_suffix } from \"./function_path_suffix.mjs\";\nimport { string_prefix_without } from \"./string_prefix_without.mjs\";\nimport { string_suffix_without } from \"./string_suffix_without.mjs\";\n\nexport function function_path_to_name(function_path) {\n    function_path = string_prefix_without(function_path, function_path_prefix())\n    function_path = string_suffix_without(function_path, function_path_suffix())\n    return function_path;\n}\n","./public/src/function_read.mjs":"import {file_read} from \"./file_read.mjs\";\nimport {function_name_to_path} from \"./function_name_to_path.mjs\";\nexport async function function_read(function_name) {\n    let function_path = function_name_to_path(function_name);\n    return await file_read(function_path);\n}\n","./public/src/function_rename.mjs":"import {file_rename} from \"./file_rename.mjs\";\nimport {function_copy_generic} from \"./function_copy_generic.mjs\";\nexport async function function_rename(fn_name_from, fn_name_to) {\n    let lambda = file_rename;\n    function_copy_generic(lambda, fn_name_from, fn_name_to);\n}\n","./public/src/function_run.mjs":"import {server_port} from \"./server_port.mjs\";\nimport {http_post} from \"./http_post.mjs\";\nimport {function_import} from './function_import.mjs';\nexport async function function_run(function_name, args) {\n    let result;\n    if (typeof document === 'undefined') {\n        let imported_function = await function_import(function_name);\n        result = await imported_function(...args);\n    } else {\n        result = await http_post(`http://localhost:${server_port()}/`, {\n            function_name,\n            args\n        });\n    }\n    return result;\n}\n","./public/src/function_run_json.mjs":"import {file_overwrite} from \"./file_overwrite.mjs\";\nimport {function_run} from \"./function_run.mjs\";\nimport {json_from} from \"./json_from.mjs\";\nimport {json_to} from \"./json_to.mjs\";\nimport { string_prefix_without } from \"./string_prefix_without.mjs\";\nimport { string_suffix_without } from \"./string_suffix_without.mjs\";\nexport async function function_run_json(function_name, args_json_string, output_file_path) {\n    args_json_string = string_prefix_without(args_json_string, '\\'')\n    args_json_string = string_suffix_without(args_json_string, '\\'')\n    await file_overwrite('log.txt', args_json_string);\n    let {args} = json_from(args_json_string);\n    let result = await function_run(function_name, args);\n    let json = json_to(result);\n    await file_overwrite(output_file_path, json)\n}\n","./public/src/function_search.mjs":"import {string_split_comma} from './string_split_comma.mjs';\nimport {function_names} from './function_names.mjs';\nimport {list_filter} from './list_filter.mjs';\nimport {function_search_terms_match} from './function_search_terms_match.mjs';\nexport async function function_search(query) {\n    let terms = string_split_comma(query);\n    let fn_names = await function_names();\n    let result = list_filter(fn_names, fn_name => {\n        return function_search_terms_match(fn_name, terms);\n    });\n    return result;\n}\n","./public/src/function_search_terms_match.mjs":"import {function_name_to_parts} from './function_name_to_parts.mjs';\nimport {list_includes_multiple} from './list_includes_multiple.mjs';\nexport function function_search_terms_match(function_name, terms) {\n    let fn_name_parts = function_name_to_parts(function_name);\n    return list_includes_multiple(fn_name_parts, terms);\n}\n","./public/src/function_tests_generate.mjs":"import {function_run} from \"./function_run.mjs\";\nimport {range} from \"./range.mjs\";\nimport {add_1} from \"./add_1.mjs\";\nimport {list_random_item} from \"./list_random_item.mjs\";\nimport {json_to} from \"./json_to.mjs\";\nimport {object_property_exists} from \"./object_property_exists.mjs\";\nimport {tests_generate_single} from \"./tests_generate_single.mjs\";\nimport {object_property_set} from \"./object_property_set.mjs\";\nexport async function function_tests_generate(function_name, args_values_get) {\n    let args_values = await function_run(args_values_get, []);\n    let existing = {};\n    let max = 10;\n    for (let test_index of range(max)) {\n        let test_number = add_1(test_index);\n        let attempts = 100;\n        for (let attempt of range(attempts)) {\n            let args = list_random_item(args_values);\n            let args_json = json_to(args);\n            if (!object_property_exists(existing, args_json)) {\n                object_property_set(existing, args_json, true);\n                await tests_generate_single(function_name, args, test_number);\n                break;\n            }\n        }\n    }\n}\n","./public/src/function_transform.mjs":"import {function_transform_args} from \"./function_transform_args.mjs\";\nimport {list_length} from \"./list_length.mjs\";\nimport {assert} from \"./assert.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport async function function_transform(lambda_name, function_name) {\n    let args = arguments;\n    let length = list_length(args);\n    assert(equal, [length, 2]);\n    return function_transform_args(lambda_name, function_name, 'a');\n}\n","./public/src/function_transform_all.mjs":"import {function_names} from \"./function_names.mjs\";\nimport {function_transform_args} from \"./function_transform_args.mjs\";\nexport async function function_transform_all(lambda_name, args) {\n    let function_names_result = await function_names();\n    for (let function_name of function_names_result) {\n        await function_transform_args(lambda_name, function_name, args);\n    }\n}\n","./public/src/function_transform_args.mjs":"import {function_transform_args_split} from \"./function_transform_args_split.mjs\";\nimport {string_split_comma} from \"./string_split_comma.mjs\";\nexport async function function_transform_args(lambda_name, function_name, args) {\n    let args_split = string_split_comma(args);\n    return await function_transform_args_split(lambda_name, function_name, args_split);\n}\n","./public/src/function_transform_args_split.mjs":"import {file_js_transform} from \"./file_js_transform.mjs\";\nimport {function_name_to_path} from \"./function_name_to_path.mjs\";\nimport {function_import} from \"./function_import.mjs\";\nexport async function function_transform_args_split(lambda_name, function_name, args) {\n    let lambda = await function_import(lambda_name);\n    let file_path = function_name_to_path(function_name);\n    return await file_js_transform(lambda, file_path, args);\n}\n","./public/src/git_acp.mjs":"import {git_acp_message} from \"./git_acp_message.mjs\";\nexport async function git_acp() {\n    let commit_message = '';\n    await git_acp_message(commit_message);\n}\n","./public/src/git_acp_message.mjs":"import {git_ac_message} from \"./git_ac_message.mjs\";\nexport async function git_acp_message(commit_message) {\n    await git_ac_message(commit_message);\n    await git_push();\n}\n","./public/src/git_ac_message.mjs":"import {command_line_git} from \"./command_line_git.mjs\";\nexport async function git_ac_message(commit_message) {\n    let commands = ['add *', `commit -m \"${new Date().toISOString()}${commit_message}\"`];\n    for (let command of commands) {\n        await command_line_git(command);\n    }\n}\n","./public/src/git_push.mjs":"import {command_line_git} from \"./command_line_git.mjs\";\nexport async function git_push() {\n    await command_line_git('push');\n}\n","./public/src/greater_than.mjs":"export function greater_than(a, b) {\n    return a > b;\n}\n","./public/src/greater_than_equal.mjs":"export function greater_than_equal(a, b) {\n    return a >= b;\n}\n","./public/src/html_button.mjs":"import {html_style_button_default} from \"./html_style_button_default.mjs\";\nimport {html_style} from \"./html_style.mjs\";\nimport {html_element} from \"./html_element.mjs\";\nexport function html_button(root) {\n    let result = html_element(root, 'button');\n    html_style(result, html_style_button_default());\n    return result;\n}\n","./public/src/html_button_width_full.mjs":"import {html_style_width_full} from \"./html_style_width_full.mjs\";\nimport {html_button} from \"./html_button.mjs\";\nexport function html_button_width_full(root) {\n    let button_previous = html_button(root);\n    html_style_width_full(button_previous);\n    return button_previous;\n}\n","./public/src/html_button_width_full_text.mjs":"import {html_inner_set} from \"./html_inner_set.mjs\";\nimport {html_button_width_full} from \"./html_button_width_full.mjs\";\nexport function html_button_width_full_text(parent, button_text) {\n    let button_previous = html_button_width_full(parent);\n    html_inner_set(button_previous, button_text);\n    return button_previous;\n}\n","./public/src/html_button_width_full_text_click.mjs":"import {html_on_click} from \"./html_on_click.mjs\";\nimport {html_button_width_full_text} from \"./html_button_width_full_text.mjs\";\nexport function html_button_width_full_text_click(parent, text, on_click) {\n    let button_next = html_button_width_full_text(parent, text);\n    html_on_click(button_next, on_click);\n    return button_next;\n}\n","./public/src/html_clear.mjs":"import {html_inner_set} from \"./html_inner_set.mjs\";\nexport function html_clear(root) {\n    html_inner_set(root, '');\n}\n","./public/src/html_disable.mjs":"export function html_disable(button_previous) {\n    button_previous.element.disabled = true;\n}\n","./public/src/html_div.mjs":"import {html_element} from \"./html_element.mjs\";\nexport function html_div(root_component) {\n    return html_element(root_component, 'div');\n}\n","./public/src/html_document_body.mjs":"export function html_document_body() {\n    return {\n        element: document.body\n    };\n}\n","./public/src/html_element.mjs":"import {html_style_default} from \"./html_style_default.mjs\";\nimport {html_style} from \"./html_style.mjs\";\nexport function html_element(parent, tag_name) {\n    let {element} = parent;\n    let e = document.createElement(tag_name);\n    element.appendChild(e);\n    let result = {\n        element: e\n    };\n    html_style(result, html_style_default());\n    return result;\n}\n","./public/src/html_enable.mjs":"export function html_enable(button_previous) {\n    button_previous.element.disabled = false;\n}\n","./public/src/html_hash.mjs":"import {object_property_get} from \"./object_property_get.mjs\";\nimport {list_includes} from \"./list_includes.mjs\";\nimport {list_get} from \"./list_get.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {assert} from \"./assert.mjs\";\nimport {list_length} from \"./list_length.mjs\";\nimport {string_split} from \"./string_split.mjs\";\nimport {string_prefix_without} from \"./string_prefix_without.mjs\";\nimport {string_length} from \"./string_length.mjs\";\nimport {greater_than} from \"./greater_than.mjs\";\nimport {object_properties} from \"./object_properties.mjs\";\nexport function html_hash(actions) {\n    let action_properties = object_properties(actions);\n    let hash = window.location.hash;\n    if (greater_than(string_length(hash), 0)) {\n        let hash_no_tag = string_prefix_without(hash, '#');\n        let split = string_split(hash_no_tag, ',');\n        for (let s of split) {\n            let split2 = string_split(s, '=');\n            let s2_length = list_length(split2);\n            assert(equal, [s2_length, 2]);\n            let key = list_get(split2, 0);\n            let value = list_get(split2, 1);\n            if (list_includes(action_properties, key)) {\n                let action = object_property_get(actions, key);\n                action(value);\n            }\n        }\n    }\n}\n","./public/src/html_hr.mjs":"import {html_element} from \"./html_element.mjs\";\nexport function html_hr(parent) {\n    html_element(parent, 'hr');\n}\n","./public/src/html_img.mjs":"import {object_property_set} from \"./object_property_set.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nimport {html_element} from \"./html_element.mjs\";\nexport function html_img(parent, img_name) {\n    let i1 = html_element(parent, 'img');\n    let img_path = string_combine('./img/', img_name);\n    let {element} = i1;\n    object_property_set(element, 'src', img_path);\n    return i1;\n}\n","./public/src/html_img_limited_centered.mjs":"import {html_style} from \"./html_style.mjs\";\nimport {html_img} from \"./html_img.mjs\";\nimport {html_style_centered} from \"./html_style_centered.mjs\";\nimport {html_div} from \"./html_div.mjs\";\nexport function html_img_limited_centered(parent, img_src) {\n    let container = html_div(parent);\n    html_style_centered(container);\n    let i1 = html_img(container, img_src);\n    html_style(i1, {\n        'max-height': '50dvh',\n        'max-width': '100%'\n    });\n}\n","./public/src/html_img_width_full.mjs":"import {html_img} from \"./html_img.mjs\";\nimport {html_style} from \"./html_style.mjs\";\nexport function html_img_width_full(parent, img_name) {\n    let i1 = html_img(parent, img_name);\n    html_style(i1, {\n        'width': '100%'\n    });\n}\n","./public/src/html_inner_set.mjs":"export function html_inner_set(component, text) {\n    let {element} = component;\n    element.innerHTML = text;\n}\n","./public/src/html_li.mjs":"import {html_element} from \"./html_element.mjs\";\nexport function html_li(ol) {\n    return html_element(ol, 'li');\n}\n","./public/src/html_li_text.mjs":"import {html_li} from \"./html_li.mjs\";\nimport {html_inner_set} from \"./html_inner_set.mjs\";\nexport function html_li_text(ol, text) {\n    let li = html_li(ol);\n    html_inner_set(li, text);\n    return li;\n}\n","./public/src/html_li_text_monospace.mjs":"import {html_style_monospace} from \"./html_style_monospace.mjs\";\nimport {html_li_text} from \"./html_li_text.mjs\";\nexport function html_li_text_monospace(ol4, code) {\n    let li1 = html_li_text(ol4, code);\n    html_style_monospace(li1);\n}\n","./public/src/html_merge.mjs":"import {object_properties} from \"./object_properties.mjs\";\nimport {object_property_get} from \"./object_property_get.mjs\";\nexport function html_merge(component, to_merge) {\n    let {element} = component;\n    let ps = object_properties(to_merge);\n    for (let p of ps) {\n        let value = object_property_get(to_merge, p);\n        element.setAttribute(p, value);\n    }\n}\n","./public/src/html_ol.mjs":"import {html_element} from \"./html_element.mjs\";\nexport function html_ol(parent) {\n    return html_element(parent, 'ol');\n}\n","./public/src/html_on.mjs":"export function html_on(component, type, lambda) {\n    let {element} = component;\n    element.addEventListener(type, lambda);\n}\n","./public/src/html_on_click.mjs":"import {html_on} from './html_on.mjs';\nexport function html_on_click(component, lambda) {\n    html_on(component, \"click\", lambda);\n}\n","./public/src/html_p.mjs":"import {html_element} from \"./html_element.mjs\";\nexport function html_p(parent) {\n    return html_element(parent, 'p');\n}\n","./public/src/html_parse.mjs":"import {parse} from 'node-html-parser';\nexport function html_parse(input) {\n    return parse(input);\n}\n","./public/src/html_p_text.mjs":"import {html_p} from \"./html_p.mjs\";\nimport {html_inner_set} from \"./html_inner_set.mjs\";\nexport function html_p_text(parent, text) {\n    let p = html_p(parent);\n    html_inner_set(p, text);\n    return p;\n}\n","./public/src/html_scroll_center.mjs":"export function html_scroll_center(component) {\n    let {element} = component;\n    element.scrollIntoView({\n        behavior: 'auto',\n        block: 'center',\n        inline: 'center'\n    });\n}\n","./public/src/html_scroll_top.mjs":"export function html_scroll_top() {\n    window.scrollTo({\n        top: 0\n    });\n}\n","./public/src/html_spaced_tokens.mjs":"import {html_inner_set} from \"./html_inner_set.mjs\";\nimport {html_element} from \"./html_element.mjs\";\nexport function html_spaced_tokens(parent, tokens, each) {\n    for (let token of tokens) {\n        let spacer = html_element(parent, 'span');\n        html_inner_set(spacer, ' ');\n        let token_element = html_element(parent, 'span');\n        html_inner_set(token_element, token);\n        each(token_element, token);\n    }\n}\n","./public/src/html_spacer_vertical.mjs":"import {html_style} from \"./html_style.mjs\";\nimport {html_div} from \"./html_div.mjs\";\nexport function html_spacer_vertical(input_container) {\n    let spacer_vertical = html_div(input_container);\n    html_style(spacer_vertical, {\n        'height': '1vh'\n    });\n}\n","./public/src/html_span.mjs":"import {html_element} from \"./html_element.mjs\";\nexport function html_span(parent) {\n    return html_element(parent, 'span');\n}\n","./public/src/html_span_text.mjs":"import {html_span} from \"./html_span.mjs\";\nimport {html_inner_set} from \"./html_inner_set.mjs\";\nexport function html_span_text(parent, text) {\n    let a = html_span(parent);\n    html_inner_set(a, text);\n    return a;\n}\n","./public/src/html_strong.mjs":"import {html_element} from \"./html_element.mjs\";\nexport function html_strong(parent) {\n    return html_element(parent, 'strong');\n}\n","./public/src/html_strong_text.mjs":"import {html_strong} from \"./html_strong.mjs\";\nimport {html_inner_set} from \"./html_inner_set.mjs\";\nexport function html_strong_text(parent, text) {\n    let a = html_strong(parent);\n    html_inner_set(a, text);\n    return a;\n}\n","./public/src/html_style.mjs":"import {object_merge} from \"./object_merge.mjs\";\nexport function html_style(component, styles) {\n    let {element} = component;\n    object_merge(element.style, styles);\n}\n","./public/src/html_style_alternate.mjs":"import {list_get} from \"./list_get.mjs\";\nimport {mod} from \"./mod.mjs\";\nimport {html_span_text} from \"./html_span_text.mjs\";\nimport {each_index} from \"./each_index.mjs\";\nimport {list_length} from \"./list_length.mjs\";\nexport function html_style_alternate(parent, create, patterns, strings) {\n    let patterns_length = list_length(patterns);\n    let p1 = create(parent);\n    each_index(strings, (element, index) => {\n        let span = html_span_text(p1, element);\n        let pattern_index = mod(index, patterns_length);\n        let pattern = list_get(patterns, pattern_index);\n        pattern(span);\n    });\n}\n","./public/src/html_style_alternate_bold.mjs":"import {html_style_bold} from \"./html_style_bold.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nexport function html_style_alternate_bold(parent, list) {\n    html_style_alternate(parent, html_p, [noop, html_style_bold], list);\n}\n","./public/src/html_style_alternate_code_li.mjs":"import {app_learn_code_style_code_colored} from \"./app_learn_code_style_code_colored.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {html_li} from \"./html_li.mjs\";\nexport function html_style_alternate_code_li(parent, list) {\n    html_style_alternate(parent, html_li, [noop, app_learn_code_style_code_colored], list);\n}\n","./public/src/html_style_alternate_monospace.mjs":"import {app_learn_code_style_code_colored} from \"./app_learn_code_style_code_colored.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nexport function html_style_alternate_monospace(parent, list) {\n    html_style_alternate(parent, html_p, [noop, app_learn_code_style_code_colored], list);\n}\n","./public/src/html_style_background_color.mjs":"import {html_style} from \"./html_style.mjs\";\nexport function html_style_background_color(container, color) {\n    html_style(container, {\n        'background-color': color\n    });\n}\n","./public/src/html_style_bold.mjs":"import {html_style} from \"./html_style.mjs\";\nexport function html_style_bold(component) {\n    return html_style(component, {\n        'font-weight': 'bold'\n    });\n}\n","./public/src/html_style_button_default.mjs":"let d = {};\nexport function html_style_button_default() {\n    return d;\n}\n","./public/src/html_style_button_default_background_color.mjs":"export function html_style_button_default_background_color() {\n    return 'lightblue';\n}\n","./public/src/html_style_button_default_border.mjs":"import {html_style_button_default_border_color} from \"./html_style_button_default_border_color.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nexport function html_style_button_default_border() {\n    return {\n        'border': string_combine('solid 0.5vh ', html_style_button_default_border_color())\n    };\n}\n","./public/src/html_style_button_default_border_color.mjs":"export function html_style_button_default_border_color() {\n    return 'dodgerblue';\n}\n","./public/src/html_style_button_default_initialize.mjs":"import {html_style_button_default_background_color} from \"./html_style_button_default_background_color.mjs\";\nimport {html_style_button_default_border} from \"./html_style_button_default_border.mjs\";\nimport {app_learn_code_style_rounded_padded_style} from \"./app_learn_code_style_rounded_padded_style.mjs\";\nimport {html_style_button_default} from \"./html_style_button_default.mjs\";\nimport {object_merge} from \"./object_merge.mjs\";\nexport function html_style_button_default_initialize() {\n    object_merge(html_style_button_default(), app_learn_code_style_rounded_padded_style());\n    object_merge(html_style_button_default(), {\n        'margin': '0.5vh',\n        'background-color': html_style_button_default_background_color()\n    });\n    object_merge(html_style_button_default(), html_style_button_default_border());\n}\n","./public/src/html_style_centered.mjs":"import {html_style} from \"./html_style.mjs\";\nexport function html_style_centered(button1) {\n    html_style(button1, {\n        'text-align': 'center'\n    });\n}\n","./public/src/html_style_default.mjs":"let d = {};\nexport function html_style_default() {\n    return d;\n}\n","./public/src/html_style_default_font_size.mjs":"import {string_combine} from \"./string_combine.mjs\";\nimport {html_style_default} from \"./html_style_default.mjs\";\nimport {object_merge} from \"./object_merge.mjs\";\nexport function html_style_default_font_size(default_font_size) {\n    object_merge(html_style_default(), {\n        'font-size': string_combine(default_font_size.toString(), 'vh')\n    });\n}\n","./public/src/html_style_default_font_size_value.mjs":"export function html_style_default_font_size_value() {\n    return 3;\n}\n","./public/src/html_style_default_initialize.mjs":"import {html_document_body} from \"./html_document_body.mjs\";\nimport {html_style_button_default_initialize} from \"./html_style_button_default_initialize.mjs\";\nimport {html_style_default_font_size_value} from \"./html_style_default_font_size_value.mjs\";\nimport {html_style_default_font_size} from \"./html_style_default_font_size.mjs\";\nimport {html_style_sans_serif} from \"./html_style_sans_serif.mjs\";\nexport function html_style_default_initialize() {\n    let root = html_document_body();\n    html_style_sans_serif(root);\n    html_style_default_font_size(html_style_default_font_size_value());\n    html_style_button_default_initialize();\n}\n","./public/src/html_style_font_color.mjs":"import {html_style} from \"./html_style.mjs\";\nexport function html_style_font_color(component, color) {\n    html_style(component, {\n        color\n    });\n}\n","./public/src/html_style_hidden.mjs":"import {html_style} from \"./html_style.mjs\";\nexport function html_style_hidden(code) {\n    html_style(code, {\n        visibility: 'hidden'\n    });\n}\n","./public/src/html_style_margin_none.mjs":"import {html_style} from \"./html_style.mjs\";\nexport function html_style_margin_none(input_title) {\n    html_style(input_title, {\n        'margin': '0'\n    });\n}\n","./public/src/html_style_margin_y.mjs":"import {html_style} from \"./html_style.mjs\";\nexport function html_style_margin_y(component, y_margin) {\n    html_style(component, {\n        'margin-top': y_margin,\n        'margin-bottom': y_margin\n    });\n}\n","./public/src/html_style_monospace.mjs":"import {html_style} from \"./html_style.mjs\";\nexport function html_style_monospace(component) {\n    html_style(component, {\n        'font-family': 'monospace'\n    });\n}\n","./public/src/html_style_pre_wrap.mjs":"import {html_style} from \"./html_style.mjs\";\nexport function html_style_pre_wrap(code) {\n    html_style(code, {\n        'white-space': 'pre-wrap'\n    });\n}\n","./public/src/html_style_sans_serif.mjs":"import {html_style} from \"./html_style.mjs\";\nexport function html_style_sans_serif(root) {\n    html_style(root, {\n        'font-family': 'sans-serif'\n    });\n}\n","./public/src/html_style_units.mjs":"export function html_style_units(units) {\n    return 0.1 * units + 'rem';\n}\n","./public/src/html_style_visible.mjs":"import {html_style} from \"./html_style.mjs\";\nexport function html_style_visible(spacer2) {\n    html_style(spacer2, {\n        visibility: 'visible'\n    });\n}\n","./public/src/html_style_width_full.mjs":"import {html_style} from './html_style.mjs';\nexport function html_style_width_full(component) {\n    html_style(component, {\n        'width': '100%'\n    });\n}\n","./public/src/html_style_word_break_all.mjs":"import {html_style} from \"./html_style.mjs\";\nexport function html_style_word_break_all(code) {\n    html_style(code, {\n        'word-break': 'break-all'\n    });\n}\n","./public/src/html_ul.mjs":"import {html_element} from \"./html_element.mjs\";\nexport function html_ul(parent) {\n    return html_element(parent, 'ul');\n}\n","./public/src/html_value_get.mjs":"import {object_property_get} from \"./object_property_get.mjs\";\nexport function html_value_get(component) {\n    let {element} = component;\n    return object_property_get(element, 'value');\n}\n","./public/src/html_value_set.mjs":"import {object_property_set} from \"./object_property_set.mjs\";\nexport function html_value_set(component, value) {\n    let {element} = component;\n    object_property_set(element, 'value', value);\n}\n","./public/src/http.mjs":"import fetch from 'node-fetch';\nimport {sleep} from './sleep.mjs';\nimport {integer_random} from './integer_random.mjs';\nexport async function http(url) {\n    await sleep(integer_random(5000, 8000));\n    let response = await fetch(url);\n    let body = await response.text();\n    return body;\n}\n","./public/src/http_cache.mjs":"import {http} from \"./http.mjs\";\nimport {function_cache} from \"./function_cache.mjs\";\nexport async function http_cache(url) {\n    return await function_cache(http, [url]);\n}\n","./public/src/http_data_get.mjs":"import {equal} from \"./equal.mjs\";\nimport {assert} from \"./assert.mjs\";\nexport function http_data_get(result) {\n    let {status, data} = result;\n    assert(equal, [status, 200]);\n    return data;\n}\n","./public/src/http_get.mjs":"import {http_data_get} from \"./http_data_get.mjs\";\nexport async function http_get(url) {\n    let result = await axios.get(url);\n    return http_data_get(result);\n}\n","./public/src/http_post.mjs":"import {http_data_get} from \"./http_data_get.mjs\";\nexport async function http_post(url, body) {\n    let result = await axios.post(url, body);\n    return http_data_get(result);\n}\n","./public/src/identity.mjs":"export function identity(input) {\n    return input;\n}\n","./public/src/import_multi.mjs":"export async function import_multi(libary_to_import, variable_to_eval) {\n    let a;\n    if (typeof window === 'undefined') {\n        a = await import(libary_to_import);\n    } else {\n        a = eval(variable_to_eval);\n    }\n    return a;\n}\n","./public/src/import_node.mjs":"export async function import_node(libary_to_import) {\n    let a;\n    if (typeof window === 'undefined') {\n        a = await import(libary_to_import);\n    }\n    return a;\n}\n","./public/src/integer_parse.mjs":"export function integer_parse(verse_number) {\n    return parseInt(verse_number, 10);\n}\n","./public/src/integer_random.mjs":"export function integer_random(low, high) {\n    return Math.floor(Math.random() * (high - low + 1) + low);\n}\n","./public/src/integer_random_digit_single.mjs":"import {integer_random} from \"./integer_random.mjs\";\nexport function integer_random_digit_single() {\n    return integer_random(-9, 9);\n}\n","./public/src/integer_random_digit_single_positive.mjs":"import {integer_random} from \"./integer_random.mjs\";\nexport function integer_random_digit_single_positive() {\n    return integer_random(1, 9);\n}\n","./public/src/json_copy.mjs":"import {json_from} from \"./json_from.mjs\";\nimport {json_to} from \"./json_to.mjs\";\nexport function json_copy(input) {\n    let json = json_to(input);\n    return json_from(json);\n}\n","./public/src/json_from.mjs":"export function json_from(input) {\n    return JSON.parse(input);\n}\n","./public/src/json_to.mjs":"export function json_to(object) {\n    return JSON.stringify(object);\n}\n","./public/src/js_array_init_functionize.mjs":"import {js_call} from \"./js_call.mjs\";\nimport {each_reverse} from \"./each_reverse.mjs\";\nimport {js_init_index_insert} from \"./js_init_index_insert.mjs\";\nimport {js_variable_declarators} from \"./js_variable_declarators.mjs\";\nimport {list_insert} from \"./list_insert.mjs\";\nimport {list_get_end} from \"./list_get_end.mjs\";\nimport {object_property_set} from \"./object_property_set.mjs\";\nimport {list_add} from \"./list_add.mjs\";\nexport function js_array_init_functionize(ast) {\n    let vs = js_variable_declarators(ast, 'ArrayExpression');\n    for (let v of vs) {\n        let index_insert = js_init_index_insert(v, 1);\n        let {node} = v;\n        let {id} = node;\n        let {init} = node;\n        let {elements} = init;\n        each_reverse(elements, e => {\n            let call = js_call(list_add.name, [id, e]);\n            let {stack} = v;\n            let variable_declaration_parent = list_get_end(stack, 2);\n            list_insert(variable_declaration_parent, index_insert, call);\n        });\n        const init_new = js_call(object_new.name, []);\n        object_property_set(node, 'init', init_new);\n    }\n}\n","./public/src/js_arrow_to_function.mjs":"import {object_property_set} from \"./object_property_set.mjs\";\nimport {js_visit_node} from \"./js_visit_node.mjs\";\nexport function js_arrow_to_function(ast) {\n    js_visit_node(ast, 'ArrowFunctionExpression', v => {\n        let {node} = v;\n        object_property_set(node, 'type', 'FunctionExpression');\n    });\n}\n","./public/src/js_body_nested.mjs":"export function js_body_nested(declaration) {\n    let {body: body2} = declaration;\n    let {body: body3} = body2;\n    let body = body3;\n    return body;\n}\n","./public/src/js_call.mjs":"import {list_add} from \"./list_add.mjs\";\nimport {js_parse_first} from \"./js_parse_first.mjs\";\nimport {js_code_call} from \"./js_code_call.mjs\";\nimport {js_code_statement} from \"./js_code_statement.mjs\";\nexport function js_call(fn_name, args) {\n    let code_call = js_code_statement(js_code_call(fn_name));\n    let call = js_parse_first(code_call);\n    let {expression} = call;\n    let {arguments: args2} = expression;\n    for (let a of args) {\n        list_add(args2, a);\n    }\n    return call;\n}\n","./public/src/js_call_append.mjs":"import {string_empty_is} from \"./string_empty_is.mjs\";\nimport {js_body_nested} from \"./js_body_nested.mjs\";\nimport {js_variable_declaration_init} from \"./js_variable_declaration_init.mjs\";\nimport {js_export_single} from \"./js_export_single.mjs\";\nimport {file_exists} from \"./file_exists.mjs\";\nimport {function_name_to_path} from \"./function_name_to_path.mjs\";\nimport {js_code_declare_assign} from \"./js_code_declare_assign.mjs\";\nimport {js_call} from \"./js_call.mjs\";\nimport {js_parse_expression} from \"./js_parse_expression.mjs\";\nimport {list_add} from \"./list_add.mjs\";\nimport {list_map} from \"./list_map.mjs\";\nimport {js_imports_add_specified} from \"./js_imports_add_specified.mjs\";\nexport async function js_call_append(ast, a) {\n    let {function_name, args, result_name} = a;\n    let e = js_export_single(ast);\n    let {declaration} = e;\n    let body = js_body_nested(declaration);\n    let mapped = list_map(args, js_parse_expression);\n    let call = js_call(function_name, mapped);\n    let node;\n    if (string_empty_is(result_name)) {\n        node = {\n            type: 'ExpressionStatement',\n            expression: call\n        };\n    } else {\n        node = js_code_declare_assign(result_name);\n        js_variable_declaration_init(node, call);\n    }\n    list_add(body, node);\n    let path = function_name_to_path(function_name);\n    if (await file_exists(path)) {\n        js_imports_add_specified(ast, [function_name]);\n    }\n}\n","./public/src/js_call_variablize.mjs":"import {list_set} from \"./list_set.mjs\";\nimport {list_copy} from \"./list_copy.mjs\";\nimport {js_variablize} from \"./js_variablize.mjs\";\nimport {list_is} from \"./list_is.mjs\";\nimport {assert} from \"./assert.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {list_get_end} from \"./list_get_end.mjs\";\nimport {js_node_type_visitor} from \"./js_node_type_visitor.mjs\";\nimport {list_includes} from \"./list_includes.mjs\";\nimport {each_index} from \"./each_index.mjs\";\nexport function js_call_variablize(ast) {\n    let move_types = ['ArrayExpression'];\n    let vs = js_node_type_visitor(ast, 'CallExpression');\n    for (let v of vs) {\n        let {node} = v;\n        let {stack} = v;\n        let {arguments: args} = node;\n        let copy = list_copy(args);\n        each_index(copy, (arg, arg_i) => {\n            let {type} = arg;\n            if (list_includes(move_types, type)) {\n                let ancestor = list_get_end(stack, 2);\n                let {type: ancestor_type} = ancestor;\n                if (equal(ancestor_type, 'BlockStatement')) {\n                    let body = list_get_end(stack, 1);\n                    assert(list_is, [body]);\n                    let es = list_get_end(stack, 0);\n                    let {type: es_type} = es;\n                    assert(equal, [es_type, 'ExpressionStatement']);\n                    let parsed2 = js_variablize(ast, body, es, arg);\n                    list_set(args, arg_i, parsed2);\n                }\n            }\n        });\n    }\n}\n","./public/src/js_code_add.mjs":"export function js_code_add(a, b) {\n    return `${a} + ${b}`;\n}\n","./public/src/js_code_add_3.mjs":"import {js_code_add} from \"./js_code_add.mjs\";\nexport function js_code_add_3(a, b, c) {\n    return js_code_add(js_code_add(a, b), c);\n}\n","./public/src/js_code_assign.mjs":"export function js_code_assign(variable_name, value) {\n    return `${variable_name} = ${value}`;\n}\n","./public/src/js_code_call.mjs":"import {js_code_statement} from \"./js_code_statement.mjs\";\nexport function js_code_call(function_name) {\n    let code = js_code_statement(`${function_name}()`);\n    return code;\n}\n","./public/src/js_code_declare_assign.mjs":"import {js_code_statement_let} from \"./js_code_statement_let.mjs\";\nimport {js_code_assign} from \"./js_code_assign.mjs\";\nimport {js_parse_first} from \"./js_parse_first.mjs\";\nexport function js_code_declare_assign(variable_name) {\n    const value = `0`;\n    const declare = js_code_assign(variable_name, value);\n    const code = js_code_statement_let(declare);\n    let parsed = js_parse_first(code);\n    return parsed;\n}\n","./public/src/js_code_import.mjs":"import {folder_current} from \"./folder_current.mjs\";\nimport {js_code_import_path} from \"./js_code_import_path.mjs\";\nexport function js_code_import(import_name) {\n    const import_path = `${folder_current()}/`;\n    let import_code = js_code_import_path(import_path, import_name);\n    return import_code;\n}\n","./public/src/js_code_import_path.mjs":"import {js_code_statement} from \"./js_code_statement.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nexport function js_code_import_path(import_path, import_name) {\n    let import_path_combined = string_combine(import_path, import_name);\n    let import_code = js_code_statement(`import { ${import_name} } from \"${import_path_combined}.mjs\"`);\n    return import_code;\n}\n","./public/src/js_code_let.mjs":"export function js_code_let(declare) {\n    return `let ${declare}`;\n}\n","./public/src/js_code_return.mjs":"import {js_code_statement} from \"./js_code_statement.mjs\";\nexport function js_code_return(code) {\n    return js_code_statement(`return ${code}`);\n}\n","./public/src/js_code_statement.mjs":"export function js_code_statement(code) {\n    return `${code};`;\n}\n","./public/src/js_code_statement_assign.mjs":"import {js_code_assign} from \"./js_code_assign.mjs\";\nimport {js_code_statement} from \"./js_code_statement.mjs\";\nexport function js_code_statement_assign(name, value) {\n    return js_code_statement(js_code_assign(name, value));\n}\n","./public/src/js_code_statement_let.mjs":"import {js_code_let} from \"./js_code_let.mjs\";\nimport {js_code_statement} from \"./js_code_statement.mjs\";\nexport function js_code_statement_let(declare) {\n    return js_code_statement(js_code_let(declare));\n}\n","./public/src/js_code_statement_let_assign.mjs":"import {js_code_assign} from \"./js_code_assign.mjs\";\nimport {js_code_statement_let} from \"./js_code_statement_let.mjs\";\nexport function js_code_statement_let_assign(name, value) {\n    return js_code_statement_let(js_code_assign(name, value));\n}\n","./public/src/js_code_statement_let_assign_2.mjs":"import {list_join} from \"./list_join.mjs\";\nimport {js_code_assign} from \"./js_code_assign.mjs\";\nimport {js_code_statement_let} from \"./js_code_statement_let.mjs\";\nexport function js_code_statement_let_assign_2(name_a, a, name_b, b) {\n    return js_code_statement_let(list_join([js_code_assign(name_a, a), js_code_assign(name_b, b)], ', '));\n}\n","./public/src/js_code_statement_let_assign_multiple.mjs":"import {list_join} from \"./list_join.mjs\";\nimport {js_code_assign} from \"./js_code_assign.mjs\";\nimport {js_code_statement_let} from \"./js_code_statement_let.mjs\";\nimport {list_length} from \"./list_length.mjs\";\nimport {assert} from \"./assert.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {range} from \"./range.mjs\";\nimport {list_add} from \"./list_add.mjs\";\nimport {list_get} from \"./list_get.mjs\";\nimport {array_new} from \"./array_new.mjs\";\nexport function js_code_statement_let_assign_multiple(names, values) {\n    let length_n = list_length(names);\n    let length_v = list_length(values);\n    assert(equal, [length_n, length_v]);\n    let list = array_new();\n    for (let i of range(length_n)) {\n        let n = list_get(names, i);\n        let v = list_get(values, i);\n        list_add(list, js_code_assign(n, v));\n    }\n    return js_code_statement_let(list_join(list, ', '));\n}\n","./public/src/js_declaration_single.mjs":"import {js_export_single} from \"./js_export_single.mjs\";\nexport function js_declaration_single(ast) {\n    let e = js_export_single(ast);\n    let {declaration: d} = e;\n    let declaration = d;\n    return declaration;\n}\n","./public/src/js_declaration_single_name.mjs":"import {js_declaration_single} from \"./js_declaration_single.mjs\";\nexport function js_declaration_single_name(ast) {\n    let declaration = js_declaration_single(ast);\n    let {id} = declaration;\n    let name = id.name;\n    return name;\n}\n","./public/src/js_declaration_to_name.mjs":"export function js_declaration_to_name(declaration) {\n    let {id} = declaration;\n    let {name} = id;\n    return name;\n}\n","./public/src/js_empty_statements_remove.mjs":"import {list_remove} from \"./list_remove.mjs\";\nimport {list_is} from \"./list_is.mjs\";\nimport {assert} from \"./assert.mjs\";\nimport {js_node_type_visitor} from \"./js_node_type_visitor.mjs\";\nexport function js_empty_statements_remove(ast) {\n    let vs = js_node_type_visitor(ast, 'EmptyStatement');\n    for (let v of vs) {\n        let {parent} = v;\n        let {node} = v;\n        assert(list_is, [parent]);\n        list_remove(parent, node);\n    }\n}\n","./public/src/js_exports.mjs":"import {js_node_type} from \"./js_node_type.mjs\";\nexport function js_exports(ast) {\n    return js_node_type(ast, 'ExportNamedDeclaration');\n}\n","./public/src/js_export_single.mjs":"import {js_exports} from \"./js_exports.mjs\";\nimport {list_single} from \"./list_single.mjs\";\nexport function js_export_single(ast) {\n    let exports = js_exports(ast);\n    return list_single(exports);\n}\n","./public/src/js_function_move_outside.mjs":"import {js_node_type_visitor} from \"./js_node_type_visitor.mjs\";\nimport {js_outside_move} from \"./js_outside_move.mjs\";\nimport {object_replace} from \"./object_replace.mjs\";\nimport {js_parse_expression} from \"./js_parse_expression.mjs\";\nimport {object_copy} from \"./object_copy.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {list_add} from \"./list_add.mjs\";\nimport {object_property_set} from \"./object_property_set.mjs\";\nexport async function js_function_move_outside(ast, function_name) {\n    let vs = js_node_type_visitor(ast, 'FunctionExpression');\n    for (let v of vs) {\n        let {node} = v;\n        let {id} = node;\n        if (equal(id, null)) {\n            continue;\n        }\n        let {name} = id;\n        if (!equal(name, function_name)) {\n            continue;\n        }\n        let outside = object_copy(node);\n        object_property_set(outside, 'type', 'FunctionDeclaration');\n        let parsed = js_parse_expression(function_name);\n        object_replace(node, parsed);\n        let {body} = ast;\n        list_add(body, outside);\n    }\n    await js_outside_move(ast);\n}\n","./public/src/js_function_name_add.mjs":"import {object_property_set} from \"./object_property_set.mjs\";\nimport {js_name_unique} from \"./js_name_unique.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nimport {js_declaration_single_name} from \"./js_declaration_single_name.mjs\";\nimport {js_visit_node} from \"./js_visit_node.mjs\";\nimport {js_parse_expression} from \"./js_parse_expression.mjs\";\nexport function js_function_name_add(ast) {\n    let name = js_declaration_single_name(ast);\n    let prefix = string_combine(name, '_');\n    js_visit_node(ast, 'FunctionExpression', v => {\n        let {node} = v;\n        let u = js_name_unique(ast, prefix);\n        let id = js_parse_expression(u);\n        object_property_set(node, 'id', id);\n    });\n}\n","./public/src/js_identifiers.mjs":"import {js_visit_identifiers} from './js_visit_identifiers.mjs';\nimport {list_adder_unique} from './list_adder_unique.mjs';\nexport function js_identifiers(ast) {\n    return list_adder_unique(la => {\n        js_visit_identifiers(ast, v => {\n            let {node} = v;\n            la(node.name);\n        });\n    });\n}\n","./public/src/js_identifier_rename.mjs":"import {string_is} from \"./string_is.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {object_property_get} from \"./object_property_get.mjs\";\nimport {object_property_set} from \"./object_property_set.mjs\";\nimport {js_visit_identifiers} from \"./js_visit_identifiers.mjs\";\nimport {assert} from \"./assert.mjs\";\nexport function js_identifier_rename(ast, identifier_from, identifier_to) {\n    assert(string_is, [identifier_from]);\n    assert(string_is, [identifier_to]);\n    js_visit_identifiers(ast, v => {\n        let {node} = v;\n        let name = object_property_get(node, 'name');\n        if (equal(name, identifier_from)) {\n            object_property_set(node, 'name', identifier_to);\n        }\n    });\n}\n","./public/src/js_identifier_to_expression.mjs":"import {js_parse_expression} from \"./js_parse_expression.mjs\";\nimport {string_delimit} from \"./string_delimit.mjs\";\nexport function js_identifier_to_expression(key) {\n    let {name: key_name} = key;\n    let code_key_string = string_delimit(key_name);\n    let key_string = js_parse_expression(code_key_string);\n    return key_string;\n}\n","./public/src/js_imports_add.mjs":"import {js_imports_add_specified} from \"./js_imports_add_specified.mjs\";\nimport {function_names} from \"./function_names.mjs\";\nexport async function js_imports_add(ast) {\n    let names = await function_names();\n    js_imports_add_specified(ast, names);\n}\n","./public/src/js_imports_add_specified.mjs":"import {list_add_beginning} from \"./list_add_beginning.mjs\";\nimport {js_parse_first} from \"./js_parse_first.mjs\";\nimport {js_code_import} from \"./js_code_import.mjs\";\nimport {list_difference} from \"./list_difference.mjs\";\nimport {list_intersect} from \"./list_intersect.mjs\";\nimport {js_identifiers} from \"./js_identifiers.mjs\";\nimport {js_imports_existing} from \"./js_imports_existing.mjs\";\nimport {js_declaration_single_name} from \"./js_declaration_single_name.mjs\";\nexport function js_imports_add_specified(ast, specified) {\n    let name = js_declaration_single_name(ast);\n    let self = [name];\n    let existing = js_imports_existing(ast);\n    let identifiers = js_identifiers(ast);\n    let identifier_fns = list_intersect(identifiers, specified);\n    let missing = list_difference(identifier_fns, existing);\n    let missing_without_self = list_difference(missing, self);\n    let {body} = ast;\n    for (let m of missing_without_self) {\n        let code = js_code_import(m);\n        let first = js_parse_first(code);\n        list_add_beginning(body, first);\n    }\n}\n","./public/src/js_imports_existing.mjs":"import {list_adder} from \"./list_adder.mjs\";\nimport {js_visit_node} from \"./js_visit_node.mjs\";\nexport function js_imports_existing(ast) {\n    let existing = list_adder(la => {\n        js_visit_node(ast, 'ImportSpecifier', v => {\n            let {node} = v;\n            let {imported} = node;\n            if (imported.type === 'Identifier') {\n                la(imported.name);\n            }\n        });\n    });\n    return existing;\n}\n","./public/src/js_imports_existing_named.mjs":"import {list_adder} from \"./list_adder.mjs\";\nimport {js_visit_node} from \"./js_visit_node.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function js_imports_existing_named(ast, name) {\n    let existing = list_adder(la => {\n        js_visit_node(ast, 'ImportSpecifier', v => {\n            let {node} = v;\n            let {imported} = node;\n            if (imported.type === 'Identifier') {\n                if (equal(imported.name, name)) la(v);\n            }\n        });\n    });\n    return existing;\n}\n","./public/src/js_imports_fix.mjs":"import {js_imports_remove} from \"./js_imports_remove.mjs\";\nimport {js_imports_add} from \"./js_imports_add.mjs\";\nexport async function js_imports_fix(ast) {\n    await js_imports_add(ast);\n    js_imports_remove(ast);\n}\n","./public/src/js_imports_remove.mjs":"import {list_get_end} from \"./list_get_end.mjs\";\nimport {list_single} from \"./list_single.mjs\";\nimport {js_imports_existing_named} from \"./js_imports_existing_named.mjs\";\nimport {list_difference} from \"./list_difference.mjs\";\nimport {js_identifiers} from \"./js_identifiers.mjs\";\nimport {js_export_single} from \"./js_export_single.mjs\";\nimport {js_imports_existing} from \"./js_imports_existing.mjs\";\nimport {list_remove} from \"./list_remove.mjs\";\nexport function js_imports_remove(ast) {\n    let existing = js_imports_existing(ast);\n    let export_ = js_export_single(ast);\n    let used = js_identifiers(export_);\n    let extra = list_difference(existing, used);\n    let {body} = ast;\n    for (let e of extra) {\n        let existing2 = js_imports_existing_named(ast, e);\n        let e2 = list_single(existing2);\n        let {stack} = e2;\n        let ancestor = list_get_end(stack, 1);\n        list_remove(body, ancestor);\n    }\n}\n","./public/src/js_init_index_insert.mjs":"import {add_1} from \"./add_1.mjs\";\nimport {list_index} from \"./list_index.mjs\";\nimport {list_is} from \"./list_is.mjs\";\nimport {assert} from \"./assert.mjs\";\nimport {list_get_end} from \"./list_get_end.mjs\";\nexport function js_init_index_insert(v, offset) {\n    let {stack} = v;\n    let variable_declaration = list_get_end(stack, offset);\n    let variable_declaration_parent = list_get_end(stack, add_1(offset));\n    assert(list_is, [variable_declaration_parent]);\n    let index = list_index(variable_declaration_parent, variable_declaration);\n    let index_insert = add_1(index);\n    return index_insert;\n}\n","./public/src/js_name_unique.mjs":"import {list_includes} from \"./list_includes.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nimport {js_identifiers} from \"./js_identifiers.mjs\";\nexport function js_name_unique(ast, prefix) {\n    let identifiers = js_identifiers(ast);\n    let i = 1;\n    let variable_name;\n    while (true) {\n        variable_name = string_combine(prefix, i);\n        if (!list_includes(identifiers, variable_name)) {\n            break;\n        }\n        i++;\n    }\n    return variable_name;\n}\n","./public/src/js_name_unique_v.mjs":"import {js_name_unique} from \"./js_name_unique.mjs\";\nexport function js_name_unique_v(ast) {\n    const prefix = 'v';\n    let variable_name = js_name_unique(ast, prefix);\n    return variable_name;\n}\n","./public/src/js_name_unique_v_parsed.mjs":"import {js_code_declare_assign} from \"./js_code_declare_assign.mjs\";\nimport {js_name_unique_v} from \"./js_name_unique_v.mjs\";\nexport function js_name_unique_v_parsed(ast) {\n    let variable_name = js_name_unique_v(ast);\n    let parsed = js_code_declare_assign(variable_name);\n    return {\n        parsed,\n        variable_name\n    };\n}\n","./public/src/js_node_is.mjs":"import {object_property_exists} from './object_property_exists.mjs';\nimport {null_is} from './null_is.mjs';\nexport function js_node_is(candidate) {\n    if (null_is(candidate)) {\n        return false;\n    }\n    return object_property_exists(candidate, 'type');\n}\n","./public/src/js_node_type.mjs":"import {list_adder_unique} from './list_adder_unique.mjs';\nimport {js_visit} from './js_visit.mjs';\nexport function js_node_type(ast, type) {\n    return list_adder_unique(la => {\n        js_visit(ast, lambda);\n        function lambda(v) {\n            let {node} = v;\n            if (node.type === type) {\n                la(node);\n            }\n        }\n    });\n}\n","./public/src/js_node_types.mjs":"import {undefined_not_is} from \"./undefined_not_is.mjs\";\nimport {list_adder_unique} from './list_adder_unique.mjs';\nimport {js_visit} from './js_visit.mjs';\nexport function js_node_types(ast) {\n    return list_adder_unique(la => {\n        js_visit(ast, lambda);\n        function lambda(v) {\n            let {node} = v;\n            let {type} = node;\n            if (undefined_not_is(type)) {\n                la(type);\n            }\n        }\n    });\n}\n","./public/src/js_node_type_visitor.mjs":"import {list_adder_unique} from './list_adder_unique.mjs';\nimport {js_visit} from './js_visit.mjs';\nexport function js_node_type_visitor(ast, type) {\n    return list_adder_unique(la => {\n        js_visit(ast, lambda);\n        function lambda(v) {\n            let {node} = v;\n            if (node.type === type) {\n                la(v);\n            }\n        }\n    });\n}\n","./public/src/js_object_init_functionize.mjs":"import {js_identifier_to_expression} from \"./js_identifier_to_expression.mjs\";\nimport {js_call} from \"./js_call.mjs\";\nimport {each_reverse} from \"./each_reverse.mjs\";\nimport {js_init_index_insert} from \"./js_init_index_insert.mjs\";\nimport {js_variable_declarators} from \"./js_variable_declarators.mjs\";\nimport {list_insert} from \"./list_insert.mjs\";\nimport {list_is} from \"./list_is.mjs\";\nimport {assert} from \"./assert.mjs\";\nimport {list_get_end} from \"./list_get_end.mjs\";\nimport {object_property_set} from \"./object_property_set.mjs\";\nimport {object_new} from \"./object_new.mjs\";\nexport function js_object_init_functionize(ast) {\n    let vs = js_variable_declarators(ast, 'ObjectExpression');\n    for (let v of vs) {\n        let index_insert = js_init_index_insert(v, 1);\n        let {node} = v;\n        let {id} = node;\n        let {init} = node;\n        let {properties} = init;\n        each_reverse(properties, p => {\n            let {key, value} = p;\n            let key_string = js_identifier_to_expression(key);\n            let call = js_call(object_property_set.name, [id, key_string, value]);\n            let {stack} = v;\n            let variable_declaration_parent = list_get_end(stack, 2);\n            assert(list_is, [variable_declaration_parent]);\n            list_insert(variable_declaration_parent, index_insert, call);\n        });\n        const init_new = js_call(object_new.name, []);\n        object_property_set(node, 'init', init_new);\n    }\n}\n","./public/src/js_object_pattern_functionize.mjs":"import {js_imports_add_specified} from \"./js_imports_add_specified.mjs\";\nimport {list_remove} from \"./list_remove.mjs\";\nimport {js_variable_declaration_init} from \"./js_variable_declaration_init.mjs\";\nimport {js_code_declare_assign} from \"./js_code_declare_assign.mjs\";\nimport {js_name_unique_v_parsed} from \"./js_name_unique_v_parsed.mjs\";\nimport {js_identifier_to_expression} from \"./js_identifier_to_expression.mjs\";\nimport {js_node_type_visitor} from \"./js_node_type_visitor.mjs\";\nimport {list_insert} from \"./list_insert.mjs\";\nimport {list_get_end} from \"./list_get_end.mjs\";\nimport {js_call} from \"./js_call.mjs\";\nimport {js_parse_expression} from \"./js_parse_expression.mjs\";\nimport {each_reverse} from \"./each_reverse.mjs\";\nimport {js_init_index_insert} from \"./js_init_index_insert.mjs\";\nimport {object_property_get} from \"./object_property_get.mjs\";\nexport function js_object_pattern_functionize(ast) {\n    let vs = js_node_type_visitor(ast, 'ObjectPattern');\n    for (let v of vs) {\n        let {stack} = v;\n        let grandparent = list_get_end(stack, 1);\n        let variable_declaration = list_get_end(stack, 2);\n        let variable_declaration_parent = list_get_end(stack, 3);\n        let {parent} = v;\n        let {node} = v;\n        let {properties} = node;\n        let index_insert = js_init_index_insert(v, 2);\n        let {parsed, variable_name} = js_name_unique_v_parsed(ast);\n        each_reverse(properties, p => {\n            let {key, value} = p;\n            let {name: value_name} = value;\n            let parsed = js_code_declare_assign(value_name);\n            let key_string = js_identifier_to_expression(key);\n            let variable_name_identifier = js_parse_expression(variable_name);\n            let call = js_call(object_property_get.name, [variable_name_identifier, key_string]);\n            js_variable_declaration_init(parsed, call);\n            list_insert(variable_declaration_parent, index_insert, parsed);\n        });\n        let {init} = parent;\n        js_variable_declaration_init(parsed, init);\n        list_insert(variable_declaration_parent, index_insert, parsed);\n        list_remove(variable_declaration_parent, variable_declaration);\n    }\n    js_imports_add_specified(ast, [object_property_get.name]);\n}\n","./public/src/js_outside_move.mjs":"import {js_imports_remove} from \"./js_imports_remove.mjs\";\nimport {function_imports_add} from \"./function_imports_add.mjs\";\nimport {js_body_nested} from \"./js_body_nested.mjs\";\nimport {js_imports_add} from \"./js_imports_add.mjs\";\nimport {list_join_comma} from \"./list_join_comma.mjs\";\nimport {list_remove} from \"./list_remove.mjs\";\nimport {js_parse} from \"./js_parse.mjs\";\nimport {js_unparse} from \"./js_unparse.mjs\";\nimport {function_new_generic} from \"./function_new_generic.mjs\";\nimport {js_declaration_to_name} from \"./js_declaration_to_name.mjs\";\nimport {list_filter} from \"./list_filter.mjs\";\nimport {list_copy} from \"./list_copy.mjs\";\nimport {list_map} from \"./list_map.mjs\";\nimport {js_imports_add_specified} from \"./js_imports_add_specified.mjs\";\nexport async function js_outside_move(ast) {\n    const type = 'FunctionDeclaration';\n    let {body: body_ast} = ast;\n    let declarations = list_filter(body_ast, b => b.type === type);\n    let copy = list_copy(declarations);\n    for (let declaration of copy) {\n        let function_name = js_declaration_to_name(declaration);\n        let {params} = declaration;\n        let {async} = declaration;\n        let args = list_map(params, p => p.name);\n        let args_string = list_join_comma(args);\n        let body = js_body_nested(declaration);\n        let parsed = js_parse(``);\n        parsed.body = body;\n        let unparsed = js_unparse(parsed);\n        await function_new_generic(function_name, args_string, unparsed, false, [], async);\n    }\n    for (let declaration of copy) {\n        let function_name = js_declaration_to_name(declaration);\n        await function_imports_add(function_name);\n        list_remove(body_ast, declaration);\n    }\n    let names = list_map(copy, js_declaration_to_name);\n    js_imports_add_specified(ast, names);\n    js_imports_remove(ast);\n}\n","./public/src/js_param_new.mjs":"import {js_declaration_single_name} from \"./js_declaration_single_name.mjs\";\nimport {js_declaration_single} from \"./js_declaration_single.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {js_node_type} from \"./js_node_type.mjs\";\nimport {js_parse_expression} from \"./js_parse_expression.mjs\";\nimport {list_add} from \"./list_add.mjs\";\nexport function js_param_new(ast, function_name, param_name, default_value_string) {\n    let nodes = js_node_type(ast, 'CallExpression');\n    for (let node of nodes) {\n        let {callee} = node;\n        let {type} = callee;\n        if (!equal(type, 'Identifier')) {\n            continue;\n        }\n        let {name} = callee;\n        if (!equal(name, function_name)) {\n            continue;\n        }\n        let {arguments: args} = node;\n        let default_value = js_parse_expression(default_value_string);\n        list_add(args, default_value);\n    }\n    let name = js_declaration_single_name(ast);\n    if (!equal(name, function_name)) {\n        return;\n    }\n    let declaration = js_declaration_single(ast);\n    let {params} = declaration;\n    let param_new = js_parse_expression(param_name);\n    list_add(params, param_new);\n}\n","./public/src/js_parse.mjs":"import {import_multi} from \"./import_multi.mjs\";\nimport {js_parse_options} from \"./js_parse_options.mjs\";\nlet a = await import_multi('acorn', 'acorn');\nexport function js_parse(code) {\n    return a.parse(code, js_parse_options());\n}\n","./public/src/js_parse_expression.mjs":"import {js_parse_first} from \"./js_parse_first.mjs\";\nimport {js_code_statement} from \"./js_code_statement.mjs\";\nexport function js_parse_expression(variable_name) {\n    const identifier_code = js_code_statement(`(${variable_name})`);\n    let parsed2 = js_parse_first(identifier_code);\n    let {expression} = parsed2;\n    return expression;\n}\n","./public/src/js_parse_first.mjs":"import {js_parse} from \"./js_parse.mjs\";\nimport {list_first} from \"./list_first.mjs\";\nexport function js_parse_first(code) {\n    let parsed = js_parse(code);\n    let {body} = parsed;\n    let first = list_first(body);\n    return first;\n}\n","./public/src/js_parse_options.mjs":"export function js_parse_options() {\n    return {\n        ecmaVersion: 2022,\n        sourceType: 'module'\n    };\n}\n","./public/src/js_return_variablize.mjs":"import {js_variablize} from \"./js_variablize.mjs\";\nimport {js_node_type_visitor} from \"./js_node_type_visitor.mjs\";\nexport function js_return_variablize(ast) {\n    let return_statements = js_node_type_visitor(ast, 'ReturnStatement');\n    for (let r of return_statements) {\n        let {node} = r;\n        if (node.argument.type === 'Identifier') {\n            continue;\n        }\n        let {parent} = r;\n        const init = node.argument;\n        let parsed2 = js_variablize(ast, parent, node, init);\n        node.argument = parsed2;\n    }\n}\n","./public/src/js_tokenize.mjs":"import {js_parse_options} from \"./js_parse_options.mjs\";\nexport function js_tokenize(code) {\n    return acorn.tokenizer(code, js_parse_options());\n}\n","./public/src/js_unparse.mjs":"import {js_unparse_indent} from \"./js_unparse_indent.mjs\";\nexport function js_unparse(ast) {\n    return js_unparse_indent(ast, '    ');\n}\n","./public/src/js_unparse_indent.mjs":"import {import_multi} from \"./import_multi.mjs\";\nlet a = await import_multi('astring', 'astring');\nlet {generate} = a;\nexport function js_unparse_indent(ast, indent) {\n    return generate(ast, {\n        indent: indent\n    });\n}\n","./public/src/js_unparse_indent_none.mjs":"import {js_unparse_indent} from \"./js_unparse_indent.mjs\";\nexport function js_unparse_indent_none(ast) {\n    return js_unparse_indent(ast, '');\n}\n","./public/src/js_variable_declaration_init.mjs":"import {object_property_set} from \"./object_property_set.mjs\";\nimport {list_first} from \"./list_first.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {list_length} from \"./list_length.mjs\";\nimport {list_is} from \"./list_is.mjs\";\nimport {assert} from \"./assert.mjs\";\nexport function js_variable_declaration_init(parsed, init) {\n    let {declarations} = parsed;\n    assert(list_is, [declarations]);\n    let length = list_length(declarations);\n    assert(equal, [length, 1]);\n    let declaration = list_first(declarations);\n    object_property_set(declaration, 'init', init);\n}\n","./public/src/js_variable_declarators.mjs":"import {js_visit_node} from \"./js_visit_node.mjs\";\nimport {list_adder_unique} from \"./list_adder_unique.mjs\";\nexport function js_variable_declarators(ast, type) {\n    return list_adder_unique(la => {\n        js_visit_node(ast, 'VariableDeclarator', v => {\n            let {node} = v;\n            let {init} = node;\n            if (init.type === type) {\n                la(v);\n            }\n        });\n    });\n}\n","./public/src/js_variablize.mjs":"import {js_name_unique_v_parsed} from \"./js_name_unique_v_parsed.mjs\";\nimport {js_parse_expression} from \"./js_parse_expression.mjs\";\nimport {list_first} from \"./list_first.mjs\";\nimport {list_index} from \"./list_index.mjs\";\nimport {list_is} from \"./list_is.mjs\";\nimport {assert} from \"./assert.mjs\";\nexport function js_variablize(ast, parent, node, init) {\n    assert(list_is, [parent]);\n    let index = list_index(parent, node);\n    let {parsed, variable_name} = js_name_unique_v_parsed(ast);\n    parent.splice(index, 0, parsed);\n    let {declarations} = parsed;\n    let first = list_first(declarations);\n    first.init = init;\n    let parsed2 = js_parse_expression(variable_name);\n    return parsed2;\n}\n","./public/src/js_visit.mjs":"import {visit} from \"./visit.mjs\";\nimport {object_values} from \"./object_values.mjs\";\nimport {js_node_is} from \"./js_node_is.mjs\";\nimport {list_is} from \"./list_is.mjs\";\nimport {null_is} from \"./null_is.mjs\";\nimport {undefined_is} from \"./undefined_is.mjs\";\nexport function js_visit(ast, lambda) {\n    visit(ast, n => {\n        if (js_node_is(n)) {\n            return object_values(n);\n        }\n        if (list_is(n)) {\n            return n;\n        }\n        return [];\n    }, n => !null_is(n) && !undefined_is(n), lambda, []);\n}\n","./public/src/js_visit_identifiers.mjs":"import {js_visit_node} from \"./js_visit_node.mjs\";\nexport function js_visit_identifiers(ast, lambda) {\n    js_visit_node(ast, 'Identifier', lambda);\n}\n","./public/src/js_visit_node.mjs":"import {js_visit} from \"./js_visit.mjs\";\nexport function js_visit_node(ast, type, lambda) {\n    js_visit(ast, lambda_outer);\n    function lambda_outer(v) {\n        let {node} = v;\n        if (node.type !== type) {\n            return;\n        }\n        lambda(v);\n    }\n}\n","./public/src/keyboard_keys.mjs":"import {keyboard_keys_rows} from \"./keyboard_keys_rows.mjs\";\nimport {list_concat_multiple} from \"./list_concat_multiple.mjs\";\nexport function keyboard_keys() {\n    let ks = keyboard_keys_rows();\n    let concat = list_concat_multiple(ks);\n    return concat;\n}\n","./public/src/keyboard_keys_rows.mjs":"export function keyboard_keys_rows() {\n    return ['qwertyuiop', 'asdfghjkl', 'zxcvbnm'];\n}\n","./public/src/lesson_add.mjs":"import {lesson_simple} from \"./lesson_simple.mjs\";\nimport {lesson_add_quiz} from \"./lesson_add_quiz.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nexport function lesson_add() {\n    let example_message = 'adding two numbers together';\n    let description = 'addition ( + )';\n    return lesson_simple(lesson_add_quiz, example_before, description, example_message, []);\n    function example_before(parent) {\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['two numbers can be added together using the plus ( ', '+', ' ) sign']);\n    }\n}\n","./public/src/lesson_add_numbers_three.mjs":"import {call_multiple} from \"./call_multiple.mjs\";\nimport {app_learn_code_log_add_3} from \"./app_learn_code_log_add_3.mjs\";\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nexport function lesson_add_numbers_three() {\n    let example_message = 'adding three numbers';\n    let description = example_message;\n    return lesson_simple(function () {\n        let [a, b, c] = call_multiple(integer_random_digit_single_positive, 3);\n        return app_learn_code_log_add_3(a, b, c);\n    }, example_before, description, example_message, []);\n    function example_before(parent) {\n        html_p_text(parent, 'more than two numbers can be added together at once');\n    }\n}\n","./public/src/lesson_add_quiz.mjs":"import {app_learn_code_log_add} from \"./app_learn_code_log_add.mjs\";\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\nexport function lesson_add_quiz() {\n    let a = integer_random_digit_single_positive();\n    let b = integer_random_digit_single_positive();\n    return app_learn_code_log_add(a, b);\n}\n","./public/src/lesson_boolean.mjs":"import {lesson_simple} from \"./lesson_simple.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {list_add} from \"./list_add.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nimport {random_50_50} from \"./random_50_50.mjs\";\nimport {list_map} from \"./list_map.mjs\";\nimport {list_join} from \"./list_join.mjs\";\nexport function lesson_boolean() {\n    const example_message = 'boolean ( true , false )';\n    const description = 'outputting true or false';\n    return lesson_simple(source_get, example_before, description, example_message, []);\n    function example_before(parent) {\n        html_p_text(parent, 'some questions can be answered using a \"yes\" or a \"no\"');\n        html_p_text(parent, 'for example if someone asked \"is the number two bigger than the number one ?\" then the answer is \"yes\"');\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript the code for \"yes\" is ', 'true']);\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript the code for \"no\" is ', 'false']);\n    }\n    function source_get() {\n        let answers = [true, false];\n        list_add(answers, random_50_50());\n        list_scramble(answers);\n        let mapped = list_map(answers, a => `console.log(${a});`);\n        return list_join(mapped, '\\n');\n    }\n}\n","./public/src/lesson_comparisons_source_get_get.mjs":"import {integer_random} from \"./integer_random.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\nexport function lesson_comparisons_source_get_get(sign) {\n    return function source_get() {\n        let a = integer_random_digit_single_positive();\n        let b;\n        if (equal(integer_random(1, 3), 1)) {\n            b = a;\n        } else {\n            b = integer_random_digit_single_positive();\n        }\n        return `console.log(${a} ${sign} ${b});`;\n    };\n}\n","./public/src/lesson_console_log.mjs":"import {lesson_console_log_hierarchies} from \"./lesson_console_log_hierarchies.mjs\";\nimport {app_learn_code_unscramble} from \"./app_learn_code_unscramble.mjs\";\nimport {app_learn_code_quiz} from \"./app_learn_code_quiz.mjs\";\nimport {lesson_console_log_quiz} from \"./lesson_console_log_quiz.mjs\";\nimport {lesson_console_log_javascript} from \"./lesson_console_log_javascript.mjs\";\nimport {lesson_console_log_process_named} from \"./lesson_console_log_process_named.mjs\";\nimport {lesson_console_log_process_computer_program} from \"./lesson_console_log_process_computer_program.mjs\";\nimport {list_add} from \"./list_add.mjs\";\nimport {array_new} from \"./array_new.mjs\";\nimport {object_new} from \"./object_new.mjs\";\nimport {object_property_set} from \"./object_property_set.mjs\";\nimport {lesson_console_log_analogy_paper} from \"./lesson_console_log_analogy_paper.mjs\";\nimport {lesson_console_log_analogy_addition} from \"./lesson_console_log_analogy_addition.mjs\";\nimport {lesson_console_log_program_first} from \"./lesson_console_log_program_first.mjs\";\nimport {lesson_console_log_strings} from \"./lesson_console_log_strings.mjs\";\nimport {lesson_console_log_analogy_addition_symbol} from \"./lesson_console_log_analogy_addition_symbol.mjs\";\nexport function lesson_console_log() {\n    let v1 = object_new();\n    object_property_set(v1, 'description', 'outputting a string to the console');\n    let v2 = array_new();\n    list_add(v2, lesson_console_log_analogy_paper);\n    list_add(v2, lesson_console_log_analogy_addition);\n    list_add(v2, lesson_console_log_analogy_addition_symbol);\n    list_add(v2, lesson_console_log_process_named);\n    list_add(v2, lesson_console_log_hierarchies);\n    list_add(v2, lesson_console_log_javascript);\n    list_add(v2, lesson_console_log_strings);\n    list_add(v2, lesson_console_log_process_computer_program);\n    list_add(v2, lesson_console_log_program_first);\n    list_add(v2, app_learn_code_quiz(lesson_console_log_quiz));\n    list_add(v2, app_learn_code_unscramble(lesson_console_log_quiz));\n    object_property_set(v1, 'screens', v2);\n    return v1;\n}\n","./public/src/lesson_console_log_analogy_addition.mjs":"import {html_li_text} from \"./html_li_text.mjs\";\nimport {html_ul} from \"./html_ul.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nexport function lesson_console_log_analogy_addition(parent) {\n    html_p_text(parent, 'suppose two numbers are added together to get their sum');\n    html_p_text(parent, 'we could say :');\n    let ol1 = html_ul(parent);\n    html_li_text(ol1, 'the adding of the two numbers together is a process');\n    html_li_text(ol1, 'the two numbers are the inputs to the addition process');\n    html_li_text(ol1, 'the sum of the two numbers is the output of the addition process');\n}\n","./public/src/lesson_console_log_analogy_addition_symbol.mjs":"import {html_li_text} from \"./html_li_text.mjs\";\nimport {html_ul} from \"./html_ul.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nexport function lesson_console_log_analogy_addition_symbol(parent) {\n    html_p_text(parent, 'suppose the letters \"a\", \"b\" and \"c\" represent numbers');\n    html_p_text(parent, 'suppose \"c\" is the sum of \"a\" and \"b\"');\n    html_p_text(parent, 'then here is the equation : a + b = c');\n    html_p_text(parent, 'we could say :');\n    let ol2 = html_ul(parent);\n    html_li_text(ol2, 'the addition sign ( \"+\" ) is a process');\n    html_li_text(ol2, '\"a\" and \"b\" are the inputs to the \"+\" process');\n    html_li_text(ol2, '\"c\" is the output of the \"+\" process');\n}\n","./public/src/lesson_console_log_analogy_paper.mjs":"import {html_img_limited_centered} from \"./html_img_limited_centered.mjs\";\nimport {html_hr} from \"./html_hr.mjs\";\nimport {html_strong_text} from \"./html_strong_text.mjs\";\nimport {html_li} from \"./html_li.mjs\";\nimport {html_ul} from \"./html_ul.mjs\";\nimport {html_span_text} from \"./html_span_text.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nexport function lesson_console_log_analogy_paper(parent) {\n    html_p_text(parent, 'suppose there is paper');\n    html_img_limited_centered(parent, 'paper.jpg');\n    html_p_text(parent, 'and suppose someone folds the paper into origami');\n    html_img_limited_centered(parent, 'paper_folding.jpg');\n    html_p_text(parent, 'then afterward there is folded paper origami');\n    html_img_limited_centered(parent, 'paper_folded.jpg');\n    html_hr(parent);\n    html_p_text(parent, 'we could say :');\n    let ol = html_ul(parent);\n    let li1 = html_li(ol);\n    html_span_text(li1, 'the folding of the paper into origami is a ');\n    html_strong_text(li1, 'process');\n    let li2 = html_li(ol);\n    html_span_text(li2, 'the unfolded paper is the ');\n    html_strong_text(li2, 'input');\n    html_span_text(li2, ' to the folding process');\n    let li3 = html_li(ol);\n    html_span_text(li3, 'the folded paper is the ');\n    html_strong_text(li3, 'output');\n    html_span_text(li3, ' of the folding process');\n}\n","./public/src/lesson_console_log_hierarchies.mjs":"import {html_style_bold} from \"./html_style_bold.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nexport async function lesson_console_log_hierarchies(parent) {\n    html_p_text(parent, 'in english , there are letters');\n    html_p_text(parent, 'words have letters');\n    html_p_text(parent, 'phrases have words');\n    html_p_text(parent, 'sentences have phrases');\n    html_p_text(parent, 'paragraphs have sentences');\n    html_p_text(parent, 'and so on');\n    html_style_alternate(parent, html_p, [noop, html_style_bold], ['this is a ', 'hierarchy']);\n    html_style_alternate(parent, html_p, [noop, html_style_bold], ['a hierarchy can also be called a ', 'tree']);\n    html_p_text(parent, 'trees are very important in computer programming');\n}\n","./public/src/lesson_console_log_javascript.mjs":"import {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_bold} from \"./html_style_bold.mjs\";\nexport function lesson_console_log_javascript(parent) {\n    html_style_alternate(parent, html_p, [noop, html_style_bold], ['we will be learning a computer programming language called ', 'javascript']);\n    html_style_alternate(parent, html_p, [noop, html_style_bold], ['in english , a sentence is analogous to a ', 'statement', ' in javascript']);\n    html_style_alternate(parent, html_p, [noop, html_style_monospace], ['at the end of a statement there should be a semicolon ( ', ';', ' )']);\n    html_style_alternate(parent, html_p, [noop, html_style_bold], ['in computer programming different symbols can be used as a ', 'separator', ' so that the computer can tell two things apart']);\n    html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript a semicolon ( ', ';', ' ) is a separator that separates statements from other statements']);\n}\n","./public/src/lesson_console_log_process_computer_program.mjs":"import {html_p_text} from \"./html_p_text.mjs\";\nexport function lesson_console_log_process_computer_program(parent) {\n    html_p_text(parent, 'a computer program may have inputs');\n    html_p_text(parent, 'a computer program may have outputs');\n    html_p_text(parent, 'a computer program does something&nbsp;, using any inputs and producing any outputs');\n    html_p_text(parent, 'we could say a computer program is a process that may have inputs and may have outputs');\n}\n","./public/src/lesson_console_log_process_named.mjs":"import {html_li_text} from \"./html_li_text.mjs\";\nimport {html_ul} from \"./html_ul.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {html_hr} from \"./html_hr.mjs\";\nexport function lesson_console_log_process_named(parent) {\n    html_p_text(parent, 'besides addition&nbsp;, there are other symbols / processes&nbsp;as well');\n    html_p_text(parent, 'for example , there is&nbsp;:');\n    let ol3 = html_ul(parent);\n    html_li_text(ol3, 'subtraction&nbsp;: 3 − 2 = 1');\n    html_li_text(ol3, 'multiplication&nbsp;: 3 × 2 = 6');\n    html_li_text(ol3, 'division&nbsp;: 6 ÷ 3 = 2');\n    html_hr(parent);\n    html_p_text(parent, 'instead of symbols ( + , − , × , ÷ ) , we can write the name of the process&nbsp;:');\n    let ol5 = html_ul(parent);\n    html_li_text(ol5, 'add(1, 2) = 3');\n    html_li_text(ol5, 'subtract(3, 2) = 1');\n    html_li_text(ol5, 'multiply(3, 2) = 6');\n    html_li_text(ol5, 'divide(6, 3) = 2');\n    html_p_text(parent, 'after the name of the process , we write a pair of parentheses like this : process_name()');\n    html_p_text(parent, 'inside the parentheses , we write any inputs to the process separated by commas like this : process_name(input1, input2)');\n    html_p_text(parent, 'notice that a comma ( , ) separates the inputs');\n}\n","./public/src/lesson_console_log_program_first.mjs":"import {app_learn_code_code} from \"./app_learn_code_code.mjs\";\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\nimport {html_style_bold} from \"./html_style_bold.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nexport function lesson_console_log_program_first(parent) {\n    html_style_alternate(parent, html_p, [noop, html_style_monospace], ['suppose there is a process named ', 'console.log']);\n    html_p_text(parent, 'then we can write : ');\n    app_learn_code_code_part_contrast(parent, 'console.log()');\n    html_p_text(parent, 'right now there are no inputs for this process , so there is nothing in between the parentheses');\n    html_style_alternate(parent, html_p, [noop, html_style_monospace], ['suppose there is a string ', '\\'hello\\'']);\n    html_style_alternate(parent, html_p, [noop, html_style_monospace], ['suppose the string ', '\\'hello\\'', ' is an input to the ', 'console.log', ' process']);\n    html_p_text(parent, 'then we can write : ');\n    app_learn_code_code_part_contrast(parent, 'console.log(\\'hello\\')');\n    html_p_text(parent, 'this is almost a finished computer program');\n    html_p_text(parent, 'to finish this computer program we should add a semicolon separator to the end');\n    html_p_text(parent, 'here is the finished computer program and the output of the computer program :');\n    html_style_alternate(parent, html_p, [noop, html_style_bold], ['( when a human writes a computer program&nbsp;, the human writes ', 'code', ' )']);\n    app_learn_code_code(parent, `console.log('hello');`);\n}\n","./public/src/lesson_console_log_quiz.mjs":"import {lesson_console_log_quiz_value} from \"./lesson_console_log_quiz_value.mjs\";\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\nexport function lesson_console_log_quiz() {\n    let value = lesson_console_log_quiz_value();\n    let code = app_learn_code_log(value);\n    return code;\n}\n","./public/src/lesson_console_log_quiz_value.mjs":"import {list_join} from \"./list_join.mjs\";\nimport {list_slice} from \"./list_slice.mjs\";\nimport {add} from \"./add.mjs\";\nimport {subtract} from \"./subtract.mjs\";\nimport {list_length} from \"./list_length.mjs\";\nimport {integer_random} from \"./integer_random.mjs\";\nimport {string_split_space} from \"./string_split_space.mjs\";\nimport {string_delimit} from \"./string_delimit.mjs\";\nexport function lesson_console_log_quiz_value() {\n    let sentence = 'for GOD so loved the world that HE gave HIS only SON that whoever believes in HIM shall not perish but have eternal life';\n    let words = string_split_space(sentence);\n    let word_count = integer_random(2, 4);\n    let length = list_length(words);\n    let high = subtract(length, word_count);\n    let index = integer_random(0, high);\n    let end = add(index, word_count);\n    let sliced = list_slice(words, index, end);\n    let message = list_join(sliced, ' ');\n    let value = string_delimit(message);\n    return value;\n}\n","./public/src/lesson_console_log_strings.mjs":"import {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {html_style_bold} from \"./html_style_bold.mjs\";\nexport function lesson_console_log_strings(parent) {\n    html_style_alternate(parent, html_p, [noop, html_style_bold], ['in javascript , text , like letters and symbols , is called a ', 'string']);\n    html_p_text(parent, 'here are some examples of strings :');\n    app_learn_code_code_part_contrast(parent, '\\'hello\\'');\n    app_learn_code_code_part_contrast(parent, '\\'strings can have spaces\\'');\n    app_learn_code_code_part_contrast(parent, '\\'strings can have numbers like 123\\'');\n    app_learn_code_code_part_contrast(parent, '\\'456\\'');\n    app_learn_code_code_part_contrast(parent, '\\'strings can have symbols : !@#$%^&*...\\'');\n    html_style_alternate(parent, html_p, [noop, html_style_monospace], ['notice that a string has a quote ( ', '\\'', ' ) at the beginning and another quote at the end']);\n}\n","./public/src/lesson_divide.mjs":"import {lesson_divide_numbers} from \"./lesson_divide_numbers.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nexport function lesson_divide() {\n    const example_message = 'dividing two numbers';\n    const description = 'division ( / )';\n    return lesson_simple(function () {\n        let {dividend, divisor} = lesson_divide_numbers();\n        return `console.log(${dividend} / ${divisor});`;\n    }, example_before, description, example_message, []);\n    function example_before(parent) {\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['one number can be divided by the other using the forward slash ( ', '/', ' ) symbol']);\n    }\n}\n","./public/src/lesson_divide_numbers.mjs":"import {integer_random} from \"./integer_random.mjs\";\nimport {multiply} from \"./multiply.mjs\";\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\nexport function lesson_divide_numbers() {\n    let a = integer_random_digit_single_positive();\n    let b = integer_random_digit_single_positive();\n    let dividend = multiply(a, b);\n    let divisor = multiply(a, integer_random(1, 2));\n    return {\n        dividend,\n        divisor\n    };\n}\n","./public/src/lesson_equal_not_number.mjs":"import {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nimport {random_50_50} from \"./random_50_50.mjs\";\nimport {html_ul} from \"./html_ul.mjs\";\nimport {html_li_text} from \"./html_li_text.mjs\";\nexport function lesson_equal_not_number() {\n    const description = 'not equal ( !== ) ( numbers )';\n    const example_message = 'outputting whether or not two numbers are not equal';\n    return lesson_simple(source_get, example_before, description, example_message, [screen_before1, screen_before2]);\n    function source_get() {\n        let a = integer_random_digit_single_positive();\n        let b;\n        if (random_50_50()) {\n            b = a;\n        } else {\n            b = integer_random_digit_single_positive();\n        }\n        return `console.log(${a} !== ${b});`;\n    }\n    function screen_before1(parent) {\n        html_p_text(parent, 'if \"a\" and \"b\" are numbers and a and b are different from each other , then we can write : a ≠ b');\n        html_p_text(parent, 'for example :');\n        let ul = html_ul(parent);\n        html_li_text(ul, '1 ≠ 2');\n        html_li_text(ul, '7 ≠ 5');\n        html_li_text(ul, '10 ≠ -10');\n        html_p_text(parent, 'either : a = b or a ≠ b');\n        html_p_text(parent, 'if \"a\" and \"b\" are not equal to each other then a ≠ b is true');\n        html_p_text(parent, '≠ is the opposite of =');\n    }\n    function screen_before2(parent) {\n        html_p_text(parent, 'if \"a\" and \"b\" are numbers , and \"a\" and \"b\" are are the same number then a ≠ b is false');\n        html_p_text(parent, 'for example :');\n        let ul = html_ul(parent);\n        html_li_text(ul, '8 ≠ 8 is false');\n        html_li_text(ul, '0 ≠ 0 is false');\n        html_li_text(ul, '2 ≠ 2 is false');\n    }\n    function example_before(parent) {\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript to check if two numbers are not equal , instead of using the not equal sign ( ', '≠', ' ) use this : ', '!==']);\n    }\n}\n","./public/src/lesson_equal_not_string.mjs":"import {lesson_simple} from \"./lesson_simple.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nimport {random_50_50} from \"./random_50_50.mjs\";\nimport {lesson_console_log_quiz_value} from \"./lesson_console_log_quiz_value.mjs\";\nexport function lesson_equal_not_string() {\n    const description = 'not equal ( !== ) ( strings )';\n    const example_message = 'outputting whether or not two strings are not equal';\n    return lesson_simple(source_get, example_before, description, example_message, []);\n    function source_get() {\n        let a = lesson_console_log_quiz_value();\n        let b;\n        if (random_50_50()) {\n            b = a;\n        } else {\n            b = lesson_console_log_quiz_value();\n        }\n        return `console.log(${a} !== ${b});`;\n    }\n    function example_before(parent) {\n        html_style_alternate(parent, html_p, [html_style_monospace, noop], ['!==', ' also checks whether or not two strings are not equal']);\n    }\n}\n","./public/src/lesson_equal_number.mjs":"import {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nimport {random_50_50} from \"./random_50_50.mjs\";\nimport {html_ul} from \"./html_ul.mjs\";\nimport {html_li_text} from \"./html_li_text.mjs\";\nexport function lesson_equal_number() {\n    const description = 'equal ( === ) ( numbers )';\n    const example_message = 'outputting whether or not two numbers are equal';\n    return lesson_simple(source_get, example_before, description, example_message, [screen_before1, screen_before2]);\n    function source_get() {\n        let a = integer_random_digit_single_positive();\n        let b;\n        if (random_50_50()) {\n            b = a;\n        } else {\n            b = integer_random_digit_single_positive();\n        }\n        return `console.log(${a} === ${b});`;\n    }\n    function screen_before1(parent) {\n        html_p_text(parent, 'if \"a\" and \"b\" are numbers and a and b are the same number , then we can write : a = b');\n        html_p_text(parent, 'for example :');\n        let ul = html_ul(parent);\n        html_li_text(ul, '1 = 1');\n        html_li_text(ul, '7 = 7');\n        html_li_text(ul, '10 = 10');\n        html_p_text(parent, 'either two numbers are equal to each other , or they are not equal to each other');\n        html_p_text(parent, 'if \"a\" and \"b\" are equal to each other then a = b is true');\n    }\n    function screen_before2(parent) {\n        html_p_text(parent, 'if \"a\" and \"b\" are numbers , and \"a\" and \"b\" are different from each other then a = b is false');\n        html_p_text(parent, 'for example :');\n        let ul = html_ul(parent);\n        html_li_text(ul, '8 = 9 is false');\n        html_li_text(ul, '0 = -4 is false');\n        html_li_text(ul, '2.0 = 2.1 is false');\n        html_li_text(ul, '6 = -6 is false');\n    }\n    function example_before(parent) {\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript to check if two numbers are equal or not , instead of using one equal sign ( ', '=', ' ) use three equal signs ( ', '===', ' )']);\n    }\n}\n","./public/src/lesson_equal_string.mjs":"import {lesson_simple} from \"./lesson_simple.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nimport {random_50_50} from \"./random_50_50.mjs\";\nimport {lesson_console_log_quiz_value} from \"./lesson_console_log_quiz_value.mjs\";\nexport function lesson_equal_string() {\n    const description = 'equal ( === ) ( strings )';\n    const example_message = 'outputting whether or not two strings are equal';\n    return lesson_simple(source_get, example_before, description, example_message, []);\n    function source_get() {\n        let a = lesson_console_log_quiz_value();\n        let b;\n        if (random_50_50()) {\n            b = a;\n        } else {\n            b = lesson_console_log_quiz_value();\n        }\n        return `console.log(${a} === ${b});`;\n    }\n    function example_before(parent) {\n        html_style_alternate(parent, html_p, [html_style_monospace, noop], ['===', ' also checks if two strings are the same or not']);\n    }\n}\n","./public/src/lesson_greater_than.mjs":"import {lesson_comparisons_source_get_get} from \"./lesson_comparisons_source_get_get.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_bold} from \"./html_style_bold.mjs\";\nimport {html_ul} from \"./html_ul.mjs\";\nimport {html_li_text} from \"./html_li_text.mjs\";\nexport function lesson_greater_than() {\n    const description = 'greater than ( > )';\n    const example_message = 'outputting whether or not a number is greater than another number';\n    return lesson_simple(lesson_comparisons_source_get_get('>'), example_before, description, example_message, [screen_before1]);\n    function screen_before1(parent) {\n        html_style_alternate(parent, html_p, [noop, html_style_bold], ['if \"a\" and \"b\" are numbers and \"a\" is less than \"b\" then \"b\" is ', 'greater than', ' \"a\"']);\n        html_p_text(parent, 'like less than , if \"a\" and \"b\" are equal to each other , then \"a\" is not greater than \"b\"');\n        html_p_text(parent, 'we can write \"a\" is greater than \"b\" as : a > b');\n        html_p_text(parent, 'here are some examples :');\n        let ul = html_ul(parent);\n        html_li_text(ul, '6 > 4 is true');\n        html_li_text(ul, '3 > 5 is false');\n        html_li_text(ul, '2 > 2 is false');\n    }\n    function example_before(parent) {}\n}\n","./public/src/lesson_greater_than_equal.mjs":"import {lesson_comparisons_source_get_get} from \"./lesson_comparisons_source_get_get.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nimport {html_ul} from \"./html_ul.mjs\";\nimport {html_li_text} from \"./html_li_text.mjs\";\nexport function lesson_greater_than_equal() {\n    const description = 'greater than or equal to ( >= )';\n    const example_message = 'outputting whether or not a number is greater than or equal to another number';\n    return lesson_simple(lesson_comparisons_source_get_get('<='), example_before, description, example_message, [screen_before1]);\n    function screen_before1(parent) {\n        html_p_text(parent, 'as \"less than or equal to\" ( ≤ ) was for \"less than\" ( < ) so \"greater than or equal to\" ( ≥ ) is for \"greater than\" ( > )');\n        html_p_text(parent, 'if a > b then a ≥ b');\n        html_p_text(parent, 'if a = b then a ≥ b');\n        html_p_text(parent, 'here are some examples :');\n        let ul1 = html_ul(parent);\n        html_li_text(ul1, '3 ≥ 5 is false');\n        html_li_text(ul1, '6 ≥ 4 is true');\n        html_li_text(ul1, '2 ≥ 2 is true');\n    }\n    function example_before(parent) {\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript a ≥ b is written as : ', 'a >= b']);\n    }\n}\n","./public/src/lesson_if_binary.mjs":"import {app_learn_code_random_boolean_binary} from \"./app_learn_code_random_boolean_binary.mjs\";\nimport {list_join} from \"./list_join.mjs\";\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nimport {lesson_console_log_quiz} from \"./lesson_console_log_quiz.mjs\";\nexport function lesson_if_binary() {\n    let description = 'if with a process';\n    let example_message = string_combine('with an ', description);\n    return lesson_simple(function () {\n        let boolean = app_learn_code_random_boolean_binary();\n        let statements = [lesson_console_log_quiz(), `if (${boolean}) {\n${lesson_console_log_quiz()}\n}`, lesson_console_log_quiz()];\n        return list_join(statements, '\\n');\n    }, example_before, description, example_message, [screen2]);\n    function example_before() {}\n    function screen2(parent) {\n        html_style_alternate_monospace(parent, ['inside the parenthesis of an ', 'if', ' can be more than just ', 'true', ' and ', 'false']);\n        html_style_alternate_monospace(parent, ['remember ', '<', ' , ', '<=', ' , ', '>', ' , ', '>=', ' , ', '===', ' and ', '!==', ' all return ', 'true', ' or ', 'false']);\n        html_style_alternate_monospace(parent, ['therefore inside the parenthesis of an ', 'if', ' could be one of those']);\n    }\n}\n","./public/src/lesson_if_else.mjs":"import {list_join_newline} from \"./list_join_newline.mjs\";\nimport {app_learn_code_random_boolean_binary} from \"./app_learn_code_random_boolean_binary.mjs\";\nimport {app_learn_code_unique_multiple} from \"./app_learn_code_unique_multiple.mjs\";\nimport {html_style_alternate_bold} from \"./html_style_alternate_bold.mjs\";\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\nimport {app_learn_code_random_value} from \"./app_learn_code_random_value.mjs\";\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nimport {list_map} from \"./list_map.mjs\";\nimport { lesson_console_log_quiz_value } from \"./lesson_console_log_quiz_value.mjs\";\nexport function lesson_if_else() {\n    let description = 'if with else';\n    let example_message = string_combine('with an ', description);\n    return lesson_simple(function () {\n        let boolean = app_learn_code_random_boolean_binary();\n        let values = app_learn_code_unique_multiple(lesson_console_log_quiz_value, 2);\n        let mapped = list_map(values, app_learn_code_log);\n        let [a, b] = mapped;\n        let lines = [`if (${boolean}) {`, a, `} else {`, b, `}`];\n        return list_join_newline(lines);\n    }, example_before, description, example_message, [screen1, screen2, screen3]);\n    function example_before(parent) {}\n    function screen1(parent) {\n        html_style_alternate_monospace(parent, ['in javascript , code in between a ', '/*', ' and a ', '*/', ' is ignored']);\n        html_style_alternate_bold(parent, ['this is called a ', 'comment']);\n        html_p_text(parent, 'comments are for humans and code is for computers');\n        html_p_text(parent, 'here is an example comment :');\n        app_learn_code_code_part_contrast(parent, '/* console.log(0); */');\n        html_style_alternate_monospace(parent, ['even though it says ', 'console.log(0);', ' that will not get ran because it is inside of a comment']);\n    }\n    function screen2(parent) {\n        html_style_alternate_monospace(parent, ['another way to write a comment is to use ', '//']);\n        html_style_alternate_monospace(parent, ['', '//', ' begins a comment and the comment continues until the end of the current line']);\n        html_style_alternate_monospace(parent, ['here is an example ', '//', ' comment :']);\n        app_learn_code_code_part_contrast(parent, 'let a; // a is the first letter of the alphabet');\n    }\n    function screen3(parent) {\n        html_style_alternate_monospace(parent, ['in programming , sometimes there is need to code : if \"a\" is ', 'true', ' , then do \"b\" , otherwise , if \"a\" is ', 'false', ' , then do \"c\"']);\n        html_p_text(parent, 'in other words , choose between \"b\" and \"c\" , depending on the value of \"a\"');\n        html_style_alternate_monospace(parent, ['the code to represent that uses ', 'else', ' :']);\n        app_learn_code_code_part_contrast(parent, list_join_newline(['if (a) {', '// b', '} else {', '// c', '}']));\n    }\n}\n","./public/src/lesson_if_else_if.mjs":"import {app_learn_code_log_delimit} from \"./app_learn_code_log_delimit.mjs\";\nimport {list_join_newline} from \"./list_join_newline.mjs\";\nimport {js_code_statement_let_assign} from \"./js_code_statement_let_assign.mjs\";\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {random_50_50} from \"./random_50_50.mjs\";\nimport {integer_random_digit_single} from \"./integer_random_digit_single.mjs\";\nimport {html_hr} from \"./html_hr.mjs\";\nexport function lesson_if_else_if() {\n    let description = 'if with else if';\n    let example_message = 'outputting whether or not a number is positive , negative or zero';\n    return lesson_simple(function () {\n        let a;\n        if (random_50_50()) {\n            a = 0;\n        } else {\n            a = integer_random_digit_single();\n        }\n        let lines = [js_code_statement_let_assign('n', a), `if (n > 0) {`, app_learn_code_log_delimit('number is positive'), `} else if (n < 0) {`, app_learn_code_log_delimit('number is negative'), `} else {`, app_learn_code_log_delimit('number is zero'), `}`];\n        return list_join_newline(lines);\n    }, example_before, description, example_message, [screen1, screen2]);\n    function example_before(parent) {\n        html_p_text(parent, 'in this lesson , the code will first check whether or not the number is positive');\n        html_p_text(parent, 'if the number is not positive , then the code will check whether or not the number is negative');\n        html_hr(parent);\n    }\n    function screen1(parent) {\n        html_p_text(parent, 'the number zero is not positive');\n        html_p_text(parent, 'the number zero is not negative');\n        html_p_text(parent, 'if a number is not positive and the number is not negative , then the number must be zero');\n        html_p_text(parent, 'a number is either positive , negative or zero');\n    }\n    function screen2(parent) {\n        html_p_text(parent, 'a number is either positive , or is it not positive , so \"positive\" and \"not positive\" are two choices');\n        html_style_alternate_monospace(parent, ['if there are two choices , then one ', 'if', ' ', 'else', ' can be used']);\n        html_p_text(parent, 'this lesson will check a number to be either \"positive\" , \"negative\" or \"zero\"');\n        html_p_text(parent, '\"positive\" , \"negative\" and \"zero\" are three choices');\n        html_style_alternate_monospace(parent, ['if there are three choices , then two ', 'if', ' ', 'else', ' can be used , as will be shown later in this lesson']);\n    }\n}\n","./public/src/lesson_if_else_negative.mjs":"import {app_learn_code_log_delimit} from \"./app_learn_code_log_delimit.mjs\";\nimport {list_join_newline} from \"./list_join_newline.mjs\";\nimport {html_style_alternate_bold} from \"./html_style_alternate_bold.mjs\";\nimport {js_code_statement_let_assign} from \"./js_code_statement_let_assign.mjs\";\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {integer_random} from \"./integer_random.mjs\";\nimport {integer_random_digit_single} from \"./integer_random_digit_single.mjs\";\nimport {html_hr} from \"./html_hr.mjs\";\nexport function lesson_if_else_negative() {\n    let category = 'negative';\n    let description = `if with else about ${category} or not`;\n    let example_message = `outputting whether or not a number is ${category}`;\n    return lesson_simple(function () {\n        let a = integer_random_digit_single();\n        if (integer_random(1, 3) === 1) {\n            a = 0;\n        }\n        let lines = [js_code_statement_let_assign('n', a), js_code_statement_let_assign(`is_${category}`, `n < 0`), `if (is_${category}) {`, app_learn_code_log_delimit(`number is ${category}`), `} else {`, app_learn_code_log_delimit(`number is not ${category}`), `}`];\n        return list_join_newline(lines);\n    }, example_before, description, example_message, []);\n    function example_before(parent) {\n        html_style_alternate_bold(parent, ['a number is ', 'negative', ' if the number is less than zero']);\n        html_style_alternate_monospace(parent, ['', 'if', ' and ', 'else', ` can be used to output whether or not a number is ${category}`]);\n        html_hr(parent);\n    }\n}\n","./public/src/lesson_if_else_positive.mjs":"import {app_learn_code_log_delimit} from \"./app_learn_code_log_delimit.mjs\";\nimport {list_join_newline} from \"./list_join_newline.mjs\";\nimport {html_style_alternate_bold} from \"./html_style_alternate_bold.mjs\";\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {integer_random} from \"./integer_random.mjs\";\nimport {integer_random_digit_single} from \"./integer_random_digit_single.mjs\";\nimport {html_hr} from \"./html_hr.mjs\";\nexport function lesson_if_else_positive() {\n    let category = 'positive';\n    let description = `if with else about ${category} or not`;\n    let example_message = `outputting whether or not a number is ${category}`;\n    return lesson_simple(function () {\n        let a = integer_random_digit_single();\n        if (integer_random(1, 3) === 1) {\n            a = 0;\n        }\n        let lines = [`let is_positive = ${a} > 0;`, `if (is_positive) {`, app_learn_code_log_delimit(`number is ${category}`), `} else {`, app_learn_code_log_delimit(`number is not ${category}`), `}`];\n        return list_join_newline(lines);\n    }, example_before, description, example_message, []);\n    function example_before(parent) {\n        html_style_alternate_bold(parent, ['a number is ', 'positive', ' if the number is greater than zero']);\n        'a number is negative if the number is less than zero';\n        'if a number is neither positive nor negative , the number must be 0';\n        html_style_alternate_monospace(parent, ['', 'if', ' and ', 'else', ` can be used to output whether or not a number is ${category}`]);\n        html_hr(parent);\n    }\n}\n","./public/src/lesson_if_else_zero.mjs":"import {app_learn_code_log_delimit} from \"./app_learn_code_log_delimit.mjs\";\nimport {list_join_newline} from \"./list_join_newline.mjs\";\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {random_50_50} from \"./random_50_50.mjs\";\nimport {integer_random_digit_single} from \"./integer_random_digit_single.mjs\";\nexport function lesson_if_else_zero() {\n    let description = 'if with else about zero or not';\n    let example_message = 'outputting whether or not a number is zero';\n    return lesson_simple(function () {\n        let a;\n        if (random_50_50()) {\n            a = 0;\n        } else {\n            a = integer_random_digit_single();\n        }\n        let lines = [`if (${a} === 0) {`, app_learn_code_log_delimit('number is zero'), `} else {`, app_learn_code_log_delimit('number is not zero'), `}`];\n        return list_join_newline(lines);\n    }, example_before, description, example_message, []);\n    function example_before(parent) {\n        html_style_alternate_monospace(parent, ['', 'if', ' and ', 'else', ' can be used to output whether or not a number is ', '0']);\n    }\n}\n","./public/src/lesson_if_false.mjs":"import {list_join} from \"./list_join.mjs\";\nimport {app_learn_code_log_random_value} from \"./app_learn_code_log_random_value.mjs\";\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {html_hr} from \"./html_hr.mjs\";\nexport function lesson_if_false() {\n    let description = 'if with false';\n    let example_message = 'with an if with false passed in';\n    return lesson_simple(function () {\n        let statements = [app_learn_code_log_random_value(), `if (false) {\n${app_learn_code_log_random_value()}\n}`, app_learn_code_log_random_value()];\n        return list_join(statements, '\\n');\n    }, example_before, description, example_message, []);\n    function example_before(parent) {\n        html_style_alternate_monospace(parent, ['if there is an ', 'if', ' and what is in between the parentheses results in ', 'false', ' , the code in between the braces will not be ran']);\n        html_hr(parent);\n        html_style_alternate_monospace(parent, ['in the example below , ', 'false', ' is in between the parentheses of the ', 'if']);\n        html_style_alternate_monospace(parent, ['therefore what is inside the braces of the ', 'if', ' is not ran']);\n        html_style_alternate_monospace(parent, ['therefore the ', 'console.log();', ' statement inside the ', 'if', ' braces is not ran']);\n        html_style_alternate_monospace(parent, ['therefore only ', 'console.log();', ' statements before and after the ', 'if', ' braces are ran']);\n        html_hr(parent);\n    }\n}\n","./public/src/lesson_if_true.mjs":"import {app_learn_code_log_random_value} from \"./app_learn_code_log_random_value.mjs\";\nimport {html_img_limited_centered} from \"./html_img_limited_centered.mjs\";\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_bold} from \"./html_style_bold.mjs\";\nimport {html_hr} from \"./html_hr.mjs\";\nimport {app_learn_code_style_code_colored} from \"./app_learn_code_style_code_colored.mjs\";\nimport {list_join} from \"./list_join.mjs\";\nexport function lesson_if_true() {\n    let description = 'if with true';\n    let example_message = 'with an if with true passed in';\n    return lesson_simple(function () {\n        let statements = [app_learn_code_log_random_value(), `if (true) {\n${app_learn_code_log_random_value()}\n}`, app_learn_code_log_random_value()];\n        return list_join(statements, '\\n');\n    }, example_before, description, example_message, [screen1, screen2, screen3]);\n    function example_before(parent) {\n        html_style_alternate_monospace(parent, ['in the example below , ', 'true', ' is in between the parentheses of the ', 'if']);\n        html_style_alternate_monospace(parent, ['therefore what is inside the braces of the ', 'if', ' is ran']);\n        html_style_alternate_monospace(parent, ['therefore all three ', 'console.log();', ' statements are ran']);\n        html_hr(parent);\n    }\n    function screen1(parent) {\n        html_p_text(parent, 'a pen may be used for writing');\n        html_img_limited_centered(parent, 'pen.jpg');\n        html_p_text(parent, 'a pencil may also be used for writing');\n        html_img_limited_centered(parent, 'pencil.jpg');\n        html_p_text(parent, 'an eraser can erase pencil writing');\n        html_img_limited_centered(parent, 'pencil_eraser.jpg');\n        html_p_text(parent, 'bowever , an eraser cannot erase pen writing');\n        html_hr(parent);\n        html_p_text(parent, 'if someone needs to erase , they should use a pencil');\n        html_p_text(parent, 'otherwise they are free to use a pen');\n    }\n    function screen2(parent) {\n        html_style_alternate_monospace(parent, ['in programming , sometimes there is need to code : if \"a\" is ', 'true', ' , then do \"b\"']);\n        html_style_alternate_monospace(parent, ['\"b\" is something that should happen only if \"a\" is ', 'true']);\n    }\n    function screen3(parent) {\n        html_p_text(parent, 'below is some code that could represent using a pencil if an eraser is needed :');\n        app_learn_code_code_part_contrast(parent, `let need_eraser = true;\nlet use_pencil = false;\nif (need_eraser) {\nuse_pencil = true;\n}`);\n        html_hr(parent);\n        html_style_alternate_monospace(parent, ['after the ', 'if', ' there should be a pair of parentheses : ', '(', ' ', ')']);\n        html_style_alternate_monospace(parent, ['for now , in between the parentheses there should be something that results in either ', 'true', ' or ', 'false']);\n        html_style_alternate_monospace(parent, ['javascript allows other values besides ', 'true', ' and ', 'false', ' in between the parentheses of an ', 'if']);\n        html_p_text(parent, 'however , that will not be covered at this time');\n        html_style_alternate(parent, html_p, [noop, html_style_bold, noop, app_learn_code_style_code_colored, noop, app_learn_code_style_code_colored], ['after the parenthesis should be a pair of ', 'braces', ' : ', '{', ' ', '}']);\n        html_style_alternate_monospace(parent, ['in between the braces should be the code that should be ran if what is in between the parenthesis is ', 'true']);\n    }\n}\n","./public/src/lesson_if_variable.mjs":"import {app_learn_code_random_boolean_binary} from \"./app_learn_code_random_boolean_binary.mjs\";\nimport {list_join} from \"./list_join.mjs\";\nimport {js_code_statement_let_assign} from \"./js_code_statement_let_assign.mjs\";\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\nimport {app_learn_code_random_identifier} from \"./app_learn_code_random_identifier.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {lesson_console_log_quiz} from \"./lesson_console_log_quiz.mjs\";\nexport function lesson_if_variable() {\n    let description = 'if with a variable';\n    let example_message = description;\n    return lesson_simple(function () {\n        let boolean = app_learn_code_random_boolean_binary();\n        let name = app_learn_code_random_identifier();\n        let statements = [js_code_statement_let_assign(name, boolean), lesson_console_log_quiz(), `if (${name}) {\n${lesson_console_log_quiz()}\n}`, lesson_console_log_quiz()];\n        return list_join(statements, '\\n');\n    }, example_before, description, example_message, []);\n    function example_before(parent) {\n        html_style_alternate_monospace(parent, ['inside the parenthesis of an ', 'if', ' could also be a variable']);\n    }\n}\n","./public/src/lesson_less_than.mjs":"import {lesson_comparisons_source_get_get} from \"./lesson_comparisons_source_get_get.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_bold} from \"./html_style_bold.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nimport {html_ul} from \"./html_ul.mjs\";\nimport {html_li_text} from \"./html_li_text.mjs\";\nexport function lesson_less_than() {\n    const description = 'less than ( < )';\n    const example_message = 'outputting whether or not a number is less than another number';\n    return lesson_simple(lesson_comparisons_source_get_get('<'), example_before, description, example_message, [screen_before1, screen_before2, screen_before3]);\n    function screen_before1(parent) {\n        html_p_text(parent, 'if \"a\" and \"b\" are numbers , then either \"a\" is less than \"b\" or \"a\" is not less than \"b\"');\n        html_p_text(parent, 'we can write \"a\" is less than \"b\" as : a < b');\n        html_p_text(parent, 'either a < b is true or a < b is false');\n        html_p_text(parent, 'for example :');\n        let ul = html_ul(parent);\n        html_li_text(ul, '1 < 2 is true');\n        html_li_text(ul, '3 < 5 is true');\n        html_li_text(ul, '6 < 4 is false');\n        html_li_text(ul, '7 < 0 is false');\n    }\n    function screen_before2(parent) {\n        html_p_text(parent, 'if \"a\" and \"b\" are equal to each other , then \"a\" is not less than \"b\"');\n        html_p_text(parent, 'for example :');\n        let ul = html_ul(parent);\n        html_li_text(ul, '8 < 8 is false');\n        html_li_text(ul, '0 < 0 is false');\n        html_li_text(ul, '-2 < -2 is false');\n    }\n    function screen_before3(parent) {\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript , to check if a number is less than another number or not , use the less than ( ', '<', ' ) sign']);\n        html_style_alternate(parent, html_p, [html_style_monospace, noop], ['1', ' , ', '2', ' and ', '3', ' are numbers']);\n        html_style_alternate(parent, html_p, [html_style_monospace, noop], ['\\'JESUS\\'', ' , ', '\\'is\\'', ' and ', '\\'LORD\\'', ' are strings']);\n        html_style_alternate(parent, html_p, [html_style_monospace, noop, html_style_monospace, noop, html_style_bold], ['true', ' and ', 'false', ' are ', 'boolean']);\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['just as javascript has strings and numbers , javascript also has boolean ', 'true', ' and ', 'false']);\n    }\n    function example_before(parent) {}\n}\n","./public/src/lesson_less_than_equal.mjs":"import {lesson_comparisons_source_get_get} from \"./lesson_comparisons_source_get_get.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nimport {html_ul} from \"./html_ul.mjs\";\nimport {html_li_text} from \"./html_li_text.mjs\";\nexport function lesson_less_than_equal() {\n    const description = 'less than or equal to ( <= )';\n    const example_message = 'outputting whether or not a number is less than or equal to another number';\n    return lesson_simple(lesson_comparisons_source_get_get('<='), example_before, description, example_message, [screen_before1, screen_before2]);\n    function screen_before1(parent) {\n        html_p_text(parent, '\"less than or equal to\" ( ≤ ) is almost the same as \"less than\" ( < )');\n        html_p_text(parent, 'the only difference is when the two numbers being compared are the same');\n        html_p_text(parent, 'if \"a\" and \"b\" are equal then \"a\" is less than or equal to \"b\"');\n        html_p_text(parent, 'whereas if \"a\" and \"b\" are equal then \"a\" is not less than \"b\"');\n    }\n    function screen_before2(parent) {\n        html_p_text(parent, 'if a < b then a ≤ b');\n        html_p_text(parent, 'if a = b then a ≤ b');\n        html_p_text(parent, 'here are some examples :');\n        let ul1 = html_ul(parent);\n        html_li_text(ul1, '3 ≤ 5 is true');\n        html_li_text(ul1, '6 ≤ 4 is false');\n        html_li_text(ul1, '2 ≤ 2 is true');\n    }\n    function example_before(parent) {\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript a ≤ b is written as : ', 'a <= b']);\n    }\n}\n","./public/src/lesson_log_boolean.mjs":"import {html_style_monospace} from \"./html_style_monospace.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {random_50_50} from \"./random_50_50.mjs\";\nexport function lesson_log_boolean() {\n    let example_message = 'outputting a boolean to the console';\n    let description = example_message;\n    return lesson_simple(function () {\n        return `console.log(${random_50_50()});\nconsole.log(${random_50_50()});`;\n    }, example_before, description, example_message, []);\n    function example_before(parent) {\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['boolean ', 'true', ' and ', 'false', ' can be used in code :']);\n    }\n}\n","./public/src/lesson_log_number.mjs":"import {lesson_add_quiz} from \"./lesson_add_quiz.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {lesson_log_number_explain} from \"./lesson_log_number_explain.mjs\";\nexport function lesson_log_number() {\n    let example_message = 'outputting a number to the console';\n    let description = example_message;\n    return lesson_simple(lesson_add_quiz, example_before, description, example_message, [lesson_log_number_explain]);\n    function example_before(parent) {}\n}\n","./public/src/lesson_log_number_example.mjs":"import {app_learn_code_code} from \"./app_learn_code_code.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nimport {html_button_width_full_text_click} from \"./html_button_width_full_text_click.mjs\";\nimport {html_clear} from \"./html_clear.mjs\";\nimport {html_div} from \"./html_div.mjs\";\nimport {app_learn_code_range_retry} from \"./app_learn_code_range_retry.mjs\";\nimport {equal_not} from \"./equal_not.mjs\";\nexport function lesson_log_number_example(source_get, message, before) {\n    return parent => {\n        let previous;\n        let div = html_div(parent);\n        refresh();\n        function refresh() {\n            html_clear(div);\n            before(div);\n            html_p_text(div, string_combine('below is an example computer program ', message));\n            html_p_text(div, 'if you want to see another example , press the \"another example\" button below');\n            let source;\n            for (let i of app_learn_code_range_retry()) {\n                source = source_get();\n                if (equal_not(source, previous)) {\n                    break;\n                }\n            }\n            previous = source;\n            app_learn_code_code(div, source);\n            html_button_width_full_text_click(div, 'another example', refresh);\n        }\n    };\n}\n","./public/src/lesson_log_number_explain.mjs":"import {html_style_monospace} from \"./html_style_monospace.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\nexport function lesson_log_number_explain(parent) {\n    html_style_alternate(parent, html_p, [noop, html_style_monospace], ['remember , strings need quotes ( ', '\\'', ' ) :']);\n    app_learn_code_code_part_contrast(parent, '\\'text\\'');\n    html_p_text(parent, 'however , numbers do not need quotes :');\n    app_learn_code_code_part_contrast(parent, '0');\n    app_learn_code_code_part_contrast(parent, '12');\n    app_learn_code_code_part_contrast(parent, '345');\n    html_p_text(parent, 'sometimes people write numbers with commas separating the digits , like 1,000 and 23,467,890');\n    html_p_text(parent, 'in javascript numbers are not written with commas :');\n    app_learn_code_code_part_contrast(parent, '1000');\n    app_learn_code_code_part_contrast(parent, '23467890');\n    html_p_text(parent, 'numbers can have a negative sign :');\n    app_learn_code_code_part_contrast(parent, '-6');\n    app_learn_code_code_part_contrast(parent, '-7890');\n    html_p_text(parent, 'numbers can have a decimal point :');\n    app_learn_code_code_part_contrast(parent, '6.7');\n    app_learn_code_code_part_contrast(parent, '8901.23');\n}\n","./public/src/lesson_log_number_quiz.mjs":"import {lesson_log_number_quiz_value} from \"./lesson_log_number_quiz_value.mjs\";\nexport function lesson_log_number_quiz() {\n    let value = lesson_log_number_quiz_value();\n    return `console.log(${value});`;\n}\n","./public/src/lesson_log_number_quiz_value.mjs":"import {list_random_item} from \"./list_random_item.mjs\";\nimport {random_50_50} from \"./random_50_50.mjs\";\nimport {integer_random} from \"./integer_random.mjs\";\nexport function lesson_log_number_quiz_value() {\n    let value = integer_random(0, 999999);\n    if (random_50_50()) {\n        value = value / list_random_item([10, 100, 1000]);\n    }\n    if (random_50_50()) {\n        value = value * -1;\n    }\n    return value;\n}\n","./public/src/lesson_mod.mjs":"import {mod} from \"./mod.mjs\";\nimport {floor} from \"./floor.mjs\";\nimport {list_join_newline} from \"./list_join_newline.mjs\";\nimport {html_style_alternate_bold} from \"./html_style_alternate_bold.mjs\";\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\nimport {html_li_text} from \"./html_li_text.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {integer_random_digit_single} from \"./integer_random_digit_single.mjs\";\nimport {html_ul} from \"./html_ul.mjs\";\nimport {html_hr} from \"./html_hr.mjs\";\nimport {range} from \"./range.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nimport {html_element} from \"./html_element.mjs\";\nimport {html_inner_set} from \"./html_inner_set.mjs\";\nimport {html_style_width_full} from \"./html_style_width_full.mjs\";\nimport {html_style_centered} from \"./html_style_centered.mjs\";\nimport {app_learn_code_style_rounded_padded} from \"./app_learn_code_style_rounded_padded.mjs\";\nimport {list_index_last} from \"./list_index_last.mjs\";\nimport {html_style_background_color} from \"./html_style_background_color.mjs\";\nimport {each_index} from \"./each_index.mjs\";\nimport { integer_random_digit_single_positive } from \"./integer_random_digit_single_positive.mjs\";\nexport function lesson_mod() {\n    let description = 'remainder ( % ) 2';\n    let example_message = 'outputting the remainder of a number with a divisor of 2';\n    return lesson_simple(function () {\n        let a = integer_random_digit_single_positive();\n        let lines = [app_learn_code_log(`${a} % 2`)];\n        return list_join_newline(lines);\n    }, example_before, description, example_message, [screen1, screen2, screen3]);\n    function example_before(parent) {\n        html_style_alternate_monospace(parent, ['in javascript , to get the remainder of ', 'dividend', ' use ', '%', ' like this : ', 'dividend % divisor']);\n    }\n    function screen1(parent) {\n        html_p_text(parent, 'here is an example of division in math : a / b');\n        html_style_alternate_bold(parent, ['when a number ( like \"a\" ) is divided by another number ( like \"b\" ) , the first number is called the ', 'dividend']);\n        html_style_alternate_bold(parent, ['the second number is called the ', 'divisor']);\n        html_p_text(parent, 'for example in 7 / 4 the dividend is 7 and the divisor is 4');\n    }\n    function screen2(parent) {\n        html_p_text(parent, 'after the divisor divides the dividend , there is a quotient and a remainder');\n        html_p_text(parent, 'the following formula will give the answer to the division with a decimal point :');\n        html_p_text(parent, 'quotient + ( remainder / divisor )');\n        html_p_text(parent, 'for example 7 / 4 has a quotient of 1 and a remainder of 3');\n        html_p_text(parent, '1 + ( 3 / 4 ) = 1 + 0.75 = 1.75');\n    }\n    function screen3(parent) {\n        let divisor = 2;\n        html_p_text(parent, string_combine('in the table below are some quotient and remainders for a divisor of ', divisor));\n        html_p_text(parent, 'pay attention to the remainder');\n        html_p_text(parent, 'here is what the letters mean :');\n        let ul = html_ul(parent);\n        html_li_text(ul, 'a is the dividend');\n        html_li_text(ul, 'b is the divisor');\n        html_li_text(ul, 'q is the quotient');\n        html_li_text(ul, 'r is the remainder');\n        let table = html_element(parent, 'table');\n        html_style_width_full(table);\n        let thead = html_element(table, 'thead');\n        let tr_head = html_element(thead, 'tr');\n        let columns_head = ['a', 'b', 'a / b', 'q', 'r'];\n        each_index(columns_head, (c, c_index) => {\n            let th = html_element(tr_head, 'th');\n            html_inner_set(th, c);\n            let index_last = list_index_last(columns_head);\n            app_learn_code_style_rounded_padded(th);\n            let color;\n            if (equal(c_index, index_last)) {\n                color = '#FFEB3B';\n            } else {\n                color = '#29B6F6';\n            }\n            html_style_background_color(th, color);\n        });\n        let tbody = html_element(table, 'tbody');\n        each_index(range(11), (n, n_index) => {\n            let even = equal(mod(n_index, divisor), 0);\n            let tr_body = html_element(tbody, 'tr');\n            let quotient = n / divisor;\n            let columns_body = [n, divisor, quotient, floor(quotient), n % divisor];\n            let index_last = list_index_last(columns_body);\n            each_index(columns_body, (c, c_index) => {\n                let divisor = 2;\n                let td = html_element(tr_body, 'td');\n                html_inner_set(td, c);\n                html_style_centered(td);\n                app_learn_code_style_rounded_padded(td);\n                let color;\n                if (equal(c_index, index_last)) {\n                    color = even ? '#F9E79F' : '#F7DC6F';\n                } else {\n                    color = even ? '#D6EAF8' : '#AED6F1';\n                }\n                html_style_background_color(td, color);\n            });\n        });\n        html_hr(parent);\n        html_p_text(parent, 'did you notice how the remainder alternates between 0 and 1 ?');\n        html_p_text(parent, 'did you notice that when the number is even the remainder is 0 ?');\n        html_p_text(parent, 'did you notice that when the number is odd the remainder is 1 ?');\n        html_p_text(parent, 'the remainder can be used to check whether a number is even or odd');\n    }\n    function screen1(parent) {\n        html_p_text(parent, 'here is an example of division in math : a / b');\n        html_style_alternate_bold(parent, ['when a number ( like \"a\" ) is divided by another number ( like \"b\" ) , the first number is called the ', 'dividend']);\n        html_style_alternate_bold(parent, ['the second number is called the ', 'divisor']);\n        html_p_text(parent, 'for example in 7 / 4 the dividend is 7 and the divisor is 4');\n    }\n    function screen2(parent) {\n        html_p_text(parent, 'after the divisor divides the dividend , there is a quotient and a remainder');\n        html_p_text(parent, 'the following formula will give the answer to the division with a decimal point :');\n        html_p_text(parent, 'quotient + ( remainder / divisor )');\n        html_p_text(parent, 'for example 7 / 4 has a quotient of 1 and a remainder of 3');\n        html_p_text(parent, '1 + ( 3 / 4 ) = 1 + 0.75 = 1.75');\n    }\n    function screen3(parent) {\n        let divisor = 2;\n        html_p_text(parent, string_combine('in the table below are some quotient and remainders for a divisor of ', divisor));\n        html_p_text(parent, 'pay attention to the remainder');\n        html_p_text(parent, 'here is what the letters mean :');\n        let ul = html_ul(parent);\n        html_li_text(ul, 'a is the dividend');\n        html_li_text(ul, 'b is the divisor');\n        html_li_text(ul, 'q is the quotient');\n        html_li_text(ul, 'r is the remainder');\n        let table = html_element(parent, 'table');\n        html_style_width_full(table);\n        let thead = html_element(table, 'thead');\n        let tr_head = html_element(thead, 'tr');\n        let columns_head = ['a', 'b', 'a / b', 'q', 'r'];\n        each_index(columns_head, (c, c_index) => {\n            let th = html_element(tr_head, 'th');\n            html_inner_set(th, c);\n            let index_last = list_index_last(columns_head);\n            app_learn_code_style_rounded_padded(th);\n            let color;\n            if (equal(c_index, index_last)) {\n                color = '#FFEB3B';\n            } else {\n                color = '#29B6F6';\n            }\n            html_style_background_color(th, color);\n        });\n        let tbody = html_element(table, 'tbody');\n        each_index(range(11), (n, n_index) => {\n            let even = equal(mod(n_index, divisor), 0);\n            let tr_body = html_element(tbody, 'tr');\n            let quotient = n / divisor;\n            let columns_body = [n, divisor, quotient, floor(quotient), n % divisor];\n            let index_last = list_index_last(columns_body);\n            each_index(columns_body, (c, c_index) => {\n                let divisor = 2;\n                let td = html_element(tr_body, 'td');\n                html_inner_set(td, c);\n                html_style_centered(td);\n                app_learn_code_style_rounded_padded(td);\n                let color;\n                if (equal(c_index, index_last)) {\n                    color = even ? '#F9E79F' : '#F7DC6F';\n                } else {\n                    color = even ? '#D6EAF8' : '#AED6F1';\n                }\n                html_style_background_color(td, color);\n            });\n        });\n        html_hr(parent);\n        html_p_text(parent, 'did you notice how the remainder alternates between 0 and 1 ?');\n        html_p_text(parent, 'did you notice that when the number is even the remainder is 0 ?');\n        html_p_text(parent, 'did you notice that when the number is odd the remainder is 1 ?');\n        html_p_text(parent, 'the remainder can be used to check whether a number is even or odd');\n    }\n}\n","./public/src/lesson_multiply.mjs":"import {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nexport function lesson_multiply() {\n    const example_message = 'mutiplying two numbers';\n    const description = 'multiplication ( * )';\n    return lesson_simple(function () {\n        let a = integer_random_digit_single_positive();\n        let b = integer_random_digit_single_positive();\n        return `console.log(${a} * ${b});`;\n    }, example_before, description, example_message, []);\n    function example_before(parent) {\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['two numbers can be multiplied together using the asterisk ( ', '*', ' ) symbol']);\n    }\n}\n","./public/src/lesson_simple.mjs":"import {app_learn_code_unscramble} from \"./app_learn_code_unscramble.mjs\";\nimport {app_learn_code_quiz} from \"./app_learn_code_quiz.mjs\";\nimport {lesson_log_number_example} from \"./lesson_log_number_example.mjs\";\nimport {list_add} from \"./list_add.mjs\";\nimport {array_new} from \"./array_new.mjs\";\nimport {object_property_set} from \"./object_property_set.mjs\";\nimport {object_new} from \"./object_new.mjs\";\nexport function lesson_simple(source_get, example_before, description, example_message, screens_before) {\n    let v1 = object_new();\n    object_property_set(v1, 'description', description);\n    let v2 = array_new();\n    for (let s of screens_before) {\n        list_add(v2, s);\n    }\n    list_add(v2, lesson_log_number_example(source_get, example_message, example_before));\n    list_add(v2, app_learn_code_quiz(source_get));\n    list_add(v2, app_learn_code_unscramble(source_get));\n    object_property_set(v1, 'screens', v2);\n    return v1;\n}\n","./public/src/lesson_statements_three.mjs":"import {lesson_console_log_quiz} from \"./lesson_console_log_quiz.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nexport function lesson_statements_three() {\n    const description = 'three console.log statements';\n    const example_message = 'with three statements';\n    return lesson_simple(() => {\n        return `${lesson_console_log_quiz()}\n${lesson_console_log_quiz()}\n${lesson_console_log_quiz()}`;\n    }, example_before, description, example_message, []);\n    function example_before(parent) {\n        html_p_text(parent, 'if there are three statements , the first statement will run and then the second statement will run and then the third statement will run');\n    }\n}\n","./public/src/lesson_statements_two.mjs":"import {lesson_statements_two_quiz} from \"./lesson_statements_two_quiz.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nexport function lesson_statements_two() {\n    const description = 'two console.log statements';\n    const example_message = 'with two statements';\n    return lesson_simple(lesson_statements_two_quiz, example_before, description, example_message, []);\n    function example_before(parent) {\n        html_p_text(parent, 'statements are ran one after the other');\n        html_p_text(parent, 'if there are two statements , the first statement will run and then the second statement will run');\n    }\n}\n","./public/src/lesson_statements_two_quiz.mjs":"import {lesson_console_log_quiz} from \"./lesson_console_log_quiz.mjs\";\nexport function lesson_statements_two_quiz() {\n    return `${lesson_console_log_quiz()}\n${lesson_console_log_quiz()}`;\n}\n","./public/src/lesson_subtract.mjs":"import {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nexport function lesson_subtract() {\n    const example_message = 'subtraction ( - )';\n    const description = example_message;\n    return lesson_simple(function () {\n        let a = integer_random_digit_single_positive();\n        let b = integer_random_digit_single_positive();\n        return `console.log(${a} - ${b});`;\n    }, example_before, description, example_message, []);\n    function example_before(parent) {\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['one number can be subtracted from another number using the minus ( ', '-', ' ) sign']);\n    }\n}\n","./public/src/lesson_variable.mjs":"import {lesson_variable_code_get} from \"./lesson_variable_code_get.mjs\";\nimport {app_learn_code_random_value} from \"./app_learn_code_random_value.mjs\";\nimport {app_learn_code_random_identifier} from \"./app_learn_code_random_identifier.mjs\";\nimport {html_li} from \"./html_li.mjs\";\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\nimport {html_p} from \"./html_p.mjs\";\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {noop} from \"./noop.mjs\";\nimport {html_style_bold} from \"./html_style_bold.mjs\";\nimport {html_ul} from \"./html_ul.mjs\";\nimport {html_hr} from \"./html_hr.mjs\";\nexport function lesson_variable() {\n    let example_message = 'outputting a variable to the console';\n    let description = example_message;\n    return lesson_simple(function () {\n        let name = app_learn_code_random_identifier();\n        let value = app_learn_code_random_value();\n        return lesson_variable_code_get(name, value);\n    }, example_before, description, example_message, [screen1, screen2, screen3, screen4, screen5, screen6]);\n    function example_before(parent) {}\n    function screen1(parent) {\n        html_style_alternate(parent, html_p, [noop, html_style_bold], ['in javascript , ', 'variables', ' have a ', 'name', ' and a ', 'value']);\n        html_p_text(parent, 'variables can be given a value using their name');\n        html_p_text(parent, 'the value given to a variable can be used later using the name of the variable');\n    }\n    function screen2(parent) {\n        html_p_text(parent, 'to use a variable , javascript must know about the variable');\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['to tell javascript about a variable named ', 'variable_name', ' we can write a statement using ', 'let', ' like this :']);\n        app_learn_code_code_part_contrast(parent, 'let variable_name;');\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['because this is a statement , it ends in semicolon ( ', ';', ' )']);\n    }\n    function screen3(parent) {\n        html_p_text(parent, 'in javascript , variable names can contain :');\n        let ul = html_ul(parent);\n        html_style_alternate(ul, html_li, [noop, html_style_monospace], ['letters ( ', 'a', ' , ', 'b', ' , ', 'c', ' , ... , ', 'z', ' and ', 'A', ' , ', 'B', ' , ', 'C', ' , ... , ', 'Z', ' )']);\n        html_style_alternate(ul, html_li, [noop, html_style_monospace], ['digits ( ', '0', ' , ', '1', ' , ', '2', ' , ', '3', ' , ... , ', '9', ' )']);\n        html_style_alternate(ul, html_li, [noop, html_style_monospace], ['underscores ( ', '_', ' )']);\n        html_style_alternate(ul, html_li, [noop, html_style_monospace], ['dollar signs ( ', '$', ' )']);\n        html_p_text(parent, 'here are some examples of valid variable names :');\n        app_learn_code_code_part_contrast(parent, 'y');\n        app_learn_code_code_part_contrast(parent, 'Y');\n        app_learn_code_code_part_contrast(parent, '_');\n        app_learn_code_code_part_contrast(parent, '$');\n        app_learn_code_code_part_contrast(parent, '$$');\n        app_learn_code_code_part_contrast(parent, '__$');\n        app_learn_code_code_part_contrast(parent, 'd8$_');\n    }\n    function screen4(parent) {\n        html_p_text(parent, 'variable names cannot begin with a number');\n        html_hr(parent);\n        html_p_text(parent, 'in a variable name , the case of the letters matter');\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['for example ', 'JESUS', ' , ', 'jesus', ' and ', 'Jesus', ' are all different variable names , even though they contain the same letters']);\n        html_hr(parent);\n        html_p_text(parent, 'some words cannot be used as variables');\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['for example ', 'if', ' , ', 'else', ' , ', 'for', ' and ', 'while', ' cannot be used as variable names because they already have meaning in javascript']);\n    }\n    function screen5(parent) {\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['remember the code from earlier that told javascript about ', 'variable_name', ' :']);\n        app_learn_code_code_part_contrast(parent, 'let variable_name;');\n        html_p_text(parent, 'after telling javascript about a variable , eventually variables should be given a value');\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['to give a variable named ', 'variable_name', ' a value of ', '123', ' write :']);\n        app_learn_code_code_part_contrast(parent, 'variable_name = 123;');\n        html_p_text(parent, 'in math x = y says x and y are equal');\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript , ', '=', ' does not check if two things are equal']);\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['instead , ', '=', ' can be used to give a variable a value']);\n    }\n    function screen6(parent) {\n        html_p_text(parent, 'here was the code from earlier :');\n        app_learn_code_code_part_contrast(parent, 'let variable_name;');\n        app_learn_code_code_part_contrast(parent, 'variable_name = 123;');\n        html_p_text(parent, 'and now either of the following will output 123 :');\n        app_learn_code_code_part_contrast(parent, 'console.log(123);');\n        app_learn_code_code_part_contrast(parent, 'console.log(variable_name);');\n    }\n}\n","./public/src/lesson_variables_declare_shorthand.mjs":"import {list_sort} from \"./list_sort.mjs\";\nimport {js_code_statement_let_assign_multiple} from \"./js_code_statement_let_assign_multiple.mjs\";\nimport {call_multiple} from \"./call_multiple.mjs\";\nimport {app_learn_code_log_add} from \"./app_learn_code_log_add.mjs\";\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\nimport {js_code_statement_let_assign} from \"./js_code_statement_let_assign.mjs\";\nimport {html_li_text} from \"./html_li_text.mjs\";\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {identity} from \"./identity.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {list_sort_string} from \"./list_sort_string.mjs\";\nimport {html_ul} from \"./html_ul.mjs\";\nimport {app_learn_code_random_identifiers} from \"./app_learn_code_random_identifiers.mjs\";\nexport function lesson_variables_declare_shorthand() {\n    let description = 'declaring and assigning multiple variables in a single statement';\n    let example_message = description;\n    let count = 2;\n    return lesson_simple(function () {\n        let values = call_multiple(integer_random_digit_single_positive, count);\n        list_sort(values, identity);\n        let names = app_learn_code_random_identifiers(count);\n        list_sort_string(names, identity);\n        let [name_a, name_b] = names;\n        return `${js_code_statement_let_assign_multiple(names, values)}\n${app_learn_code_log_add(name_a, name_b)}`;\n    }, example_before, description, example_message, [screen1, screen2]);\n    function screen1(parent) {\n        html_p_text(parent, 'in this lesson :');\n        let ul = html_ul(parent);\n        html_li_text(ul, 'the declared variables will be ordered alphabetically');\n        html_li_text(ul, 'the numbers will be assigned from smallest to largest');\n    }\n    function screen2(parent) {\n        let values = call_multiple(integer_random_digit_single_positive, count);\n        list_sort(values, identity);\n        let [a, b] = values;\n        let names = app_learn_code_random_identifiers(count);\n        list_sort_string(names, identity);\n        let [name_a, name_b] = names;\n        html_p_text(parent, 'here is some code :');\n        app_learn_code_code_part_contrast(parent, `${js_code_statement_let_assign(name_a, a)}\n${js_code_statement_let_assign(name_b, b)}`);\n        html_p_text(parent, 'that code can be shortened to the following :');\n        app_learn_code_code_part_contrast(parent, js_code_statement_let_assign_multiple(names, values));\n    }\n    function example_before(parent) {}\n}\n","./public/src/lesson_variables_three.mjs":"import {js_code_statement_let_assign_multiple} from \"./js_code_statement_let_assign_multiple.mjs\";\nimport {list_sort} from \"./list_sort.mjs\";\nimport {app_learn_code_log_add_3} from \"./app_learn_code_log_add_3.mjs\";\nimport {call_multiple} from \"./call_multiple.mjs\";\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\nimport {html_li_text} from \"./html_li_text.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {identity} from \"./identity.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {list_sort_string} from \"./list_sort_string.mjs\";\nimport {html_ul} from \"./html_ul.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nimport {app_learn_code_random_identifiers} from \"./app_learn_code_random_identifiers.mjs\";\nexport function lesson_variables_three() {\n    let description = 'three variables';\n    let example_message = string_combine('with ', description);\n    return lesson_simple(function () {\n        let count = 3;\n        let values = call_multiple(integer_random_digit_single_positive, count);\n        list_sort(values, identity);\n        let names = app_learn_code_random_identifiers(count);\n        list_sort_string(names, identity);\n        let [name_a, name_b, name_c] = names;\n        return `${js_code_statement_let_assign_multiple(names, values)}\n${app_learn_code_log_add_3(name_a, name_b, name_c)}`;\n    }, example_before, description, example_message, [screen1]);\n    function example_before(parent) {\n        html_p_text(parent, 'a program can have more than two variables');\n    }\n    function screen1(parent) {\n        html_p_text(parent, 'in this lesson :');\n        let ul = html_ul(parent);\n        html_li_text(ul, 'the declared variables will be ordered alphabetically');\n        html_li_text(ul, 'the numbers will be assigned from smallest to largest');\n    }\n}\n","./public/src/lesson_variables_two.mjs":"import {call_multiple} from \"./call_multiple.mjs\";\nimport {app_learn_code_log_add} from \"./app_learn_code_log_add.mjs\";\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\nimport {js_code_statement_let_assign} from \"./js_code_statement_let_assign.mjs\";\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {identity} from \"./identity.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {list_sort_string} from \"./list_sort_string.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nimport {js_code_statement_let} from \"./js_code_statement_let.mjs\";\nimport {list_sort} from \"./list_sort.mjs\";\nimport {app_learn_code_random_identifiers} from \"./app_learn_code_random_identifiers.mjs\";\nexport function lesson_variables_two() {\n    let a = 'a';\n    let b = 'b';\n    let description = 'two variables';\n    let example_message = string_combine('with ', description);\n    return lesson_simple(function () {\n        let count = 2;\n        let values = call_multiple(integer_random_digit_single_positive, count);\n        list_sort(values, identity);\n        let [v_a, v_b] = values;\n        let names = app_learn_code_random_identifiers(count);\n        list_sort_string(names, identity);\n        let [name_a, name_b] = names;\n        return `${js_code_statement_let_assign(name_a, v_a)}\n${js_code_statement_let_assign(name_b, v_b)}\n${app_learn_code_log_add(name_a, name_b)}`;\n    }, example_before, description, example_message, [screen1, screen2]);\n    function screen1(parent) {\n        html_p_text(parent, 'a program can have more than one variable');\n        html_p_text(parent, 'in this lesson the declared variables will be ordered alphabetically');\n        html_p_text(parent, 'for example in the alphabet , A comes before B');\n        html_style_alternate_monospace(parent, ['therefore varable ', 'a', ' will come before variable ', 'b', ' , like this :']);\n        app_learn_code_code_part_contrast(parent, `${js_code_statement_let(a)}\n${js_code_statement_let(b)}`);\n        html_style_alternate_monospace(parent, ['', 'b', ' will not come before ', 'a']);\n        html_p_text(parent, 'it will not be like this :');\n        app_learn_code_code_part_contrast(parent, `${js_code_statement_let(b)}\n${js_code_statement_let(a)}`);\n        html_p_text(parent, 'this should make quizzing easier');\n        html_p_text(parent, 'however javascript allows variables to be declared either way');\n    }\n    function screen2(parent) {\n        html_p_text(parent, 'in this lesson the numbers will be assigned from smallest to largest');\n        html_p_text(parent, 'for example 1 is smaller than 2');\n        html_style_alternate_monospace(parent, ['therefore the assignment of ', '1', ' will come before the assignment of ', '2', ' , like this :']);\n        app_learn_code_code_part_contrast(parent, `${js_code_statement_let_assign(a, '1')}\n${js_code_statement_let_assign(b, '2')}`);\n        html_p_text(parent, 'it will not be like this :');\n        app_learn_code_code_part_contrast(parent, `${js_code_statement_let_assign(a, '2')}\n${js_code_statement_let_assign(b, '1')}`);\n        html_p_text(parent, 'this should make quizzing easier');\n        html_p_text(parent, 'however javascript allows numbers to be assigned either way');\n    }\n    function example_before(parent) {}\n}\n","./public/src/lesson_variable_binary.mjs":"import {lesson_divide_numbers} from \"./lesson_divide_numbers.mjs\";\nimport {list_join} from \"./list_join.mjs\";\nimport {call_multiple} from \"./call_multiple.mjs\";\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\nimport {js_code_statement_let_assign} from \"./js_code_statement_let_assign.mjs\";\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\nimport {app_learn_code_random_identifier} from \"./app_learn_code_random_identifier.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {random_50_50} from \"./random_50_50.mjs\";\nimport {list_random_item} from \"./list_random_item.mjs\";\nimport {string_combine} from \"./string_combine.mjs\";\nimport {list_includes} from \"./list_includes.mjs\";\nexport function lesson_variable_binary() {\n    let description = 'variable assigned from the output of a process';\n    let example_message = string_combine('with a ', description);\n    return lesson_simple(function () {\n        let operators;\n        if (random_50_50()) {\n            operators = ['+', '-', '*', '/'];\n        } else {\n            operators = ['<', '<=', '>', '>=', '===', '!=='];\n        }\n        let operator = list_random_item(operators);\n        let values = call_multiple(integer_random_digit_single_positive, 2);\n        let [a, b] = values;\n        let operators_equality = ['===', '!=='];\n        if (list_includes(operators_equality, operator) && random_50_50()) {\n            b = a;\n        }\n        if (operator === '/') {\n            let {dividend, divisor} = lesson_divide_numbers();\n            a = dividend;\n            b = divisor;\n        }\n        let name = app_learn_code_random_identifier();\n        let statements = [js_code_statement_let_assign(name, `${a} ${operator} ${b}`), app_learn_code_log(name)];\n        return list_join(statements, '\\n');\n    }, example_before, description, example_message, []);\n    function example_before(parent) {\n        html_style_alternate_monospace(parent, ['a variable can be assigned the output of : ', '<', ' ', '<=', ' ', '>', ' ', '>=', ' ', '===', ' ', '!==', ' ', '+', ' ', '-', ' ', '*', ' or ', '/']);\n    }\n}\n","./public/src/lesson_variable_change.mjs":"import {app_learn_code_unique} from \"./app_learn_code_unique.mjs\";\nimport {string_delimit_if} from \"./string_delimit_if.mjs\";\nimport {string_to} from \"./string_to.mjs\";\nimport {js_code_statement_assign} from \"./js_code_statement_assign.mjs\";\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\nimport {lesson_variable_code_get} from \"./lesson_variable_code_get.mjs\";\nimport {app_learn_code_random_value} from \"./app_learn_code_random_value.mjs\";\nimport {app_learn_code_random_identifier} from \"./app_learn_code_random_identifier.mjs\";\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nexport function lesson_variable_change() {\n    let example_message = 'changing a variable and logging to the console before and after the change';\n    let description = example_message;\n    return lesson_simple(function () {\n        let name = app_learn_code_random_identifier();\n        let value = app_learn_code_random_value();\n        let value2 = app_learn_code_unique(app_learn_code_random_value, [value]);\n        return `${lesson_variable_code_get(name, value)}\n${js_code_statement_assign(name, value2)}\n${app_learn_code_log(name)}`;\n    }, example_before, description, example_message, [screen1]);\n    function example_before(parent) {}\n    function screen1(parent) {\n        let name = app_learn_code_random_identifier();\n        let value = app_learn_code_random_value();\n        let value_string = string_delimit_if(value);\n        value_string = string_to(value);\n        html_style_alternate_monospace(parent, ['here is code that will set the value of a variable named ', name, ' to a value of ', value, ' :']);\n        app_learn_code_code_part_contrast(parent, js_code_statement_assign(name, value));\n        html_style_alternate_monospace(parent, ['if ', name, ' already has a value , and ', name, ' does not already have a value of ', value, ' , then the value of ', name, ' will be changed to ', value]);\n        html_style_alternate_monospace(parent, ['', '=', ' can be used to change the value of a variable']);\n    }\n}\n","./public/src/lesson_variable_change_2.mjs":"import {js_code_statement_let_assign} from \"./js_code_statement_let_assign.mjs\";\nimport {app_learn_code_unique} from \"./app_learn_code_unique.mjs\";\nimport {js_code_statement_assign} from \"./js_code_statement_assign.mjs\";\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\nimport {app_learn_code_random_value} from \"./app_learn_code_random_value.mjs\";\nimport {app_learn_code_random_identifier} from \"./app_learn_code_random_identifier.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nexport function lesson_variable_change_2() {\n    let example_message = 'changing a variable and logging to the console after the change';\n    let description = example_message;\n    return lesson_simple(function () {\n        let name = app_learn_code_random_identifier();\n        let value = app_learn_code_random_value();\n        let value2 = app_learn_code_unique(app_learn_code_random_value, [value]);\n        return `${js_code_statement_let_assign(name, value)}\n${js_code_statement_assign(name, value2)}\n${app_learn_code_log(name)}`;\n    }, example_before, description, example_message, [screen1]);\n    function example_before(parent) {}\n    function screen1(parent) {\n        html_style_alternate_monospace(parent, ['every time a variable is assigned a different value , the value of the variable changes']);\n        html_style_alternate_monospace(parent, ['', 'console.log(variable_name);', ' will output the most recent and last value of ', 'variable_name']);\n        html_style_alternate_monospace(parent, ['if ', 'variable_name', ' has had multiple assignments , ', 'console.log(variable_name);', ' will not output the previous values of ', 'variable_name']);\n    }\n}\n","./public/src/lesson_variable_code_get.mjs":"import {js_code_statement_let} from \"./js_code_statement_let.mjs\";\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\nimport {js_code_statement_assign} from \"./js_code_statement_assign.mjs\";\nexport function lesson_variable_code_get(name, value) {\n    return `${js_code_statement_let(name)}\n${js_code_statement_assign(name, value)}\n${app_learn_code_log(name)}`;\n}\n","./public/src/lesson_variable_log_twice.mjs":"import {app_learn_code_code} from \"./app_learn_code_code.mjs\";\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\nimport {lesson_statements_two_quiz} from \"./lesson_statements_two_quiz.mjs\";\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\nimport {lesson_variable_code_get} from \"./lesson_variable_code_get.mjs\";\nimport {app_learn_code_random_value} from \"./app_learn_code_random_value.mjs\";\nimport {app_learn_code_random_identifier} from \"./app_learn_code_random_identifier.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nexport function lesson_variable_log_twice() {\n    let example_message = 'outputting a variable to the console twice';\n    let description = example_message;\n    return lesson_simple(function () {\n        let name = app_learn_code_random_identifier();\n        let value = app_learn_code_random_value();\n        return `${lesson_variable_code_get(name, value)}\n${app_learn_code_log(name)}`;\n    }, example_before, description, example_message, [screen1]);\n    function example_before(parent) {}\n    function screen1(parent) {\n        html_style_alternate_monospace(parent, ['remember , here is code that outputs twice because there are two ', 'console.log', ' statements :']);\n        app_learn_code_code(parent, lesson_statements_two_quiz());\n    }\n}\n","./public/src/lesson_variable_shorthand.mjs":"import {html_style_alternate_bold} from \"./html_style_alternate_bold.mjs\";\nimport {js_code_statement_let_assign} from \"./js_code_statement_let_assign.mjs\";\nimport {string_delimit_if} from \"./string_delimit_if.mjs\";\nimport {string_to} from \"./string_to.mjs\";\nimport {js_code_statement_assign} from \"./js_code_statement_assign.mjs\";\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\nimport {app_learn_code_random_value} from \"./app_learn_code_random_value.mjs\";\nimport {app_learn_code_random_identifier} from \"./app_learn_code_random_identifier.mjs\";\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\nimport {html_p_text} from \"./html_p_text.mjs\";\nimport {lesson_simple} from \"./lesson_simple.mjs\";\nimport {html_hr} from \"./html_hr.mjs\";\nimport {js_code_statement_let} from \"./js_code_statement_let.mjs\";\nexport function lesson_variable_shorthand() {\n    let example_message = 'declaring and assigning a variable in a single statement';\n    let description = example_message;\n    return lesson_simple(function () {\n        let name = app_learn_code_random_identifier();\n        let value = app_learn_code_random_value();\n        return `${js_code_statement_let_assign(name, value)}\n${app_learn_code_log(name)}`;\n    }, example_before, description, example_message, [screen1]);\n    function example_before(parent) {}\n    function screen1(parent) {\n        let name = app_learn_code_random_identifier();\n        let value = app_learn_code_random_value();\n        let value_string = string_delimit_if(value);\n        value_string = string_to(value);\n        html_style_alternate_monospace(parent, ['remember the code to tell javascript about a variable named ', name, ' :']);\n        app_learn_code_code_part_contrast(parent, js_code_statement_let(name));\n        html_style_alternate_bold(parent, ['this is called ', 'declaring', ' a variable']);\n        html_hr(parent);\n        html_style_alternate_monospace(parent, ['remember the code to give ', name, ' a value of ', value, ' :']);\n        app_learn_code_code_part_contrast(parent, js_code_statement_assign(name, value));\n        html_style_alternate_bold(parent, ['this is called ', 'assigning', ' a variable a value']);\n        html_hr(parent);\n        html_p_text(parent, 'in javascript it is possible to declare and assign a variable in a single statement , like this :');\n        app_learn_code_code_part_contrast(parent, js_code_statement_let_assign(name, value));\n    }\n}\n","./public/src/less_than.mjs":"export function less_than(n, b_split_length) {\n    return n < b_split_length;\n}\n","./public/src/less_than_equal.mjs":"export function less_than_equal(a, b) {\n    return a <= b;\n}\n","./public/src/list_1.mjs":"export function list_1(item) {\n    return [item];\n}\n","./public/src/list_add.mjs":"export function list_add(list, item) {\n    list.push(item);\n}\n","./public/src/list_adder.mjs":"import {list_add} from \"./list_add.mjs\";\nexport function list_adder(lambda) {\n    let result = [];\n    lambda(item => list_add(result, item));\n    return result;\n}\n","./public/src/list_adder_unique.mjs":"import {list_includes} from './list_includes.mjs';\nimport {list_add} from './list_add.mjs';\nexport function list_adder_unique(lambda) {\n    let result = [];\n    lambda(item => {\n        if (!list_includes(result, item)) {\n            list_add(result, item);\n        }\n    });\n    return result;\n}\n","./public/src/list_add_beginning.mjs":"import {list_insert} from \"./list_insert.mjs\";\nexport function list_add_beginning(list, element) {\n    list_insert(list, 0, element);\n}\n","./public/src/list_add_multiple.mjs":"import {list_add} from \"./list_add.mjs\";\nexport function list_add_multiple(list, other) {\n    for (let s of other) {\n        list_add(list, s);\n    }\n}\n","./public/src/list_any.mjs":"export function list_any(list, predicate) {\n    for (let element of list) {\n        if (predicate(element)) {\n            return true;\n        }\n    }\n    return false;\n}\n","./public/src/list_concat.mjs":"export function list_concat(a, b) {\n    return a.concat(b);\n}\n","./public/src/list_concat_multiple.mjs":"import {list_add_multiple} from \"./list_add_multiple.mjs\";\nexport function list_concat_multiple(lists) {\n    let result = [];\n    for (let list of lists) {\n        list_add_multiple(result, list);\n    }\n    return result;\n}\n","./public/src/list_copy.mjs":"import {list_skip} from \"./list_skip.mjs\";\nexport function list_copy(list) {\n    return list_skip(list, 0);\n}\n","./public/src/list_counter_async.mjs":"export async function list_counter_async(lambda) {\n    let result = 0;\n    await lambda(() => {\n        result = result + 1;\n        return result;\n    });\n    return result;\n}\n","./public/src/list_difference.mjs":"import {list_adder} from \"./list_adder.mjs\";\nimport {list_includes} from \"./list_includes.mjs\";\nexport function list_difference(a, b) {\n    return list_adder(la => {\n        for (let element of a) {\n            if (!list_includes(b, element)) {\n                la(element);\n            }\n        }\n    });\n}\n","./public/src/list_empty_is.mjs":"import {list_length} from \"./list_length.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function list_empty_is(filtered) {\n    return equal(list_length(filtered), 0);\n}\n","./public/src/list_empty_not_is.mjs":"import {list_empty_is} from \"./list_empty_is.mjs\";\nexport function list_empty_not_is(remaining) {\n    return !list_empty_is(remaining);\n}\n","./public/src/list_equal.mjs":"import {list_get} from \"./list_get.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {list_length} from \"./list_length.mjs\";\nimport {range} from \"./range.mjs\";\nexport function list_equal(a, b) {\n    let a_length = list_length(a);\n    let b_length = list_length(b);\n    if (!equal(a_length, b_length)) {\n        return false;\n    }\n    for (let i of range(a_length)) {\n        let a_i = list_get(a, i);\n        let b_i = list_get(b, i);\n        if (!equal(a_i, b_i)) {\n            return false;\n        }\n    }\n    return true;\n}\n","./public/src/list_filter.mjs":"export function list_filter(list, filter) {\n    return list.filter(item => filter(item));\n}\n","./public/src/list_first.mjs":"import {list_get} from './list_get.mjs';\nexport function list_first(list) {\n    return list_get(list, 0);\n}\n","./public/src/list_get.mjs":"import {assert} from \"./assert.mjs\";\nimport {list_length} from \"./list_length.mjs\";\nimport {number_less_than} from \"./number_less_than.mjs\";\nexport function list_get(list, index) {\n    assert(number_less_than, [index, list_length(list)]);\n    return list[index];\n}\n","./public/src/list_get_end.mjs":"import {list_get} from \"./list_get.mjs\";\nimport {list_index_last} from \"./list_index_last.mjs\";\nexport function list_get_end(list, index) {\n    let index_end = list_index_last(list);\n    let index_actual = index_end - index;\n    return list_get(list, index_actual);\n}\n","./public/src/list_includes.mjs":"export function list_includes(list, item) {\n    return list.includes(item);\n}\n","./public/src/list_includes_multiple.mjs":"import {list_includes} from './list_includes.mjs';\nexport function list_includes_multiple(list, items_to_include) {\n    for (let item of items_to_include) {\n        if (!list_includes(list, item)) {\n            return false;\n        }\n    }\n    return true;\n}\n","./public/src/list_includes_not.mjs":"import {list_includes} from \"./list_includes.mjs\";\nexport function list_includes_not(existing, value2) {\n    return !list_includes(existing, value2);\n}\n","./public/src/list_index.mjs":"import {number_less_than} from \"./number_less_than.mjs\";\nimport {assert_not} from \"./assert_not.mjs\";\nexport function list_index(list, element) {\n    let index = list.indexOf(element);\n    assert_not(number_less_than, [index, 0]);\n    return index;\n}\n","./public/src/list_index_first.mjs":"export function list_index_first() {\n    return 0;\n}\n","./public/src/list_index_last.mjs":"import {list_length} from \"./list_length.mjs\";\nexport function list_index_last(input) {\n    let length = list_length(input);\n    let index_last = length - 1;\n    return index_last;\n}\n","./public/src/list_insert.mjs":"export function list_insert(list, index, element) {\n    list.splice(index, 0, element);\n}\n","./public/src/list_intersect.mjs":"import {list_adder} from \"./list_adder.mjs\";\nimport {list_includes} from \"./list_includes.mjs\";\nexport function list_intersect(a, b) {\n    return list_adder(la => {\n        for (let element of a) {\n            if (list_includes(b, element)) {\n                la(element);\n            }\n        }\n    });\n}\n","./public/src/list_is.mjs":"export function list_is(candidate) {\n    return Array.isArray(candidate);\n}\n","./public/src/list_join.mjs":"export function list_join(list, join_by) {\n    return list.join(join_by);\n}\n","./public/src/list_join_comma.mjs":"import {list_join} from \"./list_join.mjs\";\nexport function list_join_comma(list) {\n    return list_join(list, ',');\n}\n","./public/src/list_join_newine.mjs":"import {list_join} from \"./list_join.mjs\";\nexport function list_join_newine(lines) {\n    return list_join(lines, '\\n');\n}\n","./public/src/list_join_newline.mjs":"import {list_join} from \"./list_join.mjs\";\nexport function list_join_newline(lines) {\n    return list_join(lines, '\\n');\n}\n","./public/src/list_last.mjs":"import {list_index_last} from \"./list_index_last.mjs\";\nimport {list_get} from \"./list_get.mjs\";\nexport function list_last(list) {\n    return list_get(list, list_index_last(list));\n}\n","./public/src/list_length.mjs":"export function list_length(list) {\n    return list.length;\n}\n","./public/src/list_length_1.mjs":"import {list_length} from \"./list_length.mjs\";\nimport {equal_1} from \"./equal_1.mjs\";\nexport function list_length_1(list) {\n    let length = list_length(list);\n    return equal_1(length);\n}\n","./public/src/list_map.mjs":"export function list_map(list, mapper) {\n    return list.map(element => mapper(element));\n}\n","./public/src/list_map_async.mjs":"import {list_add} from \"./list_add.mjs\";\nexport async function list_map_async(list, mapper) {\n    let result = [];\n    for (let l of list) {\n        let mapped = mapper(l);\n        let waited = await mapped;\n        list_add(result, waited);\n    }\n    return result;\n}\n","./public/src/list_pop.mjs":"export function list_pop(list) {\n    return list.pop();\n}\n","./public/src/list_random_index.mjs":"export function list_random_index(list) {\n    return Math.floor(Math.random() * list.length);\n}\n","./public/src/list_random_item.mjs":"import {list_random_index} from \"./list_random_index.mjs\";\nexport function list_random_item(list) {\n    return list[list_random_index(list)];\n}\n","./public/src/list_remove.mjs":"import {assert_not} from \"./assert_not.mjs\";\nimport {list_includes} from \"./list_includes.mjs\";\nimport {list_index} from \"./list_index.mjs\";\nimport {number_less_than} from \"./number_less_than.mjs\";\nexport function list_remove(list, element) {\n    let index = list_index(list, element);\n    assert_not(number_less_than, [index, 0]);\n    list.splice(index, 1);\n    assert_not(list_includes, [list, element]);\n}\n","./public/src/list_reverse.mjs":"export function list_reverse(list) {\n    list.reverse();\n}\n","./public/src/list_scramble.mjs":"import {list_set} from \"./list_set.mjs\";\nimport {list_get} from \"./list_get.mjs\";\nimport {integer_random} from \"./integer_random.mjs\";\nimport {list_length} from \"./list_length.mjs\";\nimport {range} from \"./range.mjs\";\nimport {list_index_last} from \"./list_index_last.mjs\";\nexport function list_scramble(scrambled) {\n    let mapped_index_last = list_index_last(scrambled);\n    for (let i of range(list_length(scrambled))) {\n        let j = integer_random(i, mapped_index_last);\n        let temp = list_get(scrambled, j);\n        list_set(scrambled, j, list_get(scrambled, i));\n        list_set(scrambled, i, temp);\n    }\n}\n","./public/src/list_set.mjs":"export function list_set(list, index, value) {\n    list[index] = value;\n}\n","./public/src/list_single.mjs":"import {assert} from './assert.mjs';\nimport {list_first} from './list_first.mjs';\nimport {list_length_1} from './list_length_1.mjs';\nexport function list_single(list) {\n    assert(list_length_1, [list]);\n    return list_first(list);\n}\n","./public/src/list_skip.mjs":"export function list_skip(list, index) {\n    return list.slice(index);\n}\n","./public/src/list_slice.mjs":"export function list_slice(list, start, end) {\n    return list.slice(start, end);\n}\n","./public/src/list_sort.mjs":"export function list_sort(list, element_mapper) {\n    list.sort((a, b) => element_mapper(a) - element_mapper(b));\n}\n","./public/src/list_sort_string.mjs":"export function list_sort_string(list, element_mapper) {\n    list.sort((a, b) => element_mapper(a).localeCompare(element_mapper(b)));\n}\n","./public/src/list_sum.mjs":"import {add} from \"./add.mjs\";\nexport function list_sum(lambda) {\n    let result = 0;\n    lambda(item => result = add(result, item));\n    return result;\n}\n","./public/src/list_take.mjs":"export function list_take(list, count) {\n    return list.slice(0, count);\n}\n","./public/src/list_unique.mjs":"import {list_adder_unique} from \"./list_adder_unique.mjs\";\nexport function list_unique(list) {\n    return list_adder_unique(la => {\n        for (let e of list) {\n            la(e);\n        }\n    });\n}\n","./public/src/mod.mjs":"export function mod(index, pattern_length) {\n    return index % pattern_length;\n}\n","./public/src/multiply.mjs":"export function multiply(a, b) {\n    return a * b;\n}\n","./public/src/newline.mjs":"import {EOL} from \"os\";\nexport function newline() {\n    return EOL;\n}\n","./public/src/noop.mjs":"export function noop() {}\n","./public/src/npm_install.mjs":"import {command_line} from './command_line.mjs';\nexport async function npm_install(package_name) {\n    return await command_line(`npm install ${package_name}@latest`);\n}\n","./public/src/null_is.mjs":"import {equal} from \"./equal.mjs\";\nexport function null_is(candidate) {\n    return equal(candidate, null);\n}\n","./public/src/null_not_is.mjs":"import {null_is} from \"./null_is.mjs\";\nexport function null_not_is(m) {\n    return !null_is(m);\n}\n","./public/src/number_is.mjs":"export function number_is(value) {\n    return typeof value === 'number';\n}\n","./public/src/number_less_than.mjs":"export function number_less_than(a, b) {\n    return a < b;\n}\n","./public/src/number_string_to.mjs":"export function number_string_to(value, base) {\n    return value.toString(base);\n}\n","./public/src/object_copy.mjs":"import {object_merge} from \"./object_merge.mjs\";\nexport function object_copy(object) {\n    let copy = {};\n    object_merge(copy, object);\n    return copy;\n}\n","./public/src/object_merge.mjs":"import {object_properties} from \"./object_properties.mjs\";\nimport {object_property_get} from \"./object_property_get.mjs\";\nimport {object_property_set} from \"./object_property_set.mjs\";\nexport function object_merge(to, from) {\n    let from_properties = object_properties(from);\n    for (let p of from_properties) {\n        let value = object_property_get(from, p);\n        object_property_set(to, p, value);\n    }\n}\n","./public/src/object_new.mjs":"export function object_new() {\n    return {};\n}\n","./public/src/object_properties.mjs":"export function object_properties(object) {\n    return Object.keys(object);\n}\n","./public/src/object_properties_delete.mjs":"import {object_property_delete} from \"./object_property_delete.mjs\";\nimport {object_properties} from \"./object_properties.mjs\";\nexport function object_properties_delete(object) {\n    for (let property of object_properties(object)) {\n        object_property_delete(object, property);\n    }\n}\n","./public/src/object_property_delete.mjs":"export function object_property_delete(object, property) {\n    delete object[property];\n}\n","./public/src/object_property_exists.mjs":"export function object_property_exists(object, property_name) {\n    return object.hasOwnProperty(property_name);\n}\n","./public/src/object_property_get.mjs":"export function object_property_get(object, property_name) {\n    return object[property_name];\n}\n","./public/src/object_property_set.mjs":"export function object_property_set(object, property_name, value) {\n    object[property_name] = value;\n}\n","./public/src/object_property_swap.mjs":"import {object_property_get} from \"./object_property_get.mjs\";\nimport {object_property_set} from \"./object_property_set.mjs\";\nexport function object_property_swap(object, property_a, property_b) {\n    let value_a = object_property_get(object, property_a);\n    let value_b = object_property_get(object, property_b);\n    object_property_set(object, property_a, value_b);\n    object_property_set(object, property_b, value_a);\n}\n","./public/src/object_replace.mjs":"import {object_properties_delete} from \"./object_properties_delete.mjs\";\nimport {object_merge} from \"./object_merge.mjs\";\nexport function object_replace(original, replacement) {\n    object_properties_delete(original);\n    object_merge(original, replacement);\n}\n","./public/src/object_values.mjs":"import {object_properties} from './object_properties.mjs';\nimport {object_property_get} from './object_property_get.mjs';\nimport {list_map} from './list_map.mjs';\nexport function object_values(object) {\n    let properties = object_properties(object);\n    return list_map(properties, p => object_property_get(object, p));\n}\n","./public/src/path_join.mjs":"import {import_node} from './import_node.mjs';let path = await import_node('path');\nexport function path_join(paths) {\n    return path.join(...paths);\n}\n","./public/src/process_argv_remaining.mjs":"export function process_argv_remaining() {\n    let {argv} = process;\n    let remaining = argv.slice(2);\n    return remaining;\n}\n","./public/src/promise_all.mjs":"export function promise_all(mapped) {\n    return Promise.all(mapped);\n}\n","./public/src/random_50_50.mjs":"import {integer_random} from \"./integer_random.mjs\";\nexport function random_50_50() {\n    return integer_random(1, 2) === 1;\n}\n","./public/src/range.mjs":"import {list_add} from './list_add.mjs';\nexport function range(count) {\n    let result = [];\n    for (let i = 0; i < count; i++) {\n        list_add(result, i);\n    }\n    return result;\n}\n","./public/src/returns.mjs":"import {assert_boolean} from './assert_boolean.mjs';\nimport {equal} from './equal.mjs';\nexport function returns(fn, expected, args) {\n    let actual = fn(...args);\n    let e = equal(actual, expected);\n    assert_boolean(e);\n}\n","./public/src/returns_async.mjs":"import {assert_boolean} from './assert_boolean.mjs';\nimport {equal} from './equal.mjs';\nexport async function returns_async(fn, expected, args) {\n    let actual = await fn(...args);\n    let e = equal(actual, expected);\n    assert_boolean(e);\n}\n","./public/src/round.mjs":"export function round(product) {\n    return Math.round(product);\n}\n","./public/src/run.mjs":"import {function_run} from './function_run.mjs';\nimport {process_argv_remaining} from './process_argv_remaining.mjs';\nexport async function run() {\n    let remaining = process_argv_remaining();\n    let first = remaining[0];\n    let args = remaining.slice(1);\n    return await function_run(first, args);\n}\n","./public/src/run_git.mjs":"import {run} from \"./run.mjs\";\nimport {git_ac_message} from \"./git_ac_message.mjs\";\nimport {process_argv_remaining} from \"./process_argv_remaining.mjs\";\nimport {list_add_beginning} from \"./list_add_beginning.mjs\";\nexport async function run_git() {\n    let result = await run();\n    let remaining = process_argv_remaining();\n    list_add_beginning(remaining, ' ');\n    let commit_message = remaining.join(' ');\n    await git_ac_message(commit_message);\n    return result;\n}\n","./public/src/sandbox.mjs":"export function sandbox() {\n    return a + b;\n}\n","./public/src/server.mjs":"import {uuid_file} from \"./uuid_file.mjs\";\nimport {command_line} from \"./command_line.mjs\";\nimport {json_to} from \"./json_to.mjs\";\nimport {server_port} from \"./server_port.mjs\";\nimport express from 'express';\nimport cors from 'cors';\nimport {function_run_json} from \"./function_run_json.mjs\";\nimport {string_replace} from \"./string_replace.mjs\";\nimport {run} from \"./run.mjs\";\nimport {file_overwrite} from \"./file_overwrite.mjs\";\nimport { file_read } from \"./file_read.mjs\";\nexport function server() {\n    let app = express();\n    let port = server_port();\n    let options = {\n        origin: ['http://localhost:8080']\n    };\n    app.use(cors(options));\n    app.use(express.json());\n    app.post('/', async (req, res) => {\n        let {body} = req;\n        let {function_name, args} = body;\n        let args_json = json_to({\n            args\n        });\n        let replaced = string_replace(args_json, '\\'', '\\'\\'');\n        replaced = string_replace(replaced, '\"', '\\\\\"');\n        await uuid_file(async file_path => {\n            let command = `node ${run.name}.mjs ${function_run_json.name} ${function_name} '${replaced}' ${file_path}`;\n            await command_line(command);\n            let contents = await file_read(file_path)\n            await file_overwrite('log.txt', contents);\n            res.end(contents);\n        })\n    });\n    app.listen(port, () => {\n        console.log(`Example app listening on port ${port}`);\n    });\n}\n","./public/src/server_port.mjs":"export function server_port() {\n    return 8000;\n}\n","./public/src/sleep.mjs":"export function sleep(ms) {\n    return new Promise(resolve => {\n        setTimeout(resolve, ms);\n    });\n}\n","./public/src/square.mjs":"import {multiply} from \"./multiply.mjs\";\nexport function square(base) {\n    return multiply(base, base);\n}\n","./public/src/storage_upload_file.mjs":"import admin from \"firebase-admin\";\nlet service_account = await file_read_json('../firebase.json');\nadmin.initializeApp({\n    credential: admin.credential.cert(service_account),\n    storageBucket: \"gs://letjesusbeexalted.appspot.com\"\n});\nlet bucket = admin.storage().bucket();\nexport async function storage_upload_file(file_path, destination) {\n    await bucket.upload(file_path, {\n        destination\n    });\n}\n","./public/src/storage_upload_object.mjs":"import {storage_upload_string} from \"./storage_upload_string.mjs\";\nimport {json_to} from \"./json_to.mjs\";\nexport async function storage_upload_object(object, destination) {\n    let json = json_to(object);\n    await storage_upload_string(json, destination);\n}\n","./public/src/storage_upload_string.mjs":"import {uuid_file} from \"./uuid_file.mjs\";\nimport {storage_upload_file} from \"./storage_upload_file.mjs\";\nimport {file_write} from \"./file_write.mjs\";\nexport async function storage_upload_string(string, destination) {\n    await uuid_file(async file_path => {\n        await file_write(file_path, string);\n        await storage_upload_file(file_path, destination);\n    });\n}\n","./public/src/storage_url.mjs":"import {string_replace} from \"./string_replace.mjs\";\nexport function storage_url(file_path) {\n    let replaced = string_replace(file_path, '/', '%2F');\n    return `https://firebasestorage.googleapis.com/v0/b/letjesusbeexalted.appspot.com/o/${replaced}?alt=media`;\n}\n","./public/src/string_base64_from.mjs":"export function string_base64_from(input) {\n    return Buffer.from(input).toString('ascii');\n}\n","./public/src/string_base64_to.mjs":"export function string_base64_to(input) {\n    return Buffer.from(input).toString('base64');\n}\n","./public/src/string_case_lower.mjs":"export function string_case_lower(input) {\n    return input.toLowerCase();\n}\n","./public/src/string_case_upper.mjs":"export function string_case_upper(input) {\n    return input.toUpperCase();\n}\n","./public/src/string_combine.mjs":"export function string_combine(a, b) {\n    return a + b;\n}\n","./public/src/string_combine_multiple.mjs":"import {string_combine} from \"./string_combine.mjs\";\nexport function string_combine_multiple(list) {\n    let result = '';\n    for (let l of list) {\n        result = string_combine(result, l);\n    }\n    return result;\n}\n","./public/src/string_delimit.mjs":"export function string_delimit(input) {\n    let string_delimeter = \"'\";\n    let result = `${string_delimeter}${input}${string_delimeter}`;\n    return result;\n}\n","./public/src/string_delimit_if.mjs":"import {string_delimit} from \"./string_delimit.mjs\";\nimport {string_is} from \"./string_is.mjs\";\nexport function string_delimit_if(value) {\n    let value_string;\n    if (string_is(value)) {\n        value_string = string_delimit(value);\n    }\n    return value_string;\n}\n","./public/src/string_empty_is.mjs":"import {equal} from \"./equal.mjs\";\nexport function string_empty_is(s) {\n    return equal(s, \"\");\n}\n","./public/src/string_empty_not_is.mjs":"import {string_empty_is} from \"./string_empty_is.mjs\";\nexport function string_empty_not_is(s3) {\n    return !string_empty_is(s3);\n}\n","./public/src/string_encoded_from.mjs":"export function string_encoded_from(input) {\n    return decodeURIComponent(input);\n}\n","./public/src/string_encoded_to.mjs":"export function string_encoded_to(input) {\n    return encodeURIComponent(input);\n}\n","./public/src/string_ends_with.mjs":"import {string_get_reverse} from './string_get_reverse.mjs';\nimport {string_starts_with_generic} from './string_starts_with_generic.mjs';\nexport function string_ends_with(input, prefix) {\n    let string_get_lambda = string_get_reverse;\n    return string_starts_with_generic(string_get_lambda, input, prefix);\n}\n","./public/src/string_ends_with_test_1.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_ends_with_test_1() {\n    let result = string_ends_with('ba', 'ba');\n    assert_boolean(equal(result, true));\n}\n","./public/src/string_ends_with_test_10.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_ends_with_test_10() {\n    let result = string_ends_with('bb', 'aa');\n    assert_boolean(equal(result, false));\n}\n","./public/src/string_ends_with_test_2.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_ends_with_test_2() {\n    let result = string_ends_with('abc', 'ba');\n    assert_boolean(equal(result, false));\n}\n","./public/src/string_ends_with_test_3.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_ends_with_test_3() {\n    let result = string_ends_with('bb', 'bb');\n    assert_boolean(equal(result, true));\n}\n","./public/src/string_ends_with_test_4.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_ends_with_test_4() {\n    let result = string_ends_with('abc', '');\n    assert_boolean(equal(result, true));\n}\n","./public/src/string_ends_with_test_5.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_ends_with_test_5() {\n    let result = string_ends_with('b', 'ba');\n    assert_boolean(equal(result, false));\n}\n","./public/src/string_ends_with_test_6.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_ends_with_test_6() {\n    let result = string_ends_with('a', '');\n    assert_boolean(equal(result, true));\n}\n","./public/src/string_ends_with_test_7.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_ends_with_test_7() {\n    let result = string_ends_with('ba', 'ab');\n    assert_boolean(equal(result, false));\n}\n","./public/src/string_ends_with_test_8.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_ends_with_test_8() {\n    let result = string_ends_with('b', 'b');\n    assert_boolean(equal(result, true));\n}\n","./public/src/string_ends_with_test_9.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_ends_with_test_9() {\n    let result = string_ends_with('', 'a');\n    assert_boolean(equal(result, false));\n}\n","./public/src/string_get.mjs":"export function string_get(input, index) {\n    return input[index];\n}\n","./public/src/string_get_reverse.mjs":"import {string_index_last} from \"./string_index_last.mjs\";\nexport function string_get_reverse(input, index) {\n    let last = string_index_last(input);\n    return input[last - index];\n}\n","./public/src/string_includes.mjs":"export function string_includes(string, value) {\n    return string.includes(value);\n}\n","./public/src/string_index_last.mjs":"import {string_length} from \"./string_length.mjs\";\nexport function string_index_last(input) {\n    let length = string_length(input);\n    let index_last = length - 1;\n    return index_last;\n}\n","./public/src/string_is.mjs":"export function string_is(candidate) {\n    return typeof candidate === 'string';\n}\n","./public/src/string_is_values.mjs":"export function string_is_values() {\n    return ['', 'a', 'b', 'aa', 'ab', 'ba', 'bb', 'abc'];\n}\n","./public/src/string_is_values_tuples_2.mjs":"import {list_join_comma} from \"./list_join_comma.mjs\";\nimport {tuples_2} from \"./tuples_2.mjs\";\nimport {string_is_values} from \"./string_is_values.mjs\";\nexport function string_is_values_tuples_2() {\n    let s = string_is_values.name;\n    return tuples_2(list_join_comma([s, s]));\n}\n","./public/src/string_length.mjs":"export function string_length(input) {\n    return input.length;\n}\n","./public/src/string_letter_first.mjs":"export function string_letter_first(current_token) {\n    return current_token.match(/[a-z]/i)[0];\n}\n","./public/src/string_multiply.mjs":"import {string_combine} from \"./string_combine.mjs\";\nimport {subtract_1} from \"./subtract_1.mjs\";\nimport {range} from \"./range.mjs\";\nexport function string_multiply(input, count) {\n    let s = input;\n    for (let j of range(subtract_1(count))) {\n        s = string_combine(s, input);\n    }\n    return s;\n}\n","./public/src/string_prefix_without.mjs":"import {string_length} from \"./string_length.mjs\";\nimport {string_skip} from \"./string_skip.mjs\";\nimport {assert_boolean} from \"./assert_boolean.mjs\";\nimport {string_starts_with} from \"./string_starts_with.mjs\";\nexport function string_prefix_without(input, prefix) {\n    assert_boolean(string_starts_with(input, prefix));\n    let prefix_length = string_length(prefix);\n    return string_skip(input, prefix_length);\n}\n","./public/src/string_random_letter.mjs":"import {string_case_upper} from \"./string_case_upper.mjs\";\nimport {random_50_50} from \"./random_50_50.mjs\";\nimport {list_random_item} from \"./list_random_item.mjs\";\nimport {keyboard_keys} from \"./keyboard_keys.mjs\";\nexport function string_random_letter() {\n    let ks = keyboard_keys();\n    let name = list_random_item(ks);\n    if (random_50_50()) {\n        name = string_case_upper(name);\n    }\n    return name;\n}\n","./public/src/string_replace.mjs":"import {string_split} from './string_split.mjs';\nimport {list_join} from './list_join.mjs';\nexport function string_replace(input, from, to) {\n    let split = string_split(input, from);\n    let joined = list_join(split, to);\n    return joined;\n}\n","./public/src/string_replace_multiple.mjs":"import {string_replace} from './string_replace.mjs';\nexport function string_replace_multiple(input, froms, to) {\n    for (let from of froms) {\n        input = string_replace(input, from, to);\n    }\n    return input;\n}\n","./public/src/string_skip.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {string_length} from \"./string_length.mjs\";\nexport function string_skip(input, count) {\n    let length = string_length(input);\n    assert_boolean(count <= length);\n    return input.substring(count);\n}\n","./public/src/string_split.mjs":"export function string_split(input, delimeter) {\n    return input.split(delimeter);\n}\n","./public/src/string_split_comma.mjs":"import {string_split} from './string_split.mjs';\nexport function string_split_comma(input) {\n    return string_split(input, ',');\n}\n","./public/src/string_split_empty.mjs":"import {string_split} from \"./string_split.mjs\";\nexport function string_split_empty(input) {\n    return string_split(input, '');\n}\n","./public/src/string_split_space.mjs":"import {string_split} from \"./string_split.mjs\";\nexport function string_split_space(sentence) {\n    return string_split(sentence, ' ');\n}\n","./public/src/string_split_underscore.mjs":"import {string_split} from './string_split.mjs';\nexport function string_split_underscore(input) {\n    return string_split(input, '_');\n}\n","./public/src/string_starts_with.mjs":"import {string_get} from './string_get.mjs';\nimport {string_starts_with_generic} from './string_starts_with_generic.mjs';\nexport function string_starts_with(input, prefix) {\n    let string_get_lambda = string_get;\n    return string_starts_with_generic(string_get_lambda, input, prefix);\n}\n","./public/src/string_starts_with_generic.mjs":"import {string_length} from './string_length.mjs';\nimport {range} from './range.mjs';\nexport function string_starts_with_generic(string_get_lambda, input, prefix) {\n    let input_length = string_length(input);\n    let prefix_length = string_length(prefix);\n    if (input_length < prefix_length) {\n        return false;\n    }\n    for (let i of range(prefix_length)) {\n        if (string_get_lambda(input, i) !== string_get_lambda(prefix, i)) {\n            return false;\n        }\n    }\n    return true;\n}\n","./public/src/string_starts_with_test_1.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_starts_with_test_1() {\n    let result = string_starts_with('bb', 'aa');\n    assert_boolean(equal(result, false));\n}\n","./public/src/string_starts_with_test_10.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_starts_with_test_10() {\n    let result = string_starts_with('', '');\n    assert_boolean(equal(result, true));\n}\n","./public/src/string_starts_with_test_2.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_starts_with_test_2() {\n    let result = string_starts_with('', 'b');\n    assert_boolean(equal(result, false));\n}\n","./public/src/string_starts_with_test_3.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_starts_with_test_3() {\n    let result = string_starts_with('', 'aa');\n    assert_boolean(equal(result, false));\n}\n","./public/src/string_starts_with_test_4.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_starts_with_test_4() {\n    let result = string_starts_with('aa', 'b');\n    assert_boolean(equal(result, false));\n}\n","./public/src/string_starts_with_test_5.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_starts_with_test_5() {\n    let result = string_starts_with('ab', 'a');\n    assert_boolean(equal(result, true));\n}\n","./public/src/string_starts_with_test_6.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_starts_with_test_6() {\n    let result = string_starts_with('b', 'b');\n    assert_boolean(equal(result, true));\n}\n","./public/src/string_starts_with_test_7.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_starts_with_test_7() {\n    let result = string_starts_with('b', 'ab');\n    assert_boolean(equal(result, false));\n}\n","./public/src/string_starts_with_test_8.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_starts_with_test_8() {\n    let result = string_starts_with('a', 'aa');\n    assert_boolean(equal(result, false));\n}\n","./public/src/string_starts_with_test_9.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nexport function string_starts_with_test_9() {\n    let result = string_starts_with('aa', 'aa');\n    assert_boolean(equal(result, true));\n}\n","./public/src/string_suffix_without.mjs":"import {string_length} from \"./string_length.mjs\";\nimport {string_take} from \"./string_take.mjs\";\nimport {assert_boolean} from \"./assert_boolean.mjs\";\nimport {string_ends_with} from \"./string_ends_with.mjs\";\nexport function string_suffix_without(input, prefix) {\n    assert_boolean(string_ends_with(input, prefix));\n    let prefix_length = string_length(prefix);\n    let input_length = string_length(input);\n    let difference = input_length - prefix_length;\n    return string_take(input, difference);\n}\n","./public/src/string_take.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\nimport {string_length} from \"./string_length.mjs\";\nexport function string_take(input, count) {\n    let length = string_length(input);\n    assert_boolean(count <= length);\n    return input.substring(0, count);\n}\n","./public/src/string_to.mjs":"export function string_to(input) {\n    return input.toString();\n}\n","./public/src/string_trim.mjs":"export function string_trim(input) {\n    return input.trim();\n}\n","./public/src/subtract.mjs":"export function subtract(a, b) {\n    return a - b;\n}\n","./public/src/subtract_1.mjs":"import {subtract} from \"./subtract.mjs\";\nexport function subtract_1(input) {\n    return subtract(input, 1);\n}\n","./public/src/tests_generate_single.mjs":"import {list_concat} from \"./list_concat.mjs\";\nimport {function_new_generic} from \"./function_new_generic.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {list_map} from \"./list_map.mjs\";\nimport {assert_boolean} from \"./assert_boolean.mjs\";\nimport {string_includes} from \"./string_includes.mjs\";\nimport {function_run} from \"./function_run.mjs\";\nexport async function tests_generate_single(function_name, args, test_number) {\n    let result = await function_run(function_name, args);\n    console.log(test_number.toString(), list_concat(args, [result]));\n    let result_name = 'result';\n    let string_delimeter = \"'\";\n    for (let arg of args) {\n        assert_boolean(!string_includes(arg, string_delimeter));\n    }\n    let args_mapped = list_map(args, arg => {\n        let result = string_delimit(arg);\n        return result;\n    });\n    await function_new_generic(`${function_name}_test_${test_number}`, ``, `    let ${result_name} = ${function_name}(${args_mapped.join(', ')});\n    ${assert_boolean.name}(${equal.name}(${result_name}, ${result}))`, false, [assert_boolean.name, equal.name], false);\n}\n","./public/src/todo.mjs":"export function todo() {}\n","./public/src/tuples_2.mjs":"import {string_split_comma} from \"./string_split_comma.mjs\";\nimport {function_run} from \"./function_run.mjs\";\nimport {list_map_async} from \"./list_map_async.mjs\";\nimport {assert_boolean} from \"./assert_boolean.mjs\";\nimport {equal} from \"./equal.mjs\";\nimport {list_get} from \"./list_get.mjs\";\nimport {list_adder} from \"./list_adder.mjs\";\nimport {list_length} from \"./list_length.mjs\";\nexport async function tuples_2(names_pair) {\n    let args_values = string_split_comma(names_pair);\n    let mapped = await list_map_async(args_values, async av => await function_run(av, []));\n    assert_boolean(equal(list_length(mapped), 2));\n    let m1 = list_get(mapped, 0);\n    let m2 = list_get(mapped, 1);\n    return list_adder(la => {\n        for (let m1_i of m1) {\n            for (let m2_i of m2) {\n                la([m1_i, m2_i]);\n            }\n        }\n    });\n}\n","./public/src/undefined_is.mjs":"export function undefined_is(input) {\n    return typeof input === 'undefined';\n}\n","./public/src/undefined_not_is.mjs":"import {undefined_is} from \"./undefined_is.mjs\";\nexport function undefined_not_is(previous_token) {\n    return !undefined_is(previous_token);\n}\n","./public/src/uuid.mjs":"import crypto from 'crypto';\nexport function uuid() {\n    return crypto.randomUUID();\n}\n","./public/src/uuid_file.mjs":"import {file_delete} from \"./file_delete.mjs\";\nimport {file_name_json} from \"./file_name_json.mjs\";\nimport {uuid} from \"./uuid.mjs\";\nexport async function uuid_file(lambda) {\n    let u = uuid();\n    let file_path = file_name_json(u);\n    await lambda(file_path);\n    await file_delete(file_path);\n}\n","./public/src/visit.mjs":"import {list_concat} from \"./list_concat.mjs\";\nexport function visit(root, children_get, filter, each, stack) {\n    let children = children_get(root);\n    for (let node of children) {\n        if (filter(node)) {\n            each({\n                node,\n                parent: root,\n                stack\n            });\n            let stacked = list_concat(stack, [node]);\n            visit(node, children_get, filter, each, stacked);\n        }\n    }\n}\n"}