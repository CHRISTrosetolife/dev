{"args":[{"./public/src/add.mjs":"export function add(a, b) {\r\n    return a + b;\r\n}\r\n","./public/src/add_1.mjs":"import {add} from \"./add.mjs\";\r\nexport function add_1(input) {\r\n    return add(input, 1);\r\n}\r\n","./public/src/and.mjs":"export function and(token, verse) {\r\n    return token && verse;\r\n}\r\n","./public/src/app_bible.mjs":"import {html_spaced_tokens} from \"./html_spaced_tokens.mjs\";\r\nimport {html_div} from \"./html_div.mjs\";\r\nimport {html_document_body} from \"./html_document_body.mjs\";\r\nimport {assert} from './assert.mjs';\r\nimport {bible_data_jas01} from './bible_data_jas01.mjs';\r\nimport {equal_by} from './equal_by.mjs';\r\nimport {html_element} from './html_element.mjs';\r\nimport {list_length} from './list_length.mjs';\r\nimport {range} from './range.mjs';\r\nimport {html_inner_set} from './html_inner_set.mjs';\r\nimport {list_get} from './list_get.mjs';\r\nimport {object_property_get} from './object_property_get.mjs';\r\nimport {noop} from './noop.mjs';\r\nimport {html_style} from './html_style.mjs';\r\nimport {html_on_click} from './html_on_click.mjs';\r\nimport {bible_token_normalize} from './bible_token_normalize.mjs';\r\nexport function app_bible() {\r\n    let root = html_document_body();\r\n    html_style(root, {\r\n        'font-family': 'Sans-Serif',\r\n        'font-size': '5vh',\r\n        'margin': '0'\r\n    });\r\n    let top = html_div(root);\r\n    html_style(top, {\r\n        'height': '75vh',\r\n        'overflow-y': 'scroll'\r\n    });\r\n    let bottom = html_element(root, 'div');\r\n    html_style(bottom, {\r\n        'height': '25vh',\r\n        'overflow-y': 'scroll',\r\n        'background-color': 'lightgreen'\r\n    });\r\n    let data = bible_data_jas01();\r\n    let {eng} = data;\r\n    let {ceb} = data;\r\n    let {definitions} = data;\r\n    assert(equal_by, [eng, ceb, list_length]);\r\n    let length = list_length(eng);\r\n    for (let i of range(length)) {\r\n        let verse = html_element(top, 'div');\r\n        let first = html_element(verse, 'div');\r\n        let eng_i = list_get(eng, i);\r\n        let eng_tokens = object_property_get(eng_i, 'tokens');\r\n        let ceb_i = list_get(ceb, i);\r\n        let ceb_tokens = object_property_get(ceb_i, 'tokens');\r\n        let verse_number = object_property_get(eng_i, 'verse_number');\r\n        let verse_number_element = html_element(first, 'span');\r\n        html_inner_set(verse_number_element, verse_number);\r\n        html_style(verse_number_element, {\r\n            'font-weight': 'bold'\r\n        });\r\n        html_spaced_tokens(first, eng_tokens, noop);\r\n        let second = html_element(verse, 'div');\r\n        html_style(second, {\r\n            'color': 'green'\r\n        });\r\n        html_spaced_tokens(second, ceb_tokens, (token_element, token) => {\r\n            html_on_click(token_element, () => {\r\n                html_inner_set(bottom, '');\r\n                let n = bible_token_normalize(token);\r\n                let d = object_property_get(definitions, n);\r\n                html_spaced_tokens(bottom, d, () => {\r\n                    let spacer = html_element(bottom, 'span');\r\n                    html_inner_set(spacer, ',');\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n","./public/src/app_code.mjs":"import {global_get} from \"./global_get.mjs\";\r\nimport {html_root} from \"./html_root.mjs\";\r\nimport {html_style_height_full} from \"./html_style_height_full.mjs\";\r\nimport {html_style_margin_none} from \"./html_style_margin_none.mjs\";\r\nimport {html_document_body} from \"./html_document_body.mjs\";\r\nimport {html_hash_exists} from \"./html_hash_exists.mjs\";\r\nimport {app_code_edit} from \"./app_code_edit.mjs\";\r\nimport {html_hash} from \"./html_hash.mjs\";\r\nimport {app_code_search_function} from \"./app_code_search_function.mjs\";\r\nimport {function_name_to_path} from \"./function_name_to_path.mjs\";\r\nimport {function_run} from \"./function_run.mjs\";\r\nimport {html_style_default_initialize} from \"./html_style_default_initialize.mjs\";\r\nimport {object_property_set} from \"./object_property_set.mjs\";\r\nimport { functions_source_get } from \"./functions_source_get.mjs\";\r\nexport async function app_code() {\r\n    html_style_default_initialize();\r\n    let root = html_document_body();\r\n    html_style_margin_none(root);\r\n    let html = html_root();\r\n    for (let e of [html, root]) {\r\n        html_style_height_full(e);\r\n    }\r\n    let files = await function_run(functions_source_get.name, []);\r\n    object_property_set(global_get(), 'files', files);\r\n    if (html_hash_exists()) {\r\n        html_hash({\r\n            'function_name': function_name => {\r\n                let p = function_name_to_path(function_name);\r\n                app_code_edit(p);\r\n            }\r\n        });\r\n    } else {\r\n        app_code_search_function();\r\n    }\r\n}\r\n","./public/src/app_code_edit.mjs":"import {json_to} from \"./json_to.mjs\";\r\nimport {functions_source_set} from \"./functions_source_set.mjs\";\r\nimport {function_new_generic} from \"./function_new_generic.mjs\";\r\nimport {html_focus} from \"./html_focus.mjs\";\r\nimport {app_code_input} from \"./app_code_input.mjs\";\r\nimport {each_object} from \"./each_object.mjs\";\r\nimport {html_style_margin_x_0} from \"./html_style_margin_x_0.mjs\";\r\nimport {app_code_search_function} from \"./app_code_search_function.mjs\";\r\nimport {html_spellcheck_none} from \"./html_spellcheck_none.mjs\";\r\nimport {html_style_border_box} from \"./html_style_border_box.mjs\";\r\nimport {html_style_height_full} from \"./html_style_height_full.mjs\";\r\nimport {html_document_body_clear} from \"./html_document_body_clear.mjs\";\r\nimport {object_property_get} from \"./object_property_get.mjs\";\r\nimport {html_element} from \"./html_element.mjs\";\r\nimport {html_inner_set} from \"./html_inner_set.mjs\";\r\nimport {html_style_width_full} from \"./html_style_width_full.mjs\";\r\nimport {html_style} from \"./html_style.mjs\";\r\nimport {html_button_width_full_text_click} from \"./html_button_width_full_text_click.mjs\";\r\nimport {html_button} from \"./html_button.mjs\";\r\nimport {html_on_click} from \"./html_on_click.mjs\";\r\nimport {html_div} from \"./html_div.mjs\";\r\nimport {global_get} from \"./global_get.mjs\";\r\nimport {function_name_to_path} from \"./function_name_to_path.mjs\";\r\nimport {html_value_get} from \"./html_value_get.mjs\";\r\nimport {function_run} from \"./function_run.mjs\";\r\nexport function app_code_edit(file_path) {\r\n    let root = html_document_body_clear();\r\n    let container = html_div(root);\r\n    html_style(container, {\r\n        'display': 'flex',\r\n        'flex-direction': 'column'\r\n    });\r\n    html_style_height_full(container);\r\n    let b = html_button(container);\r\n    html_inner_set(b, 'menu');\r\n    html_on_click(b, () => {\r\n        let root = html_document_body_clear();\r\n        let choices = {\r\n            'search': () => {\r\n                app_code_search_function();\r\n            },\r\n            'add new function': () => {\r\n                let root = html_document_body_clear();\r\n                let input = app_code_input(root);\r\n                html_focus(input);\r\n                let b = html_button_width_full_text_click(root, 'add new function', async () => {\r\n                    let function_name = html_value_get(input);\r\n                    await function_new_generic(function_name, '', '', false, [], false);\r\n                    let file_path = function_name_to_path(function_name);\r\n                    app_code_edit(file_path);\r\n                });\r\n                html_style_margin_x_0(b);\r\n            },\r\n            'save functions': async () => {\r\n                let {files} = global_get();\r\n                await function_run(functions_source_set.name, [files]);\r\n                console.log('here')\r\n            }\r\n        };\r\n        each_object(choices, lambda);\r\n        function lambda(key, value) {\r\n            let b = html_button_width_full_text_click(root, key, value);\r\n            html_style_margin_x_0(b);\r\n        }\r\n    });\r\n    let {files} = global_get();\r\n    let contents = object_property_get(files, file_path);\r\n    let ta = html_element(container, 'textarea');\r\n    html_spellcheck_none(ta);\r\n    html_style(ta, {\r\n        'display': 'block'\r\n    });\r\n    html_style_border_box(ta);\r\n    html_inner_set(ta, contents);\r\n    html_style_width_full(ta);\r\n    html_style_height_full(ta);\r\n}\r\n","./public/src/app_code_input.mjs":"import {html_style_width_full} from \"./html_style_width_full.mjs\";\r\nimport {html_spellcheck_none} from \"./html_spellcheck_none.mjs\";\r\nimport {app_learn_code_style_rounded_padded} from \"./app_learn_code_style_rounded_padded.mjs\";\r\nimport {html_input} from \"./html_input.mjs\";\r\nexport function app_code_input(root) {\r\n    let input = html_input(root);\r\n    app_learn_code_style_rounded_padded(input);\r\n    html_spellcheck_none(input);\r\n    html_style_width_full(input);\r\n    return input;\r\n}\r\n","./public/src/app_code_search_function.mjs":"import {app_code_input} from \"./app_code_input.mjs\";\r\nimport {html_style_display_none} from \"./html_style_display_none.mjs\";\r\nimport {html_style_display_block} from \"./html_style_display_block.mjs\";\r\nimport {string_includes} from \"./string_includes.mjs\";\r\nimport {html_value_get} from \"./html_value_get.mjs\";\r\nimport {html_style_margin_x_0} from \"./html_style_margin_x_0.mjs\";\r\nimport {html_document_body_clear} from \"./html_document_body_clear.mjs\";\r\nimport {app_code_edit} from \"./app_code_edit.mjs\";\r\nimport {html_style_word_break_all} from \"./html_style_word_break_all.mjs\";\r\nimport {html_button_width_full_text_click} from \"./html_button_width_full_text_click.mjs\";\r\nimport {function_path_to_name} from \"./function_path_to_name.mjs\";\r\nimport {object_properties} from \"./object_properties.mjs\";\r\nimport {html_focus} from \"./html_focus.mjs\";\r\nimport {html_on} from \"./html_on.mjs\";\r\nimport {list_adder} from \"./list_adder.mjs\";\r\nimport { global_get } from \"./global_get.mjs\";\r\nimport { list_sort_string } from \"./list_sort_string.mjs\";\r\nimport { identity } from \"./identity.mjs\";\r\nexport function app_code_search_function() {\r\n    let {files} = global_get();\r\n    let root = html_document_body_clear();\r\n    let input = app_code_input(root);\r\n    html_focus(input);\r\n    let paths = object_properties(files);\r\n    list_sort_string(paths, identity)\r\n    let list = list_adder(la => {\r\n        for (let p of paths) {\r\n            let name = function_path_to_name(p);\r\n            let button = html_button_width_full_text_click(root, name, () => {\r\n                app_code_edit(p);\r\n            });\r\n            html_style_margin_x_0(button);\r\n            html_style_word_break_all(button);\r\n            la({\r\n                name,\r\n                button\r\n            });\r\n        }\r\n    });\r\n    html_on(input, 'input', () => {\r\n        let value = html_value_get(input);\r\n        for (let e of list) {\r\n            let {name, button} = e;\r\n            if (string_includes(name, value)) {\r\n                html_style_display_block(button);\r\n            } else {\r\n                html_style_display_none(button);\r\n            }\r\n        }\r\n    });\r\n}\r\n","./public/src/app_html_generate.mjs":"import {folder_name_src} from \"./folder_name_src.mjs\";\r\nimport {file_overwrite} from \"./file_overwrite.mjs\";\r\nimport {folder_name_public} from \"./folder_name_public.mjs\";\r\nimport {path_join} from \"./path_join.mjs\";\r\nimport {js_code_call} from \"./js_code_call.mjs\";\r\nimport {js_code_import_path} from \"./js_code_import_path.mjs\";\r\nimport {folder_current} from \"./folder_current.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nimport {app_prefix} from \"./app_prefix.mjs\";\r\nexport async function app_html_generate(name) {\r\n    let prefix = app_prefix();\r\n    let name_prefixed = string_combine(prefix, name);\r\n    let import_path = `${folder_current()}/${folder_name_src()}/`;\r\n    let html = `\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n        <meta charset=\"utf-8\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n        <title>${name}</title>\r\n      </head>\r\n      <body>\r\n        <script>\r\n          let global = {};\r\n        </script>\r\n        <script type=\"module\">\r\n          ${js_code_import_path(import_path, name_prefixed)}\r\n          ${js_code_call(name_prefixed)}\r\n        </script>\r\n      </body>\r\n    </html>        \r\n`;\r\n    let output_path = path_join([folder_name_public(), `${name}.html`]);\r\n    await file_overwrite(output_path, html);\r\n}\r\n","./public/src/app_learn_code.mjs":"import {html_style_default_font_size_value} from \"./html_style_default_font_size_value.mjs\";\r\nimport {html_style_default_initialize} from \"./html_style_default_initialize.mjs\";\r\nimport {html_hash} from \"./html_hash.mjs\";\r\nimport {app_learn_code_lessons} from \"./app_learn_code_lessons.mjs\";\r\nimport {string_combine_multiple} from \"./string_combine_multiple.mjs\";\r\nimport {html_scroll_top} from \"./html_scroll_top.mjs\";\r\nimport {string_multiply} from \"./string_multiply.mjs\";\r\nimport {each_reverse} from \"./each_reverse.mjs\";\r\nimport {round} from \"./round.mjs\";\r\nimport {number_string_to} from \"./number_string_to.mjs\";\r\nimport {divide} from \"./divide.mjs\";\r\nimport {square} from \"./square.mjs\";\r\nimport {multiply} from \"./multiply.mjs\";\r\nimport {subtract_1} from \"./subtract_1.mjs\";\r\nimport {add_1} from \"./add_1.mjs\";\r\nimport {list_add_multiple} from \"./list_add_multiple.mjs\";\r\nimport {html_disable} from \"./html_disable.mjs\";\r\nimport {html_button_width_full_text_click} from \"./html_button_width_full_text_click.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {html_clear} from \"./html_clear.mjs\";\r\nimport {list_get} from \"./list_get.mjs\";\r\nimport {object_property_get} from \"./object_property_get.mjs\";\r\nimport {html_document_body} from \"./html_document_body.mjs\";\r\nimport {list_length} from \"./list_length.mjs\";\r\nimport {list_index_last} from \"./list_index_last.mjs\";\r\nimport {html_style} from \"./html_style.mjs\";\r\nimport {list_add} from \"./list_add.mjs\";\r\nimport {html_hr} from \"./html_hr.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {list_index} from \"./list_index.mjs\";\r\nimport {list_take} from \"./list_take.mjs\";\r\nimport {list_sum} from \"./list_sum.mjs\";\r\nimport {each_index} from \"./each_index.mjs\";\r\nimport {add} from \"./add.mjs\";\r\nimport {html_spacer_vertical} from \"./html_spacer_vertical.mjs\";\r\nimport {html_span_text} from \"./html_span_text.mjs\";\r\nimport {html_style_bold} from \"./html_style_bold.mjs\";\r\nimport {range} from \"./range.mjs\";\r\nimport {string_length} from \"./string_length.mjs\";\r\nimport { html_style_margin_none } from \"./html_style_margin_none.mjs\";\r\nexport function app_learn_code() {\r\n    let root = html_document_body();\r\n    html_hash({\r\n        'background_color': value => {\r\n            html_style(root, {\r\n                'background-color': value\r\n            });\r\n        }\r\n    });\r\n    html_style_default_initialize();\r\n    let default_font_size = html_style_default_font_size_value();\r\n    let lesson_creates = app_learn_code_lessons();\r\n    let lesson_screens = [];\r\n    let lessons = [];\r\n    for (let lesson_create of lesson_creates) {\r\n        let lesson = lesson_create();\r\n        list_add(lessons, lesson);\r\n        let s = object_property_get(lesson, 'screens');\r\n        list_add_multiple(lesson_screens, s);\r\n    }\r\n    function refresh_settings() {\r\n        clear_scroll();\r\n        button_home_hr();\r\n        let base = 16;\r\n        let max_rgb = square(base) - 1;\r\n        let max = 20;\r\n        let index = 0;\r\n        each_reverse(range(max), i => {\r\n            index++;\r\n            let percent = divide(i, subtract_1(max));\r\n            let product = multiply(percent, max_rgb);\r\n            let rounded = round(product);\r\n            let rgb_part = number_string_to(rounded, base);\r\n            if (equal(string_length(rgb_part), 1)) {\r\n                rgb_part = string_combine('0', rgb_part);\r\n            }\r\n            let parts = 3;\r\n            let rgb = string_multiply(rgb_part, parts);\r\n            let color = string_combine('#', rgb);\r\n            let font_color;\r\n            if (percent > 0.5) {\r\n                font_color = 'black';\r\n            } else {\r\n                font_color = 'white';\r\n            }\r\n            let change = html_button_width_full_text_click(root, string_combine_multiple([index, '.', ' background color : ', color]), () => html_style(root, {\r\n                'color': font_color,\r\n                'background-color': color\r\n            }));\r\n            html_style(change, {\r\n                'color': font_color,\r\n                'background-color': color\r\n            });\r\n        });\r\n    }\r\n    function refresh_main() {\r\n        clear_scroll();\r\n        html_button_width_full_text_click(root, '⚙️ settings', refresh_settings);\r\n        html_p_text(root, 'if you want to start from the beginning , choose \"begin\" : ');\r\n        let begin = html_button_width_full_text_click(root, '🚀 begin', async () => await refresh_lesson_screen(0));\r\n        html_style(begin, {\r\n            'font-size': string_combine(multiply(default_font_size, 1.2).toString(), 'vh')\r\n        });\r\n        html_style_bold(begin);\r\n        html_p_text(root, 'or choose a lesson below :');\r\n        for (let lesson of lessons) {\r\n            let {description} = lesson;\r\n            html_button_width_full_text_click(root, description, () => refresh_lesson(lesson));\r\n        }\r\n    }\r\n    refresh_main();\r\n    let index_last = list_index_last(lesson_screens);\r\n    function clear_scroll() {\r\n        html_clear(root);\r\n        html_scroll_top();\r\n    }\r\n    function refresh_lesson(lesson) {\r\n        clear_scroll();\r\n        button_home_hr();\r\n        let lesson_index = list_index(lessons, lesson);\r\n        let previous = list_take(lessons, lesson_index);\r\n        let index_first = list_sum(s => {\r\n            for (let p of previous) {\r\n                let {screens} = p;\r\n                s(list_length(screens));\r\n            }\r\n        });\r\n        let {screens} = lesson;\r\n        each_index(screens, (screen, index) => {\r\n            let message = string_combine('screen ', add_1(index));\r\n            let button = html_button_width_full_text_click(root, '', async () => await refresh_lesson_screen(add(index_first, index)));\r\n            if (equal(index, 0)) {\r\n                let begin_lesson = html_span_text(button, `begin the lesson`);\r\n                html_style_bold(begin_lesson);\r\n                html_span_text(button, ` ( ${message} )`);\r\n            } else {\r\n                html_span_text(button, message);\r\n            }\r\n        });\r\n    }\r\n    function button_home_hr() {\r\n        button_home();\r\n        html_hr(root);\r\n    }\r\n    async function refresh_lesson_screen(index) {\r\n        clear_scroll();\r\n        let lesson_screen = list_get(lesson_screens, index);\r\n        await lesson_screen(root);\r\n        html_hr(root);\r\n        let button_next = html_button_width_full_text_click(root, '➡️ next', async function on_click() {\r\n            await refresh_lesson_screen(add_1(index));\r\n        });\r\n        let button_previous = html_button_width_full_text_click(root, '⬅️ previous', async function on_click() {\r\n            await refresh_lesson_screen(subtract_1(index));\r\n        });\r\n        if (equal(index, 0)) {\r\n            html_disable(button_previous);\r\n        }\r\n        if (equal(index, index_last)) {\r\n            html_disable(button_next);\r\n        }\r\n        html_spacer_vertical(root);\r\n        html_spacer_vertical(root);\r\n        button_home();\r\n    }\r\n    function button_home() {\r\n        html_button_width_full_text_click(root, '🏠 go back home', function on_click() {\r\n            refresh_main();\r\n        });\r\n    }\r\n}\r\n","./public/src/app_learn_code_answer_correct.mjs":"import {html_style_units} from \"./html_style_units.mjs\";\r\nimport {html_style} from \"./html_style.mjs\";\r\nimport {app_learn_code_style_rounded_padded} from \"./app_learn_code_style_rounded_padded.mjs\";\r\nimport {app_learn_code_style_success} from \"./app_learn_code_style_success.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nexport function app_learn_code_answer_correct(container_bottom) {\r\n    let p = html_p_text(container_bottom, '✅ your answer is correct');\r\n    app_learn_code_style_success(p);\r\n    app_learn_code_style_rounded_padded(p);\r\n    html_style(p, {\r\n        'padding': html_style_units(3.5)\r\n    });\r\n}\r\n","./public/src/app_learn_code_code.mjs":"import {app_learn_code_eval_to_string} from \"./app_learn_code_eval_to_string.mjs\";\r\nimport {app_learn_code_code_part_titled_output} from \"./app_learn_code_code_part_titled_output.mjs\";\r\nimport {html_hr} from \"./html_hr.mjs\";\r\nimport {app_learn_code_code_part_titled_code} from \"./app_learn_code_code_part_titled_code.mjs\";\r\nimport {app_learn_code_code_container} from \"./app_learn_code_code_container.mjs\";\r\nexport function app_learn_code_code(parent, code) {\r\n    let container = app_learn_code_code_container(parent);\r\n    app_learn_code_code_part_titled_code(container, code);\r\n    html_hr(container);\r\n    let output = app_learn_code_eval_to_string(code);\r\n    app_learn_code_code_part_titled_output(container, output);\r\n}\r\n","./public/src/app_learn_code_code_background.mjs":"export function app_learn_code_code_background() {\r\n    return 'black';\r\n}\r\n","./public/src/app_learn_code_code_container.mjs":"import {html_style_background_color} from \"./html_style_background_color.mjs\";\r\nimport {app_learn_code_style_rounded_padded} from \"./app_learn_code_style_rounded_padded.mjs\";\r\nimport {html_div} from \"./html_div.mjs\";\r\nexport function app_learn_code_code_container(parent) {\r\n    let container = html_div(parent);\r\n    app_learn_code_style_rounded_padded(container);\r\n    html_style_background_color(container, 'lightgray');\r\n    return container;\r\n}\r\n","./public/src/app_learn_code_code_part.mjs":"import {app_learn_code_code_part_generic} from \"./app_learn_code_code_part_generic.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nexport function app_learn_code_code_part(parent, source_code, background_color) {\r\n    return app_learn_code_code_part_generic(html_p_text, parent, source_code, background_color);\r\n}\r\n","./public/src/app_learn_code_code_part_contrast.mjs":"import {app_learn_code_style_code_color_background} from \"./app_learn_code_style_code_color_background.mjs\";\r\nimport {html_style_pre_wrap} from \"./html_style_pre_wrap.mjs\";\r\nimport {html_style_margin_y} from \"./html_style_margin_y.mjs\";\r\nimport {app_learn_code_style_code_color} from \"./app_learn_code_style_code_color.mjs\";\r\nimport {app_learn_code_code_part} from \"./app_learn_code_code_part.mjs\";\r\nexport function app_learn_code_code_part_contrast(parent, code) {\r\n    let component = app_learn_code_code_part(parent, code, app_learn_code_style_code_color_background());\r\n    app_learn_code_style_code_color(component);\r\n    html_style_margin_y(component, '0.5dvh');\r\n    html_style_pre_wrap(component);\r\n}\r\n","./public/src/app_learn_code_code_part_generic.mjs":"import {html_style_word_break_all} from \"./html_style_word_break_all.mjs\";\r\nimport {html_style_margin_none} from \"./html_style_margin_none.mjs\";\r\nimport {app_learn_code_style_code} from \"./app_learn_code_style_code.mjs\";\r\nimport {html_style_background_color} from \"./html_style_background_color.mjs\";\r\nexport function app_learn_code_code_part_generic(create, parent, source_code, background_color) {\r\n    let code = create(parent, source_code);\r\n    app_learn_code_style_code(code);\r\n    html_style_margin_none(code);\r\n    html_style_word_break_all(code);\r\n    html_style_background_color(background_color);\r\n    return code;\r\n}\r\n","./public/src/app_learn_code_code_part_title.mjs":"import {html_spacer_vertical} from \"./html_spacer_vertical.mjs\";\r\nimport {html_style_margin_none} from \"./html_style_margin_none.mjs\";\r\nimport {html_style} from \"./html_style.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nexport function app_learn_code_code_part_title(parent, title_text) {\r\n    let title = html_p_text(parent, title_text);\r\n    html_style(title, {\r\n        'font-size': '2.3vh'\r\n    });\r\n    html_style_margin_none(title);\r\n    html_spacer_vertical(parent);\r\n}\r\n","./public/src/app_learn_code_code_part_titled.mjs":"import {app_learn_code_code_part_title} from \"./app_learn_code_code_part_title.mjs\";\r\nimport {app_learn_code_code_part} from \"./app_learn_code_code_part.mjs\";\r\nexport function app_learn_code_code_part_titled(parent, title_text, source_code, background_color) {\r\n    app_learn_code_code_part_title(parent, title_text);\r\n    let code = app_learn_code_code_part(parent, source_code, background_color);\r\n    return {\r\n        code\r\n    };\r\n}\r\n","./public/src/app_learn_code_code_part_titled_code.mjs":"import {html_style_pre_wrap} from \"./html_style_pre_wrap.mjs\";\r\nimport {app_learn_code_code_background} from \"./app_learn_code_code_background.mjs\";\r\nimport {app_learn_code_style_code_color} from \"./app_learn_code_style_code_color.mjs\";\r\nimport {app_learn_code_code_part_titled} from \"./app_learn_code_code_part_titled.mjs\";\r\nexport function app_learn_code_code_part_titled_code(container, source) {\r\n    let result = app_learn_code_code_part_titled(container, 'code :', source, app_learn_code_code_background());\r\n    let {code} = result;\r\n    app_learn_code_style_code_color(code);\r\n    html_style_pre_wrap(code);\r\n    return result;\r\n}\r\n","./public/src/app_learn_code_code_part_titled_output.mjs":"import {app_learn_code_output_background} from \"./app_learn_code_output_background.mjs\";\r\nimport {app_learn_code_code_part_title_output} from \"./app_learn_code_code_part_title_output.mjs\";\r\nimport {app_learn_code_code_part_titled} from \"./app_learn_code_code_part_titled.mjs\";\r\nexport function app_learn_code_code_part_titled_output(container, output) {\r\n    app_learn_code_code_part_titled(container, app_learn_code_code_part_title_output(), output, app_learn_code_output_background());\r\n}\r\n","./public/src/app_learn_code_code_part_title_output.mjs":"export function app_learn_code_code_part_title_output() {\r\n    return 'output :';\r\n}\r\n","./public/src/app_learn_code_eval.mjs":"export function app_learn_code_eval(c) {\r\n    let source_augmented = `let log_old = console.log;\r\n            let messages = [];\r\n            console.log = message => messages.push(message);\r\n            ${c};\r\n            console.log = log_old;\r\n            messages;`;\r\n    let messages = eval(source_augmented);\r\n    return messages;\r\n}\r\n","./public/src/app_learn_code_eval_messages_to_string.mjs":"import {list_join} from \"./list_join.mjs\";\r\nexport function app_learn_code_eval_messages_to_string(messages) {\r\n    return list_join(messages, '<br>');\r\n}\r\n","./public/src/app_learn_code_eval_to_string.mjs":"import {app_learn_code_eval_messages_to_string} from \"./app_learn_code_eval_messages_to_string.mjs\";\r\nimport {app_learn_code_eval} from \"./app_learn_code_eval.mjs\";\r\nexport function app_learn_code_eval_to_string(source) {\r\n    let messages = app_learn_code_eval(source);\r\n    let joined = app_learn_code_eval_messages_to_string(messages);\r\n    return joined;\r\n}\r\n","./public/src/app_learn_code_lessons.mjs":"import {lesson_variables_declare_shorthand} from \"./lesson_variables_declare_shorthand.mjs\";\r\nimport {lesson_variable_change} from \"./lesson_variable_change.mjs\";\r\nimport {lesson_log_boolean} from \"./lesson_log_boolean.mjs\";\r\nimport {lesson_statements_three} from \"./lesson_statements_three.mjs\";\r\nimport {lesson_statements_two} from \"./lesson_statements_two.mjs\";\r\nimport {lesson_equal_string} from \"./lesson_equal_string.mjs\";\r\nimport {lesson_equal_number} from \"./lesson_equal_number.mjs\";\r\nimport {lesson_greater_than_equal} from \"./lesson_greater_than_equal.mjs\";\r\nimport {lesson_less_than_equal} from \"./lesson_less_than_equal.mjs\";\r\nimport {lesson_greater_than} from \"./lesson_greater_than.mjs\";\r\nimport {lesson_less_than} from \"./lesson_less_than.mjs\";\r\nimport {lesson_divide} from \"./lesson_divide.mjs\";\r\nimport {lesson_multiply} from \"./lesson_multiply.mjs\";\r\nimport {lesson_subtract} from \"./lesson_subtract.mjs\";\r\nimport {lesson_add} from \"./lesson_add.mjs\";\r\nimport {lesson_log_number} from \"./lesson_log_number.mjs\";\r\nimport {lesson_console_log} from \"./lesson_console_log.mjs\";\r\nimport {list_add} from \"./list_add.mjs\";\r\nimport {lesson_equal_not_number} from \"./lesson_equal_not_number.mjs\";\r\nimport {lesson_equal_not_string} from \"./lesson_equal_not_string.mjs\";\r\nimport {lesson_variable} from \"./lesson_variable.mjs\";\r\nimport {lesson_variable_log_twice} from \"./lesson_variable_log_twice.mjs\";\r\nimport {lesson_variable_shorthand} from \"./lesson_variable_shorthand.mjs\";\r\nimport {lesson_variables_two} from \"./lesson_variables_two.mjs\";\r\nimport {lesson_variable_change_2} from \"./lesson_variable_change_2.mjs\";\r\nimport {lesson_add_numbers_three} from \"./lesson_add_numbers_three.mjs\";\r\nimport {lesson_variables_three} from \"./lesson_variables_three.mjs\";\r\nimport {lesson_if_true} from \"./lesson_if_true.mjs\";\r\nimport {lesson_if_false} from \"./lesson_if_false.mjs\";\r\nimport {lesson_if_binary} from \"./lesson_if_binary.mjs\";\r\nimport {lesson_if_variable} from \"./lesson_if_variable.mjs\";\r\nimport {lesson_variable_binary} from \"./lesson_variable_binary.mjs\";\r\nimport {lesson_if_else} from \"./lesson_if_else.mjs\";\r\nimport {lesson_if_else_zero} from \"./lesson_if_else_zero.mjs\";\r\nimport {lesson_if_else_positive} from \"./lesson_if_else_positive.mjs\";\r\nimport {lesson_if_else_negative} from \"./lesson_if_else_negative.mjs\";\r\nimport {lesson_if_else_if} from \"./lesson_if_else_if.mjs\";\r\nimport {lesson_mod} from \"./lesson_mod.mjs\";\r\nexport function app_learn_code_lessons() {\r\n    let lesson_creates = [];\r\n    list_add(lesson_creates, lesson_console_log);\r\n    list_add(lesson_creates, lesson_log_number);\r\n    list_add(lesson_creates, lesson_add);\r\n    list_add(lesson_creates, lesson_subtract);\r\n    list_add(lesson_creates, lesson_multiply);\r\n    list_add(lesson_creates, lesson_divide);\r\n    list_add(lesson_creates, lesson_less_than);\r\n    list_add(lesson_creates, lesson_greater_than);\r\n    list_add(lesson_creates, lesson_equal_number);\r\n    list_add(lesson_creates, lesson_equal_string);\r\n    list_add(lesson_creates, lesson_less_than_equal);\r\n    list_add(lesson_creates, lesson_greater_than_equal);\r\n    list_add(lesson_creates, lesson_equal_not_number);\r\n    list_add(lesson_creates, lesson_equal_not_string);\r\n    list_add(lesson_creates, lesson_statements_two);\r\n    list_add(lesson_creates, lesson_statements_three);\r\n    list_add(lesson_creates, lesson_log_boolean);\r\n    list_add(lesson_creates, lesson_variable);\r\n    list_add(lesson_creates, lesson_variable_log_twice);\r\n    list_add(lesson_creates, lesson_variable_change);\r\n    list_add(lesson_creates, lesson_variable_shorthand);\r\n    list_add(lesson_creates, lesson_variable_change_2);\r\n    list_add(lesson_creates, lesson_variables_two);\r\n    list_add(lesson_creates, lesson_variables_declare_shorthand);\r\n    list_add(lesson_creates, lesson_add_numbers_three);\r\n    list_add(lesson_creates, lesson_variables_three);\r\n    list_add(lesson_creates, lesson_variable_binary);\r\n    list_add(lesson_creates, lesson_if_true);\r\n    list_add(lesson_creates, lesson_if_false);\r\n    list_add(lesson_creates, lesson_if_binary);\r\n    list_add(lesson_creates, lesson_if_variable);\r\n    list_add(lesson_creates, lesson_if_else);\r\n    list_add(lesson_creates, lesson_if_else_zero);\r\n    list_add(lesson_creates, lesson_if_else_positive);\r\n    list_add(lesson_creates, lesson_if_else_negative);\r\n    list_add(lesson_creates, lesson_if_else_if);\r\n    list_add(lesson_creates, lesson_mod);\r\n    return lesson_creates;\r\n}\r\n","./public/src/app_learn_code_log.mjs":"export function app_learn_code_log(code) {\r\n    return `console.log(${code});`;\r\n}\r\n","./public/src/app_learn_code_log_add.mjs":"import {js_code_add} from \"./js_code_add.mjs\";\r\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\r\nexport function app_learn_code_log_add(a, b) {\r\n    return app_learn_code_log(js_code_add(a, b));\r\n}\r\n","./public/src/app_learn_code_log_add_3.mjs":"import {js_code_add_3} from \"./js_code_add_3.mjs\";\r\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\r\nexport function app_learn_code_log_add_3(a, b, c) {\r\n    return app_learn_code_log(js_code_add_3(a, b, c));\r\n}\r\n","./public/src/app_learn_code_log_delimit.mjs":"import {string_delimit} from \"./string_delimit.mjs\";\r\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\r\nexport function app_learn_code_log_delimit(message) {\r\n    return app_learn_code_log(string_delimit(message));\r\n}\r\n","./public/src/app_learn_code_log_random_value.mjs":"import {app_learn_code_random_value} from \"./app_learn_code_random_value.mjs\";\r\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\r\nexport function app_learn_code_log_random_value() {\r\n    return app_learn_code_log(app_learn_code_random_value());\r\n}\r\n","./public/src/app_learn_code_output_background.mjs":"export function app_learn_code_output_background() {\r\n    return 'lightgreen';\r\n}\r\n","./public/src/app_learn_code_quiz.mjs":"import {app_learn_code_quiz_inner} from \"./app_learn_code_quiz_inner.mjs\";\r\nexport function app_learn_code_quiz(source_get) {\r\n    return parent => app_learn_code_quiz_inner(parent, source_get);\r\n}\r\n","./public/src/app_learn_code_quiz_inner.mjs":"import {html_style_display_block} from \"./html_style_display_block.mjs\";\r\nimport {html_style_display_none} from \"./html_style_display_none.mjs\";\r\nimport {app_learn_code_range_retry} from \"./app_learn_code_range_retry.mjs\";\r\nimport {app_learn_code_answer_correct} from \"./app_learn_code_answer_correct.mjs\";\r\nimport {list_get} from \"./list_get.mjs\";\r\nimport {list_random_index} from \"./list_random_index.mjs\";\r\nimport {app_learn_code_style_success} from \"./app_learn_code_style_success.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {list_any} from \"./list_any.mjs\";\r\nimport {app_learn_code_eval_to_string} from \"./app_learn_code_eval_to_string.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nimport {html_disable} from \"./html_disable.mjs\";\r\nimport {html_style} from \"./html_style.mjs\";\r\nimport {html_button_width_full_text_click} from \"./html_button_width_full_text_click.mjs\";\r\nimport {each_index} from \"./each_index.mjs\";\r\nimport {app_learn_code_code_part_title_output} from \"./app_learn_code_code_part_title_output.mjs\";\r\nimport {app_learn_code_code_part_title} from \"./app_learn_code_code_part_title.mjs\";\r\nimport {html_hr} from \"./html_hr.mjs\";\r\nimport {app_learn_code_code_part_titled_code} from \"./app_learn_code_code_part_titled_code.mjs\";\r\nimport {list_add} from \"./list_add.mjs\";\r\nimport {array_new} from \"./array_new.mjs\";\r\nimport {range} from \"./range.mjs\";\r\nimport {app_learn_code_code_container} from \"./app_learn_code_code_container.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {html_clear} from \"./html_clear.mjs\";\r\nimport {html_div} from \"./html_div.mjs\";\r\nimport {list_sort_string} from \"./list_sort_string.mjs\";\r\nexport function app_learn_code_quiz_inner(parent, source_get) {\r\n    let previous;\r\n    let div = html_div(parent);\r\n    refresh(false);\r\n    function refresh(refreshed) {\r\n        html_clear(div);\r\n        html_p_text(div, 'below is a quiz');\r\n        html_p_text(div, 'choose the correct output for the code');\r\n        let container = app_learn_code_code_container(div);\r\n        let choices_count = 4;\r\n        let r = range(choices_count);\r\n        let choices = array_new();\r\n        for (let c of r) {\r\n            for (let i of app_learn_code_range_retry()) {\r\n                let source = source_get();\r\n                let answer = app_learn_code_eval_to_string(source);\r\n                if (list_any(choices, c => equal(c.answer, answer))) {\r\n                    continue;\r\n                }\r\n                if (equal(source, previous)) {\r\n                    continue;\r\n                }\r\n                list_add(choices, {\r\n                    source,\r\n                    answer\r\n                });\r\n                break;\r\n            }\r\n        }\r\n        list_sort_string(choices, c => c.answer);\r\n        let correct_index = list_random_index(choices);\r\n        let {source} = list_get(choices, correct_index);\r\n        previous = source;\r\n        app_learn_code_code_part_titled_code(container, source);\r\n        html_hr(container);\r\n        app_learn_code_code_part_title(container, app_learn_code_code_part_title_output());\r\n        each_index(choices, (c, index) => {\r\n            let {answer} = c;\r\n            let button = html_button_width_full_text_click(container, answer, function on_click() {\r\n                if (index === correct_index) {\r\n                    app_learn_code_style_success(button);\r\n                    setTimeout(() => {\r\n                        refresh(true);\r\n                        container_bottom_show();\r\n                    }, 200);\r\n                } else {\r\n                    container_bottom_hide();\r\n                    html_disable(button);\r\n                    html_style(button, {\r\n                        'background-color': 'salmon',\r\n                        'border-color': 'tomato'\r\n                    });\r\n                }\r\n            });\r\n            html_style_monospace(button);\r\n        });\r\n        let container_bottom = html_div(div);\r\n        if (!refreshed) {\r\n            container_bottom_hide();\r\n        }\r\n        app_learn_code_answer_correct(container_bottom);\r\n        html_p_text(container_bottom, 'if you want , take another quiz above');\r\n        html_p_text(container_bottom, 'otherwise , press the \"next\" button below');\r\n        function container_bottom_hide() {\r\n            html_style_display_none(container_bottom);\r\n        }\r\n        function container_bottom_show() {\r\n            html_style_display_block(container_bottom);\r\n        }\r\n    }\r\n}\r\n","./public/src/app_learn_code_random_boolean_binary.mjs":"import {random_50_50} from \"./random_50_50.mjs\";\r\nimport {list_includes} from \"./list_includes.mjs\";\r\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\r\nimport {call_multiple} from \"./call_multiple.mjs\";\r\nimport {list_random_item} from \"./list_random_item.mjs\";\r\nexport function app_learn_code_random_boolean_binary() {\r\n    let operators = ['<', '<=', '>', '>=', '===', '!=='];\r\n    let operator = list_random_item(operators);\r\n    let operators_equality = ['===', '!=='];\r\n    let values = call_multiple(integer_random_digit_single_positive, 2);\r\n    let [a, b] = values;\r\n    if (list_includes(operators_equality, operator) && random_50_50()) {\r\n        b = a;\r\n    }\r\n    let boolean = `${a} ${operator} ${b}`;\r\n    return boolean;\r\n}\r\n","./public/src/app_learn_code_random_identifier.mjs":"import {list_single} from \"./list_single.mjs\";\r\nimport {app_learn_code_random_identifiers} from \"./app_learn_code_random_identifiers.mjs\";\r\nexport function app_learn_code_random_identifier() {\r\n    let list = app_learn_code_random_identifiers(1);\r\n    return list_single(list);\r\n}\r\n","./public/src/app_learn_code_random_identifiers.mjs":"import {keyboard_keys} from \"./keyboard_keys.mjs\";\r\nimport {list_remove} from \"./list_remove.mjs\";\r\nimport {list_scramble} from \"./list_scramble.mjs\";\r\nimport {list_take} from \"./list_take.mjs\";\r\nexport function app_learn_code_random_identifiers(count) {\r\n    let ks = keyboard_keys();\r\n    'the letter l looks like an i and a 1 so removing to to avoid visual ambiguity';\r\n    list_remove(ks, 'l');\r\n    list_scramble(ks);\r\n    return list_take(ks, count);\r\n}\r\n","./public/src/app_learn_code_random_value.mjs":"import {lesson_console_log_quiz_value} from \"./lesson_console_log_quiz_value.mjs\";\r\nimport {random_50_50} from \"./random_50_50.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {integer_random} from \"./integer_random.mjs\";\r\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\r\nexport function app_learn_code_random_value() {\r\n    let value;\r\n    let r = integer_random(1, 3);\r\n    if (equal(r, 1)) {\r\n        value = integer_random_digit_single_positive();\r\n    } else if (equal(r, 2)) {\r\n        value = random_50_50();\r\n    } else {\r\n        value = lesson_console_log_quiz_value();\r\n    }\r\n    return value;\r\n}\r\n","./public/src/app_learn_code_range_retry.mjs":"import {app_learn_code_retry_count} from \"./app_learn_code_retry_count.mjs\";\r\nimport {range} from \"./range.mjs\";\r\nexport function app_learn_code_range_retry() {\r\n    return range(app_learn_code_retry_count());\r\n}\r\n","./public/src/app_learn_code_retry_count.mjs":"export function app_learn_code_retry_count() {\r\n    return 100;\r\n}\r\n","./public/src/app_learn_code_source_to_tokens.mjs":"import {list_includes} from \"./list_includes.mjs\";\r\nimport {string_delimit} from \"./string_delimit.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {list_map} from \"./list_map.mjs\";\r\nimport {js_tokenize} from \"./js_tokenize.mjs\";\r\nimport {list_adder} from \"./list_adder.mjs\";\r\nexport function app_learn_code_source_to_tokens(source) {\r\n    let tokens = list_adder(la => {\r\n        for (let token of js_tokenize(source)) {\r\n            la(token);\r\n        }\r\n    });\r\n    let answer = list_map(tokens, t => {\r\n        let {type} = t;\r\n        let {label} = type;\r\n        let {value} = t;\r\n        if (equal(label, 'string')) {\r\n            return string_delimit(value);\r\n        }\r\n        let labels = ['name', 'num', '+/-', '</>/<=/>=', '==/!=/===/!=='];\r\n        if (list_includes(labels, label)) {\r\n            return value;\r\n        }\r\n        return label;\r\n    });\r\n    return answer;\r\n}\r\n","./public/src/app_learn_code_source_variations.mjs":"import {js_unparse_indent_none} from \"./js_unparse_indent_none.mjs\";\r\nimport {list_empty_not_is} from \"./list_empty_not_is.mjs\";\r\nimport {list_includes_not} from \"./list_includes_not.mjs\";\r\nimport {list_remove} from \"./list_remove.mjs\";\r\nimport {js_node_types} from \"./js_node_types.mjs\";\r\nimport {js_visit_node} from \"./js_visit_node.mjs\";\r\nimport {less_than} from \"./less_than.mjs\";\r\nimport {string_split_empty} from \"./string_split_empty.mjs\";\r\nimport {number_string_to} from \"./number_string_to.mjs\";\r\nimport {list_filter} from \"./list_filter.mjs\";\r\nimport {object_property_swap} from \"./object_property_swap.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {js_node_type} from \"./js_node_type.mjs\";\r\nimport {js_parse} from \"./js_parse.mjs\";\r\nimport {list_includes} from \"./list_includes.mjs\";\r\nimport {list_length} from \"./list_length.mjs\";\r\nimport {range} from \"./range.mjs\";\r\nimport {list_get} from \"./list_get.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nimport {string_length} from \"./string_length.mjs\";\r\nimport {list_add} from \"./list_add.mjs\";\r\nimport {list_empty_is} from \"./list_empty_is.mjs\";\r\nimport {object_property_set} from \"./object_property_set.mjs\";\r\nimport {list_pop} from \"./list_pop.mjs\";\r\nexport function app_learn_code_source_variations(source) {\r\n    let operators = ['+', '*', '===', '!=='];\r\n    let {filtered, ast} = ast_filtered(source);\r\n    let filtered_length = list_length(filtered);\r\n    let s = js_unparse_indent_none(ast);\r\n    if (equal(filtered_length, 0)) {\r\n        return [s];\r\n    }\r\n    let result = [];\r\n    let remaining = [s];\r\n    while (list_empty_not_is(remaining)) {\r\n        let r = list_pop(remaining);\r\n        let count = Math.pow(2, filtered_length);\r\n        for (let i of range(count)) {\r\n            let {filtered, ast} = ast_filtered(r);\r\n            let base2 = number_string_to(i, 2);\r\n            while (less_than(string_length(base2), filtered_length)) {\r\n                base2 = string_combine(\"0\", base2);\r\n            }\r\n            let b_split = string_split_empty(base2);\r\n            let b_split_length = list_length(b_split);\r\n            for (let n of range(filtered_length)) {\r\n                let swap = false;\r\n                if (less_than(n, b_split_length)) {\r\n                    let b_split_n = list_get(b_split, n);\r\n                    swap = equal(b_split_n, '0');\r\n                }\r\n                if (swap) {\r\n                    let filtered_n = list_get(filtered, n);\r\n                    object_property_swap(filtered_n, 'left', 'right');\r\n                }\r\n            }\r\n            js_visit_node(ast, 'BinaryExpression', v => {\r\n                let {node} = v;\r\n                let nt = js_node_types(node);\r\n                let valid = ['BinaryExpression', 'Identifier', 'Literal'];\r\n                for (let v of valid) {\r\n                    if (list_includes(nt, v)) {\r\n                        list_remove(nt, v);\r\n                    }\r\n                }\r\n                if (list_empty_is(nt)) {\r\n                    let {right} = node;\r\n                    let {type} = right;\r\n                    if (equal(type, 'BinaryExpression')) {\r\n                        let {operator} = node;\r\n                        let {operator: operator_r} = right;\r\n                        if (equal(operator_r, operator)) {\r\n                            let {left} = node;\r\n                            let {left: left_r, right: right_r} = right;\r\n                            object_property_set(node, 'left', right);\r\n                            object_property_set(right, 'left', left);\r\n                            object_property_set(right, 'right', left_r);\r\n                            object_property_set(node, 'right', right_r);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            let alternative = js_unparse_indent_none(ast);\r\n            if (list_includes_not(result, alternative)) {\r\n                list_add(result, alternative);\r\n                list_add(remaining, alternative);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n    function ast_filtered(source) {\r\n        let ast = js_parse(source);\r\n        let bes = js_node_type(ast, 'BinaryExpression');\r\n        let filtered = list_filter(bes, be => {\r\n            let {operator} = be;\r\n            return list_includes(operators, operator);\r\n        });\r\n        return {\r\n            filtered,\r\n            ast\r\n        };\r\n    }\r\n}\r\n","./public/src/app_learn_code_style_code.mjs":"import {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nimport {app_learn_code_style_rounded_padded} from \"./app_learn_code_style_rounded_padded.mjs\";\r\nexport function app_learn_code_style_code(code) {\r\n    app_learn_code_style_rounded_padded(code);\r\n    html_style_monospace(code);\r\n}\r\n","./public/src/app_learn_code_style_code_color.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function app_learn_code_style_code_color(code) {\r\n    html_style(code, {\r\n        'color': 'white'\r\n    });\r\n}\r\n","./public/src/app_learn_code_style_code_colored.mjs":"import {app_learn_code_style_code} from \"./app_learn_code_style_code.mjs\";\r\nimport {html_style_background_color} from \"./html_style_background_color.mjs\";\r\nexport function app_learn_code_style_code_colored(component) {\r\n    html_style_background_color(component, '#cfe7f7');\r\n    app_learn_code_style_code(component);\r\n}\r\n","./public/src/app_learn_code_style_code_color_background.mjs":"export function app_learn_code_style_code_color_background() {\r\n    return 'black';\r\n}\r\n","./public/src/app_learn_code_style_rounded_padded.mjs":"import {app_learn_code_style_rounded_padded_style} from \"./app_learn_code_style_rounded_padded_style.mjs\";\r\nimport {html_style} from \"./html_style.mjs\";\r\nexport function app_learn_code_style_rounded_padded(component) {\r\n    html_style(component, app_learn_code_style_rounded_padded_style());\r\n}\r\n","./public/src/app_learn_code_style_rounded_padded_style.mjs":"import {html_style_units} from \"./html_style_units.mjs\";\r\nexport function app_learn_code_style_rounded_padded_style() {\r\n    return {\r\n        'padding': html_style_units(2),\r\n        'border-radius': html_style_units(5)\r\n    };\r\n}\r\n","./public/src/app_learn_code_style_success.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function app_learn_code_style_success(component) {\r\n    html_style(component, {\r\n        'background-color': 'lightgreen',\r\n        'border-color': 'MediumSeaGreen'\r\n    });\r\n}\r\n","./public/src/app_learn_code_unique.mjs":"import {list_includes_not} from \"./list_includes_not.mjs\";\r\nimport {app_learn_code_range_retry} from \"./app_learn_code_range_retry.mjs\";\r\nexport function app_learn_code_unique(value_get, existing) {\r\n    let value2;\r\n    for (let i of app_learn_code_range_retry()) {\r\n        value2 = value_get();\r\n        if (list_includes_not(existing, value2)) {\r\n            break;\r\n        }\r\n    }\r\n    return value2;\r\n}\r\n","./public/src/app_learn_code_unique_multiple.mjs":"import {greater_than_equal} from \"./greater_than_equal.mjs\";\r\nimport {list_add} from \"./list_add.mjs\";\r\nimport {app_learn_code_unique} from \"./app_learn_code_unique.mjs\";\r\nimport {range} from \"./range.mjs\";\r\nimport {array_new} from \"./array_new.mjs\";\r\nimport {assert} from \"./assert.mjs\";\r\nexport function app_learn_code_unique_multiple(value_get, count) {\r\n    assert(greater_than_equal, [count, 2]);\r\n    let names = array_new();\r\n    for (let i of range(count)) {\r\n        let name = app_learn_code_unique(value_get, names);\r\n        list_add(names, name);\r\n    }\r\n    return names;\r\n}\r\n","./public/src/app_learn_code_unscramble.mjs":"import {html_style_hidden} from \"./html_style_hidden.mjs\";\r\nimport {list_empty_is} from \"./list_empty_is.mjs\";\r\nimport {null_not_is} from \"./null_not_is.mjs\";\r\nimport {app_learn_code_source_to_tokens} from \"./app_learn_code_source_to_tokens.mjs\";\r\nimport {app_learn_code_source_variations} from \"./app_learn_code_source_variations.mjs\";\r\nimport {app_learn_code_answer_correct} from \"./app_learn_code_answer_correct.mjs\";\r\nimport {list_scramble} from \"./list_scramble.mjs\";\r\nimport {string_take} from \"./string_take.mjs\";\r\nimport {list_take} from \"./list_take.mjs\";\r\nimport {app_learn_code_code_part_titled_code} from \"./app_learn_code_code_part_titled_code.mjs\";\r\nimport {list_copy} from \"./list_copy.mjs\";\r\nimport {app_learn_code_code_part_titled_output} from \"./app_learn_code_code_part_titled_output.mjs\";\r\nimport {html_style_units} from \"./html_style_units.mjs\";\r\nimport {app_learn_code_style_code_color} from \"./app_learn_code_style_code_color.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {app_learn_code_code_background} from \"./app_learn_code_code_background.mjs\";\r\nimport {html_span_text} from \"./html_span_text.mjs\";\r\nimport {app_learn_code_code_part_generic} from \"./app_learn_code_code_part_generic.mjs\";\r\nimport {app_learn_code_eval_messages_to_string} from \"./app_learn_code_eval_messages_to_string.mjs\";\r\nimport {app_learn_code_eval} from \"./app_learn_code_eval.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {list_map} from \"./list_map.mjs\";\r\nimport {html_style} from \"./html_style.mjs\";\r\nimport {list_length} from \"./list_length.mjs\";\r\nimport {list_get} from \"./list_get.mjs\";\r\nimport {html_on_click} from \"./html_on_click.mjs\";\r\nimport {array_new} from \"./array_new.mjs\";\r\nimport {list_add} from \"./list_add.mjs\";\r\nimport {html_inner_set} from \"./html_inner_set.mjs\";\r\nimport {html_clear} from \"./html_clear.mjs\";\r\nimport {add} from \"./add.mjs\";\r\nimport {string_length} from \"./string_length.mjs\";\r\nimport {html_div} from \"./html_div.mjs\";\r\nimport {html_button_width_full_text_click} from \"./html_button_width_full_text_click.mjs\";\r\nimport {html_style_centered} from \"./html_style_centered.mjs\";\r\nimport {list_first} from \"./list_first.mjs\";\r\nimport {add_1} from \"./add_1.mjs\";\r\nimport {list_concat} from \"./list_concat.mjs\";\r\nimport {list_equal} from \"./list_equal.mjs\";\r\nimport {list_filter} from \"./list_filter.mjs\";\r\nimport {html_style_background_color} from \"./html_style_background_color.mjs\";\r\nimport {app_learn_code_range_retry} from \"./app_learn_code_range_retry.mjs\";\r\nimport {equal_not} from \"./equal_not.mjs\";\r\nexport function app_learn_code_unscramble(source_get) {\r\n    return function app_learn_code_unscramble_inner(parent) {\r\n        let previous;\r\n        let div = html_div(parent);\r\n        refresh();\r\n        function refresh() {\r\n            html_clear(div);\r\n            let source;\r\n            for (let i of app_learn_code_range_retry()) {\r\n                source = source_get();\r\n                if (equal_not(source, previous)) {\r\n                    break;\r\n                }\r\n            }\r\n            previous = source;\r\n            let variations = app_learn_code_source_variations(source);\r\n            source = list_first(variations);\r\n            let messages = app_learn_code_eval(source);\r\n            let joined = app_learn_code_eval_messages_to_string(messages);\r\n            html_p_text(div, 'below is another quiz');\r\n            html_p_text(div, 'write a program that outputs the following :');\r\n            app_learn_code_code_part_titled_output(div, joined);\r\n            html_p_text(div, 'tap or click each part of the program in the correct order');\r\n            let {code} = app_learn_code_code_part_titled_code(div, 'a');\r\n            html_style_hidden(code);\r\n            let success = html_div(div);\r\n            let answers = list_map(variations, v => {\r\n                return {\r\n                    tokens: app_learn_code_source_to_tokens(v),\r\n                    source: v\r\n                };\r\n            });\r\n            let answer = app_learn_code_source_to_tokens(source);\r\n            let scrambled = list_copy(answer);\r\n            list_scramble(scrambled);\r\n            let parts = array_new();\r\n            let current_index = 0;\r\n            let choices = array_new();\r\n            for (let s of scrambled) {\r\n                let part = app_learn_code_code_part_generic(html_span_text, div, s, app_learn_code_code_background());\r\n                list_add(parts, part);\r\n                app_learn_code_style_code_color(part);\r\n                html_style(part, {\r\n                    margin: html_style_units(3),\r\n                    display: 'inline-block',\r\n                    cursor: 'pointer',\r\n                    'min-width': html_style_units(15)\r\n                });\r\n                html_style_centered(part);\r\n                html_on_click(part, () => {\r\n                    let mapped = list_map(answers, a => {\r\n                        let {tokens} = a;\r\n                        let expected = list_take(tokens, add_1(current_index));\r\n                        let actual = list_concat(choices, [s]);\r\n                        if (list_equal(expected, actual)) {\r\n                            return a;\r\n                        }\r\n                        return null;\r\n                    });\r\n                    let filtered = list_filter(mapped, m => null_not_is(m));\r\n                    if (list_empty_is(filtered)) {\r\n                        html_style_background_color(part, 'darkred');\r\n                        return;\r\n                    }\r\n                    let first = list_first(filtered);\r\n                    let {tokens} = first;\r\n                    let current = list_get(tokens, current_index);\r\n                    list_add(choices, s);\r\n                    html_style(code, {\r\n                        visibility: 'visible'\r\n                    });\r\n                    for (let p of parts) {\r\n                        html_style_background_color(p, app_learn_code_code_background());\r\n                    }\r\n                    html_style(part, {\r\n                        display: 'none'\r\n                    });\r\n                    let first_source = first.source;\r\n                    current_index++;\r\n                    let source_index = 0;\r\n                    for (let c of choices) {\r\n                        source_index = first_source.indexOf(c, source_index);\r\n                    }\r\n                    let take_count = add(source_index, string_length(current.toString()));\r\n                    html_inner_set(code, string_take(first_source, take_count));\r\n                    if (equal(current_index, list_length(answer))) {\r\n                        html_style_background_color(code, 'darkgreen');\r\n                        app_learn_code_answer_correct(success);\r\n                        html_p_text(success, 'if you want to take another quiz , press the \"another quiz\" button below : ');\r\n                        html_p_text(success, 'otherwise , press the \"next\" button below');\r\n                        html_button_width_full_text_click(success, 'another quiz', refresh);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n}\r\n","./public/src/app_memorize.mjs":"import {html_style_button_default} from \"./html_style_button_default.mjs\";\r\nimport {keyboard_keys_rows} from \"./keyboard_keys_rows.mjs\";\r\nimport {html_hash} from \"./html_hash.mjs\";\r\nimport {html_style_visible} from \"./html_style_visible.mjs\";\r\nimport {html_style_hidden} from \"./html_style_hidden.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {list_last} from \"./list_last.mjs\";\r\nimport {app_memorize_group} from \"./app_memorize_group.mjs\";\r\nimport {undefined_not_is} from \"./undefined_not_is.mjs\";\r\nimport {html_style_font_color} from \"./html_style_font_color.mjs\";\r\nimport {html_scroll_center} from \"./html_scroll_center.mjs\";\r\nimport {list_adder} from \"./list_adder.mjs\";\r\nimport {greater_than_equal} from \"./greater_than_equal.mjs\";\r\nimport {string_case_lower} from \"./string_case_lower.mjs\";\r\nimport {string_letter_first} from \"./string_letter_first.mjs\";\r\nimport {html_style_button_default_initialize} from \"./html_style_button_default_initialize.mjs\";\r\nimport {multiply} from \"./multiply.mjs\";\r\nimport {list_length} from \"./list_length.mjs\";\r\nimport {string_case_upper} from \"./string_case_upper.mjs\";\r\nimport {html_style_centered} from \"./html_style_centered.mjs\";\r\nimport {html_button} from \"./html_button.mjs\";\r\nimport {html_div} from \"./html_div.mjs\";\r\nimport {subtract} from \"./subtract.mjs\";\r\nimport {string_to} from \"./string_to.mjs\";\r\nimport {html_style_background_color} from \"./html_style_background_color.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {and} from \"./and.mjs\";\r\nimport {html_style_default_font_size} from \"./html_style_default_font_size.mjs\";\r\nimport {bible_engbsb_storage_path_file} from \"./bible_engbsb_storage_path_file.mjs\";\r\nimport {storage_url} from \"./storage_url.mjs\";\r\nimport {http_get} from \"./http_get.mjs\";\r\nimport {html_document_body} from \"./html_document_body.mjs\";\r\nimport {html_element} from \"./html_element.mjs\";\r\nimport {html_inner_set} from \"./html_inner_set.mjs\";\r\nimport {html_span_text} from \"./html_span_text.mjs\";\r\nimport {html_strong_text} from \"./html_strong_text.mjs\";\r\nimport {html_style_sans_serif} from \"./html_style_sans_serif.mjs\";\r\nimport {each_index} from \"./each_index.mjs\";\r\nimport {html_style} from \"./html_style.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nimport {string_split} from \"./string_split.mjs\";\r\nimport {html_button_width_full_text_click} from \"./html_button_width_full_text_click.mjs\";\r\nimport {add} from \"./add.mjs\";\r\nimport {html_on_click} from \"./html_on_click.mjs\";\r\nimport {list_get} from \"./list_get.mjs\";\r\nimport {html_clear} from \"./html_clear.mjs\";\r\nimport {list_first} from \"./list_first.mjs\";\r\nimport {string_combine_multiple} from \"./string_combine_multiple.mjs\";\r\nimport {mod} from \"./mod.mjs\";\r\nimport {add_1} from \"./add_1.mjs\";\r\nimport {list_index} from \"./list_index.mjs\";\r\nimport {list_map} from \"./list_map.mjs\";\r\nimport {string_replace} from \"./string_replace.mjs\";\r\nimport {html_on} from \"./html_on.mjs\";\r\nimport {object_property_set} from \"./object_property_set.mjs\";\r\nimport {object_property_get} from \"./object_property_get.mjs\";\r\nimport {list_add} from \"./list_add.mjs\";\r\nexport async function app_memorize() {\r\n    let root = html_document_body();\r\n    html_style(root, {\r\n        margin: '0'\r\n    });\r\n    html_style_sans_serif(root);\r\n    html_style_default_font_size(3);\r\n    html_style_button_default_initialize();\r\n    let file_path = bible_engbsb_storage_path_file('JHN19');\r\n    let verses = await http_get(storage_url(file_path));\r\n    let verses_length = list_length(verses);\r\n    let groups = app_memorize_group(verses_length);\r\n    let patterns;\r\n    let patterns_length;\r\n    let pattern_index;\r\n    let group_current;\r\n    let verse_index;\r\n    let token_index;\r\n    let previous_spacer2;\r\n    let previous_token_element;\r\n    let verse_elements;\r\n    let keyboard_buttons;\r\n    let mistakes;\r\n    let button_height = 7;\r\n    group_current_set(list_first(groups));\r\n    html_hash({\r\n        'verses': value => {\r\n            let mapped = list_map(groups, group_to_range_string);\r\n            let mapped2 = list_map(mapped, m => string_replace(m, ' ', ''));\r\n            let index = list_index(mapped2, value);\r\n            let g = list_get(groups, index);\r\n            group_current_set(g);\r\n        },\r\n        'pattern': value => {\r\n            pattern_index = list_index(patterns, value);\r\n        }\r\n    });\r\n    refresh_memorize();\r\n    function group_current_set(g) {\r\n        group_current = g;\r\n        if (equal(list_length(group_current), 1)) {\r\n            patterns = ['1', '110', '10', '01', '01001', '001', '0', '0', '0', '0'];\r\n        } else {\r\n            patterns = ['1', '10', '0', '0', '0', '0'];\r\n        }\r\n        patterns_length = list_length(patterns);\r\n        verse_index = 0;\r\n        token_index = 0;\r\n        pattern_index = 0;\r\n        mistakes = false;\r\n    }\r\n    function refresh_settings() {\r\n        html_clear(root);\r\n        html_button_width_full_text_click(root, 'back', () => {\r\n            refresh_memorize();\r\n        });\r\n        html_button_width_full_text_click(root, string_combine_multiple(['verses ', group_to_range_string(group_current)]), () => {\r\n            html_clear(root);\r\n            html_button_width_full_text_click(root, 'back', () => {\r\n                refresh_settings();\r\n            });\r\n            html_p_text(root, 'which verse range do you want to focus on ?');\r\n            for (let g of groups) {\r\n                let b = html_button(root);\r\n                html_inner_set(b, group_to_range_string(g));\r\n                html_on_click(b, () => {\r\n                    group_current_set(g);\r\n                    refresh_settings();\r\n                });\r\n            }\r\n        });\r\n        html_button_width_full_text_click(root, string_combine_multiple(['pattern ', list_get(patterns, pattern_index)]), () => {\r\n            html_clear(root);\r\n            html_button_width_full_text_click(root, 'back', () => {\r\n                refresh_settings();\r\n            });\r\n            html_p_text(root, 'which pattern of shown and hidden words do you want ?');\r\n            each_index(patterns, (p, i) => {\r\n                let b = html_button(root);\r\n                html_inner_set(b, p);\r\n                html_on_click(b, () => {\r\n                    pattern_index = i;\r\n                    refresh_settings();\r\n                });\r\n            });\r\n        });\r\n    }\r\n    function group_to_range_string(g) {\r\n        let first_verse_index = list_first(g);\r\n        let first_verse = list_get(verses, first_verse_index);\r\n        let {verse_number: first_verse_number} = first_verse;\r\n        let first_number = first_verse_number;\r\n        let last_verse_index = list_last(g);\r\n        let last_verse = list_get(verses, last_verse_index);\r\n        let {verse_number: last_verse_number} = last_verse;\r\n        let last_number = last_verse_number;\r\n        return string_combine_multiple([first_number, ' - ', last_number]);\r\n    }\r\n    function refresh_memorize() {\r\n        html_clear(root);\r\n        verse_index = 0;\r\n        token_index = 0;\r\n        previous_spacer2 = undefined;\r\n        previous_token_element = undefined;\r\n        verse_elements = undefined;\r\n        mistakes = false;\r\n        keyboard_buttons = {};\r\n        let p = list_get(patterns, pattern_index);\r\n        let pattern = string_split(p, '');\r\n        let settings_element = html_element(root, 'div');\r\n        let settings_button = html_button_width_full_text_click(settings_element, '⚙️ settings', refresh_settings);\r\n        html_style(settings_button, {\r\n            'margin-left': 0,\r\n            'margin-right': 0\r\n        });\r\n        let verses_element = html_element(root, 'div');\r\n        let keys = keyboard_keys_rows();\r\n        let keys_length = list_length(keys);\r\n        let keyboard_height = multiply(button_height, keys_length);\r\n        let offset = add(keyboard_height, 7);\r\n        let height_max = subtract(100, offset);\r\n        html_style(verses_element, {\r\n            'max-height': number_to_dvh(height_max),\r\n            'min-height': number_to_dvh(height_max),\r\n            'overflow-y': 'scroll'\r\n        });\r\n        let pattern_length = list_length(pattern);\r\n        let token_count = 0;\r\n        verse_elements = list_adder(la => {\r\n            each_index(group_current, (i, j) => {\r\n                let verse = list_get(verses, i);\r\n                let verse_element = html_element(verses_element, 'div');\r\n                let {tokens, verse_number} = verse;\r\n                let number_element = html_strong_text(verse_element, verse_number);\r\n                html_on_click(number_element, () => {\r\n                    token_index = 0;\r\n                    verse_index = j;\r\n                    html_scroll_center(verse_element);\r\n                });\r\n                let token_objects = list_adder(la => {\r\n                    each_index(tokens, (token, j) => {\r\n                        let m = mod(token_count, pattern_length);\r\n                        let token_pattern = list_get(pattern, m);\r\n                        let spacer = html_span_text(verse_element, ' ');\r\n                        let spacer2 = html_span_text(verse_element, '.');\r\n                        html_style_background_color(spacer2, 'green');\r\n                        html_style_font_color(spacer2, 'green');\r\n                        for (let s of [spacer, spacer2]) {\r\n                            html_style_hidden(s);\r\n                        }\r\n                        let token_element = html_span_text(verse_element, token);\r\n                        if (equal(token_pattern, '0')) {\r\n                            html_style_hidden(token_element);\r\n                        }\r\n                        la({\r\n                            spacer2,\r\n                            token_element\r\n                        });\r\n                        token_count++;\r\n                    });\r\n                });\r\n                la({\r\n                    verse_element,\r\n                    token_objects\r\n                });\r\n            });\r\n        });\r\n        update_colors();\r\n        let keyboard_element = html_element(root, 'div');\r\n        html_style(keyboard_element, {\r\n            'max-height': number_to_dvh(keyboard_height)\r\n        });\r\n        for (let row of keys) {\r\n            let row_element = html_div(keyboard_element);\r\n            html_style_centered(row_element);\r\n            for (let k of row) {\r\n                let b = html_button(row_element);\r\n                object_property_set(keyboard_buttons, k, b);\r\n                html_inner_set(b, string_case_upper(k));\r\n                button_stylize(b);\r\n                html_on_click(b, () => {\r\n                    on_keydown(k);\r\n                });\r\n            }\r\n        }\r\n        return {\r\n            verse_elements\r\n        };\r\n    }\r\n    function button_stylize(b) {\r\n        let b_width = number_to_dvw(10 - 1);\r\n        html_style_centered(b);\r\n        html_style_margin_default(b);\r\n        html_style(b, {\r\n            'font-size': '3.8dvh',\r\n            'min-width': b_width,\r\n            'max-width': b_width,\r\n            'height': number_to_dvh(button_height - 0.6)\r\n        });\r\n    }\r\n    function update_colors() {\r\n        let current_verse = list_get(verse_elements, verse_index);\r\n        let {verse_element, token_objects} = current_verse;\r\n        let current_token = list_get(token_objects, token_index);\r\n        html_scroll_center(verse_element);\r\n        let {spacer2, token_element} = current_token;\r\n        html_style_visible(spacer2);\r\n        if (undefined_not_is(previous_spacer2)) {\r\n            html_style_hidden(previous_spacer2);\r\n        }\r\n        if (undefined_not_is(previous_token_element)) {\r\n            html_style_visible(previous_token_element);\r\n            console.log('here', previous_token_element);\r\n        }\r\n        previous_spacer2 = spacer2;\r\n        previous_token_element = token_element;\r\n    }\r\n    html_on(root, 'keydown', e => {\r\n        let {keyCode} = e;\r\n        let c = String.fromCharCode(keyCode);\r\n        let c_lower = string_case_lower(c);\r\n        on_keydown(c_lower);\r\n    });\r\n    let errored_keys = [];\r\n    function on_keydown(k) {\r\n        let j = list_get(group_current, verse_index);\r\n        let current_verse = list_get(verses, j);\r\n        let {tokens} = current_verse;\r\n        let current_token = list_get(tokens, token_index);\r\n        let letter_first = string_case_lower(string_letter_first(current_token));\r\n        if (equal(k, letter_first)) {\r\n            token_index++;\r\n            let tokens_length = list_length(tokens);\r\n            if (greater_than_equal(token_index, tokens_length)) {\r\n                verse_index++;\r\n                token_index = 0;\r\n            }\r\n            let group_current_length = list_length(group_current);\r\n            if (greater_than_equal(verse_index, group_current_length)) {\r\n                verse_index = 0;\r\n                let pattern = list_get(patterns, pattern_index);\r\n                if (and(equal(pattern, '0'), mistakes)) {\r\n                    mistakes = false;\r\n                } else {\r\n                    pattern_index++;\r\n                    if (greater_than_equal(pattern_index, patterns_length)) {\r\n                        let group_current_index = list_index(groups, group_current);\r\n                        let group_next_index = add_1(group_current_index);\r\n                        let group_next = list_get(groups, group_next_index);\r\n                        group_current_set(group_next);\r\n                    }\r\n                }\r\n                refresh_memorize();\r\n            } else {\r\n                update_colors();\r\n            }\r\n            for (let errored_key of errored_keys) {\r\n                html_style(errored_key, html_style_button_default());\r\n                button_stylize(errored_key, button_height);\r\n            }\r\n        } else {\r\n            mistakes = true;\r\n            html_style_visible(previous_token_element);\r\n            html_style_font_color(previous_token_element, 'red');\r\n            let keyboard_button = object_property_get(keyboard_buttons, k);\r\n            html_style(keyboard_button, {\r\n                'border-color': 'red'\r\n            });\r\n            html_style_background_color(keyboard_button, 'salmon');\r\n            list_add(errored_keys, keyboard_button);\r\n        }\r\n    }\r\n    function number_to_dvh(value) {\r\n        return string_combine(string_to(value), 'dvh');\r\n    }\r\n    function number_to_dvw(value) {\r\n        return string_combine(string_to(value), 'dvw');\r\n    }\r\n}\r\nfunction html_style_margin_default(b) {\r\n    html_style(b, {\r\n        margin: '0.25dvh',\r\n    });\r\n}\r\n\r\n","./public/src/app_memorize_group.mjs":"import {add} from \"./add.mjs\";\r\nimport {divide} from \"./divide.mjs\";\r\nimport {less_than_equal} from \"./less_than_equal.mjs\";\r\nimport {list_add} from \"./list_add.mjs\";\r\nimport {list_length} from \"./list_length.mjs\";\r\nimport {list_skip} from \"./list_skip.mjs\";\r\nimport {list_take} from \"./list_take.mjs\";\r\nimport {mod} from \"./mod.mjs\";\r\nimport {range} from \"./range.mjs\";\r\nexport function app_memorize_group(count) {\r\n    let indices = range(count);\r\n    let sub = 2;\r\n    let result = [];\r\n    recursive(result, indices);\r\n    return result;\r\n    function recursive(result, list) {\r\n        let length = list_length(list);\r\n        if (less_than_equal(length, 1)) {\r\n            list_add(result, list);\r\n            return;\r\n        }\r\n        let half = divide(length, sub);\r\n        let half_floor = floor(half);\r\n        let remainder = mod(length, sub);\r\n        let first_count = add(half_floor, remainder);\r\n        let first = list_take(list, first_count);\r\n        let second = list_skip(list, first_count);\r\n        let both = [first, second];\r\n        for (let b of both) {\r\n            recursive(result, b);\r\n        }\r\n        list_add(result, list);\r\n    }\r\n}\r\nfunction floor(value) {\r\n    return Math.floor(value);\r\n}\r\n","./public/src/app_new.mjs":"import {app_html_generate} from \"./app_html_generate.mjs\";\r\nimport {app_prefix} from \"./app_prefix.mjs\";\r\nimport {function_new} from \"./function_new.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nexport async function app_new(name) {\r\n    await app_html_generate(name);\r\n    let prefix = app_prefix();\r\n    let name_prefixed = string_combine(prefix, name);\r\n    await function_new(name_prefixed);\r\n}\r\n","./public/src/app_prefix.mjs":"export function app_prefix() {\r\n    return 'app_';\r\n}\r\n","./public/src/array_new.mjs":"export function array_new() {\r\n    return [];\r\n}\r\n","./public/src/assert.mjs":"import {returns} from \"./returns.mjs\";\r\nexport function assert(fn, args) {\r\n    returns(fn, true, args);\r\n}\r\n","./public/src/assert_async.mjs":"import {returns_async} from \"./returns_async.mjs\";\r\nexport async function assert_async(fn, args) {\r\n    await returns_async(fn, true, args);\r\n}\r\n","./public/src/assert_boolean.mjs":"import {error} from \"./error.mjs\";\r\nexport function assert_boolean(condition) {\r\n    if (condition === false) {\r\n        error('assert');\r\n    }\r\n}\r\n","./public/src/assert_not.mjs":"import {returns} from \"./returns.mjs\";\r\nexport function assert_not(fn, args) {\r\n    returns(fn, false, args);\r\n}\r\n","./public/src/assert_not_async.mjs":"import {returns_async} from \"./returns_async.mjs\";\r\nexport async function assert_not_async(fn, args) {\r\n    await returns_async(fn, false, args);\r\n}\r\n","./public/src/bible_ceb_chapter.mjs":"import {bible_engbsb_chapter} from \"./bible_engbsb_chapter.mjs\";\r\nimport {bible_verses_parse} from \"./bible_verses_parse.mjs\";\r\nimport {bible_chapter_parsed} from './bible_chapter_parsed.mjs';\r\nimport {string_case_lower} from './string_case_lower.mjs';\r\nimport {list_adder_unique} from './list_adder_unique.mjs';\r\nimport {string_replace_multiple} from './string_replace_multiple.mjs';\r\nimport {ceb_definition} from './ceb_definition.mjs';\r\nimport {object_property_set} from './object_property_set.mjs';\r\nimport {equal_by} from './equal_by.mjs';\r\nimport {assert} from './assert.mjs';\r\nimport {list_length} from './list_length.mjs';\r\nimport {json_to} from './json_to.mjs';\r\nimport {function_new_generic} from './function_new_generic.mjs';\r\nimport {js_code_return} from './js_code_return.mjs';\r\nexport async function bible_ceb_chapter(chapter_name) {\r\n    let eng = await bible_engbsb_chapter(chapter_name);\r\n    let parsed_ceb = await bible_chapter_parsed('cebulb_html', chapter_name);\r\n    let verses_ceb = parsed_ceb.querySelector('.p');\r\n    let rawText = verses_ceb.rawText;\r\n    let ceb = bible_verses_parse(rawText);\r\n    assert(equal_by, [eng, ceb, list_length]);\r\n    let symbols = [',', '1', '2', '.', ';', '“', '”', ':'];\r\n    let words_unique = list_adder_unique(la => {\r\n        for (let m of ceb) {\r\n            let {tokens} = m;\r\n            for (let token of tokens) {\r\n                let mapped3 = string_case_lower(token);\r\n                let mapped4 = string_replace_multiple(mapped3, symbols, '');\r\n                if (mapped4.length >= 1) {\r\n                    la(mapped4);\r\n                }\r\n            }\r\n        }\r\n    });\r\n    let definitions = {};\r\n    for (let w of words_unique) {\r\n        let d = await ceb_definition(w);\r\n        object_property_set(definitions, w, d);\r\n    }\r\n    let data = {\r\n        ceb,\r\n        eng,\r\n        definitions\r\n    };\r\n    let body_string = js_code_return(json_to(data));\r\n    const fn_name = `bible_data_${string_case_lower(chapter_name)}`;\r\n    await function_new_generic(fn_name, ``, body_string, false, [], false, false);\r\n    return fn_name;\r\n}\r\n","./public/src/bible_chapter_parsed.mjs":"import {file_read} from './file_read.mjs';\r\nimport {path_join} from './path_join.mjs';\r\nimport {string_combine} from './string_combine.mjs';\r\nimport {html_parse} from './html_parse.mjs';\r\nimport {folder_gitignore} from './folder_gitignore.mjs';\r\nexport async function bible_chapter_parsed(bible_folder, chapter_name) {\r\n    let folder_gitignore_result = folder_gitignore();\r\n    let folder = path_join([folder_gitignore_result, bible_folder]);\r\n    let chapter_path = string_combine(chapter_name, '.htm');\r\n    let joined = path_join([folder, chapter_path]);\r\n    let read = await file_read(joined);\r\n    let parsed = html_parse(read);\r\n    let notemarks = parsed.querySelectorAll('.notemark');\r\n    for (let n of notemarks) {\r\n        n.remove();\r\n    }\r\n    return parsed;\r\n}\r\n","./public/src/bible_data_jas01.mjs":"export function bible_data_jas01() {\r\n    return {\r\n        \"ceb\": [{\r\n            \"verse_number\": \"1\",\r\n            \"tokens\": [\"Si\", \"Santiago,\", \"usa\", \"ka\", \"sulugoon\", \"sa\", \"Dios\", \"ug\", \"kang\", \"Ginoong\", \"Jesu-Cristo,\", \"ngadto\", \"sa\", \"12\", \"ka\", \"mga\", \"tribo\", \"nga\", \"Nagkatibulaag,\", \"mga\", \"pangamusta.\"]\r\n        }, {\r\n            \"verse_number\": \"2\",\r\n            \"tokens\": [\"Isipa\", \"kining\", \"tanan\", \"nga\", \"kalipay,\", \"akong\", \"mga\", \"igsoon,\", \"sa\", \"dihang\", \"kamo\", \"makasinati\", \"sa\", \"daghang\", \"mga\", \"kasamok,\"]\r\n        }, {\r\n            \"verse_number\": \"3\",\r\n            \"tokens\": [\"nasayod\", \"kamo\", \"nga\", \"ang\", \"pagsulay\", \"sa\", \"inyong\", \"pagtuo\", \"mosangpot\", \"sa\", \"paglahutay.\"]\r\n        }, {\r\n            \"verse_number\": \"4\",\r\n            \"tokens\": [\"Tugoti\", \"nga\", \"ang\", \"paglahutay\", \"nga\", \"hingpit\", \"mabuhat,\", \"aron\", \"nga\", \"kamo\", \"mamahimong\", \"mahingpit\", \"ug\", \"hingkod,\", \"ug\", \"walay\", \"makulang.\"]\r\n        }, {\r\n            \"verse_number\": \"5\",\r\n            \"tokens\": [\"Apan\", \"kung\", \"adunay\", \"usa\", \"kaninyo\", \"nga\", \"nanginahanglan\", \"ug\", \"kaalam,\", \"pangayo\", \"niini\", \"gikan\", \"sa\", \"Dios,\", \"ang\", \"usa\", \"nga\", \"mohatag\", \"nga\", \"madagayaon\", \"ug\", \"walay\", \"pagbadlong\", \"sa\", \"tanan\", \"nga\", \"mangayo,\", \"ug\", \"siya\", \"mohatag\", \"niini.\"]\r\n        }, {\r\n            \"verse_number\": \"6\",\r\n            \"tokens\": [\"Apan\", \"pangayo\", \"uban\", \"sa\", \"pagtuo,\", \"nga\", \"walay\", \"pagduhaduha,\", \"kay\", \"ang\", \"usa\", \"nga\", \"nagduhaduha\", \"sama\", \"sa\", \"balod\", \"sa\", \"dagat,\", \"dad-on\", \"pinaagi\", \"sa\", \"hangin\", \"ug\", \"dalahon\", \"bisan\", \"asa.\"]\r\n        }, {\r\n            \"verse_number\": \"7\",\r\n            \"tokens\": [\"Tungod\", \"kay\", \"ang\", \"usa\", \"ka\", \"tawo\", \"kinahanglan\", \"dili\", \"maghunahuna\", \"nga\", \"siya\", \"makadawat\", \"sa\", \"iyang\", \"gihangyo\", \"sa\", \"Ginoo;\"]\r\n        }, {\r\n            \"verse_number\": \"8\",\r\n            \"tokens\": [\"kanang\", \"tawhana\", \"nagduhaduha,\", \"mabalhinbalhinon\", \"sa\", \"tanan\", \"niya\", \"nga\", \"mga\", \"pamaagi.\"]\r\n        }, {\r\n            \"verse_number\": \"9\",\r\n            \"tokens\": [\"Ang\", \"kabos\", \"nga\", \"igsoon\", \"kinahanglan\", \"nga\", \"magmaya\", \"sa\", \"iyang\", \"pagkahalangdon,\"]\r\n        }, {\r\n            \"verse_number\": \"10\",\r\n            \"tokens\": [\"samtang\", \"ang\", \"dato\", \"nga\", \"igsoon\", \"diha\", \"sa\", \"iyang\", \"pagpaubos,\", \"tungod\", \"kay\", \"siya\", \"molabay\", \"lamang\", \"sama\", \"sa\", \"usa\", \"ka\", \"bulak\", \"sa\", \"uma\", \"nga\", \"malaya.\"]\r\n        }, {\r\n            \"verse_number\": \"11\",\r\n            \"tokens\": [\"Ang\", \"adlaw\", \"mosubang\", \"uban\", \"sa\", \"makasunog\", \"nga\", \"kainit\", \"ug\", \"makapauga\", \"sa\", \"mga\", \"tanom,\", \"ug\", \"ang\", \"mga\", \"bulak\", \"mangatagak\", \"ug\", \"ang\", \"iyang\", \"kaanyag\", \"mamatay.\", \"Sa\", \"samang\", \"paagi\", \"ang\", \"dato\", \"nga\", \"tawo\", \"mangawala\", \"lang\", \"sa\", \"tunga-tunga\", \"sa\", \"ilang\", \"mga\", \"buluhaton.\"]\r\n        }, {\r\n            \"verse_number\": \"12\",\r\n            \"tokens\": [\"Bulahan\", \"ang\", \"tawo\", \"nga\", \"molahutay\", \"sa\", \"pagsulay,\", \"kay\", \"human\", \"siya\", \"makalahutay\", \"sa\", \"pagsulay,\", \"siya\", \"makadawat\", \"ug\", \"korona\", \"sa\", \"kinabuhi,\", \"nga\", \"gisaad\", \"niadtong\", \"nahigugma\", \"sa\", \"Dios.\"]\r\n        }, {\r\n            \"verse_number\": \"13\",\r\n            \"tokens\": [\"Walay\", \"usa\", \"nga\", \"moingon\", \"sa\", \"dihang\", \"siya\", \"tintalon,\", \"“Kini\", \"nga\", \"tintasyon\", \"gikan\", \"sa\", \"Dios,”\", \"tungod\", \"kay\", \"ang\", \"Dios\", \"dili\", \"matintal\", \"pinaagi\", \"sa\", \"daotan,\", \"ug\", \"ang\", \"Dios\", \"dili\", \"motintal\", \"ni\", \"bisan\", \"kinsa.\"]\r\n        }, {\r\n            \"verse_number\": \"14\",\r\n            \"tokens\": [\"Ang\", \"matag-usa\", \"nga\", \"tawo\", \"matintal\", \"pinaagi\", \"sa\", \"iyang\", \"daotang\", \"mga\", \"tinguha\", \"nga\", \"nagkabig\", \"ug\", \"nagguyod\", \"kaniya\", \"palayo.\"]\r\n        }, {\r\n            \"verse_number\": \"15\",\r\n            \"tokens\": [\"Unya\", \"human\", \"nga\", \"ang\", \"makasasala\", \"nga\", \"tinguha\", \"manamkon,\", \"ang\", \"sala\", \"matawo,\", \"ug\", \"pagkahuman\", \"nga\", \"ang\", \"sala\", \"dako\", \"na,\", \"kini\", \"mosangpot\", \"sa\", \"kamatayon.\"]\r\n        }, {\r\n            \"verse_number\": \"16\",\r\n            \"tokens\": [\"Ayaw\", \"kamo\", \"pagpalimbong,\", \"akong\", \"hinigugmang\", \"mga\", \"igsoon.\"]\r\n        }, {\r\n            \"verse_number\": \"17\",\r\n            \"tokens\": [\"Ang\", \"matag\", \"maayo\", \"nga\", \"gasa\", \"ug\", \"matag\", \"hingpit\", \"nga\", \"gasa\", \"kini\", \"gikan\", \"sa\", \"kahitas-an,\", \"nga\", \"moabot\", \"kanato\", \"gikan\", \"sa\", \"Amahan\", \"sa\", \"mga\", \"kahayag.\", \"Siya\", \"dili\", \"mausab\", \"sama\", \"sa\", \"gabalhinbalhin\", \"nga\", \"mga\", \"anino.\"]\r\n        }, {\r\n            \"verse_number\": \"18\",\r\n            \"tokens\": [\"Gipili\", \"sa\", \"Dios\", \"ang\", \"paghatag\", \"sa\", \"kinabuhi\", \"nganhi\", \"kanato\", \"pinaagi\", \"sa\", \"pulong\", \"sa\", \"kamatuoran,\", \"aron\", \"nga\", \"mahisama\", \"kita\", \"sa\", \"unang\", \"abot\", \"taliwala\", \"sa\", \"iyang\", \"mga\", \"binuhat.\"]\r\n        }, {\r\n            \"verse_number\": \"19\",\r\n            \"tokens\": [\"Kamo\", \"nasayod\", \"niini,\", \"akong\", \"hinigugma\", \"nga\", \"mga\", \"igsoon.\", \"Ang\", \"matag\", \"tawo\", \"kinahanglan\", \"nga\", \"maabtikon\", \"sa\", \"pagpamati,\", \"magmahinay\", \"sa\", \"pagsulti,\", \"ug\", \"magmahinay\", \"sa\", \"pagkasuko,\"]\r\n        }, {\r\n            \"verse_number\": \"20\",\r\n            \"tokens\": [\"kay\", \"ang\", \"pagkasuko\", \"sa\", \"usa\", \"ka\", \"tawo\", \"dili\", \"mosangpot\", \"sa\", \"pagkamatarong\", \"sa\", \"Dios.\"]\r\n        }, {\r\n            \"verse_number\": \"21\",\r\n            \"tokens\": [\"Busa\", \"biyai\", \"ang\", \"tanang\", \"mahugaw\", \"nga\", \"sala\", \"ug\", \"ang\", \"daotan\", \"nga\", \"anaa\", \"sa\", \"bisan\", \"asa,\", \"ug\", \"diha\", \"sa\", \"pagkamaubsanon\", \"madawat\", \"ang\", \"natanom\", \"nga\", \"pulong,\", \"nga\", \"makahimo\", \"sa\", \"pagluwas\", \"sa\", \"inyong\", \"mga\", \"kalag.\"]\r\n        }, {\r\n            \"verse_number\": \"22\",\r\n            \"tokens\": [\"Tumana\", \"ang\", \"pulong,\", \"ayaw\", \"lamang\", \"kini\", \"paminawa,\", \"aron\", \"dili\", \"malimbongan\", \"ang\", \"inyong\", \"kaugalingon.\"]\r\n        }, {\r\n            \"verse_number\": \"23\",\r\n            \"tokens\": [\"Kay\", \"kung\", \"ang\", \"usa\", \"makadungog\", \"sa\", \"pulong\", \"ug\", \"dili\", \"magbuhat\", \"niini,\", \"siya\", \"sama\", \"sa\", \"usa\", \"ka\", \"tawo\", \"nga\", \"misusi\", \"sa\", \"iyang\", \"naandan\", \"nga\", \"dagway\", \"sa\", \"samin.\"]\r\n        }, {\r\n            \"verse_number\": \"24\",\r\n            \"tokens\": [\"Siya\", \"misusi\", \"sa\", \"iyang\", \"dagway,\", \"ug\", \"siya\", \"milakaw\", \"ug\", \"sa\", \"wala\", \"madugay\", \"nalimtan\", \"na\", \"niya\", \"kung\", \"unsa\", \"ang\", \"iyang\", \"dagway.\"]\r\n        }, {\r\n            \"verse_number\": \"25\",\r\n            \"tokens\": [\"Apan\", \"ang\", \"tawo\", \"nga\", \"mitan-aw\", \"ug\", \"mabinantayon\", \"ngadto\", \"sa\", \"hingpit\", \"nga\", \"balaod,\", \"ang\", \"balaod\", \"sa\", \"kagawasan,\", \"ug\", \"padayon\", \"sa\", \"pagtuman\", \"niini,\", \"dili\", \"lamang\", \"usa\", \"ka\", \"tigpaminaw\", \"nga\", \"makalimot,\", \"kini\", \"nga\", \"tawo\", \"mahimong\", \"mapanalanginan\", \"samtang\", \"ginabuhat\", \"niya\", \"kini.\"]\r\n        }, {\r\n            \"verse_number\": \"26\",\r\n            \"tokens\": [\"Kung\", \"ang\", \"adunay\", \"usa\", \"kaninyo\", \"nga\", \"naghunahuna\", \"sa\", \"iyang\", \"kaugalingon\", \"nga\", \"relihiyoso,\", \"apan\", \"dili\", \"niya\", \"mapugngan\", \"ang\", \"iyang\", \"dila,\", \"iyang\", \"gilimbongan\", \"ang\", \"iyang\", \"kasingkasing\", \"ug\", \"ang\", \"iyang\", \"relihiyon\", \"walay\", \"pulos.\"]\r\n        }, {\r\n            \"verse_number\": \"27\",\r\n            \"tokens\": [\"Putli\", \"ug\", \"walay\", \"buling\", \"nga\", \"relihiyon\", \"atubangan\", \"sa\", \"atong\", \"Dios\", \"ug\", \"Amahan\", \"mao\", \"kini:\", \"ang\", \"pagtabang\", \"sa\", \"wala\", \"nay\", \"mga\", \"amahan\", \"ug\", \"sa\", \"mga\", \"balo\", \"sa\", \"ilang\", \"mga\", \"pag-antos,\", \"ug\", \"sa\", \"pagpanalipod\", \"sa\", \"ilang\", \"kaugalingon\", \"gikan\", \"sa\", \"dunot\", \"nga\", \"kalibotan.\"]\r\n        }],\r\n        \"eng\": [{\r\n            \"verse_number\": \"1\",\r\n            \"tokens\": [\"James,\", \"a\", \"servant\", \"of\", \"God\", \"and\", \"of\", \"the\", \"Lord\", \"Jesus\", \"Christ,\", \"To\", \"the\", \"twelve\", \"tribes\", \"of\", \"the\", \"Dispersion:\", \"Greetings.\"]\r\n        }, {\r\n            \"verse_number\": \"2\",\r\n            \"tokens\": [\"Consider\", \"it\", \"pure\", \"joy,\", \"my\", \"brothers,\", \"when\", \"you\", \"encounter\", \"trials\", \"of\", \"many\", \"kinds,\"]\r\n        }, {\r\n            \"verse_number\": \"3\",\r\n            \"tokens\": [\"because\", \"you\", \"know\", \"that\", \"the\", \"testing\", \"of\", \"your\", \"faith\", \"develops\", \"perseverance.\"]\r\n        }, {\r\n            \"verse_number\": \"4\",\r\n            \"tokens\": [\"Allow\", \"perseverance\", \"to\", \"finish\", \"its\", \"work,\", \"so\", \"that\", \"you\", \"may\", \"be\", \"mature\", \"and\", \"complete,\", \"not\", \"lacking\", \"anything.\"]\r\n        }, {\r\n            \"verse_number\": \"5\",\r\n            \"tokens\": [\"Now\", \"if\", \"any\", \"of\", \"you\", \"lacks\", \"wisdom,\", \"he\", \"should\", \"ask\", \"God,\", \"who\", \"gives\", \"generously\", \"to\", \"all\", \"without\", \"finding\", \"fault,\", \"and\", \"it\", \"will\", \"be\", \"given\", \"to\", \"him.\"]\r\n        }, {\r\n            \"verse_number\": \"6\",\r\n            \"tokens\": [\"But\", \"he\", \"must\", \"ask\", \"in\", \"faith,\", \"without\", \"doubting,\", \"because\", \"he\", \"who\", \"doubts\", \"is\", \"like\", \"a\", \"wave\", \"of\", \"the\", \"sea,\", \"blown\", \"and\", \"tossed\", \"by\", \"the\", \"wind.\"]\r\n        }, {\r\n            \"verse_number\": \"7\",\r\n            \"tokens\": [\"That\", \"man\", \"should\", \"not\", \"expect\", \"to\", \"receive\", \"anything\", \"from\", \"the\", \"Lord.\"]\r\n        }, {\r\n            \"verse_number\": \"8\",\r\n            \"tokens\": [\"He\", \"is\", \"a\", \"double-minded\", \"man,\", \"unstable\", \"in\", \"all\", \"his\", \"ways.\"]\r\n        }, {\r\n            \"verse_number\": \"9\",\r\n            \"tokens\": [\"The\", \"brother\", \"in\", \"humble\", \"circumstances\", \"should\", \"exult\", \"in\", \"his\", \"high\", \"position.\"]\r\n        }, {\r\n            \"verse_number\": \"10\",\r\n            \"tokens\": [\"But\", \"the\", \"one\", \"who\", \"is\", \"rich\", \"should\", \"exult\", \"in\", \"his\", \"low\", \"position,\", \"because\", \"he\", \"will\", \"pass\", \"away\", \"like\", \"a\", \"flower\", \"of\", \"the\", \"field.\"]\r\n        }, {\r\n            \"verse_number\": \"11\",\r\n            \"tokens\": [\"For\", \"the\", \"sun\", \"rises\", \"with\", \"scorching\", \"heat\", \"and\", \"withers\", \"the\", \"plant;\", \"its\", \"flower\", \"falls\", \"and\", \"its\", \"beauty\", \"is\", \"lost.\", \"So\", \"too,\", \"the\", \"rich\", \"man\", \"will\", \"fade\", \"away\", \"in\", \"the\", \"midst\", \"of\", \"his\", \"pursuits.\"]\r\n        }, {\r\n            \"verse_number\": \"12\",\r\n            \"tokens\": [\"Blessed\", \"is\", \"the\", \"man\", \"who\", \"perseveres\", \"under\", \"trial,\", \"because\", \"when\", \"he\", \"has\", \"stood\", \"the\", \"test,\", \"he\", \"will\", \"receive\", \"the\", \"crown\", \"of\", \"life\", \"that\", \"God\", \"has\", \"promised\", \"to\", \"those\", \"who\", \"love\", \"Him.\"]\r\n        }, {\r\n            \"verse_number\": \"13\",\r\n            \"tokens\": [\"When\", \"tempted,\", \"no\", \"one\", \"should\", \"say,\", \"“God\", \"is\", \"tempting\", \"me.”\", \"For\", \"God\", \"cannot\", \"be\", \"tempted\", \"by\", \"evil,\", \"nor\", \"does\", \"He\", \"tempt\", \"anyone.\"]\r\n        }, {\r\n            \"verse_number\": \"14\",\r\n            \"tokens\": [\"But\", \"each\", \"one\", \"is\", \"tempted\", \"when\", \"by\", \"his\", \"own\", \"evil\", \"desires\", \"he\", \"is\", \"lured\", \"away\", \"and\", \"enticed.\"]\r\n        }, {\r\n            \"verse_number\": \"15\",\r\n            \"tokens\": [\"Then\", \"after\", \"desire\", \"has\", \"conceived,\", \"it\", \"gives\", \"birth\", \"to\", \"sin;\", \"and\", \"sin,\", \"when\", \"it\", \"is\", \"full-grown,\", \"gives\", \"birth\", \"to\", \"death.\"]\r\n        }, {\r\n            \"verse_number\": \"16\",\r\n            \"tokens\": [\"Do\", \"not\", \"be\", \"deceived,\", \"my\", \"beloved\", \"brothers.\"]\r\n        }, {\r\n            \"verse_number\": \"17\",\r\n            \"tokens\": [\"Every\", \"good\", \"and\", \"perfect\", \"gift\", \"is\", \"from\", \"above,\", \"coming\", \"down\", \"from\", \"the\", \"Father\", \"of\", \"the\", \"heavenly\", \"lights,\", \"with\", \"whom\", \"there\", \"is\", \"no\", \"change\", \"or\", \"shifting\", \"shadow.\"]\r\n        }, {\r\n            \"verse_number\": \"18\",\r\n            \"tokens\": [\"He\", \"chose\", \"to\", \"give\", \"us\", \"birth\", \"through\", \"the\", \"word\", \"of\", \"truth,\", \"that\", \"we\", \"would\", \"be\", \"a\", \"kind\", \"of\", \"firstfruits\", \"of\", \"His\", \"creation.\"]\r\n        }, {\r\n            \"verse_number\": \"19\",\r\n            \"tokens\": [\"My\", \"beloved\", \"brothers,\", \"understand\", \"this:\", \"Everyone\", \"should\", \"be\", \"quick\", \"to\", \"listen,\", \"slow\", \"to\", \"speak,\", \"and\", \"slow\", \"to\", \"anger,\"]\r\n        }, {\r\n            \"verse_number\": \"20\",\r\n            \"tokens\": [\"for\", \"man’s\", \"anger\", \"does\", \"not\", \"bring\", \"about\", \"the\", \"righteousness\", \"that\", \"God\", \"desires.\"]\r\n        }, {\r\n            \"verse_number\": \"21\",\r\n            \"tokens\": [\"Therefore,\", \"get\", \"rid\", \"of\", \"all\", \"moral\", \"filth\", \"and\", \"every\", \"expression\", \"of\", \"evil,\", \"and\", \"humbly\", \"accept\", \"the\", \"word\", \"planted\", \"in\", \"you,\", \"which\", \"can\", \"save\", \"your\", \"souls.\"]\r\n        }, {\r\n            \"verse_number\": \"22\",\r\n            \"tokens\": [\"Be\", \"doers\", \"of\", \"the\", \"word,\", \"and\", \"not\", \"hearers\", \"only.\", \"Otherwise,\", \"you\", \"are\", \"deceiving\", \"yourselves.\"]\r\n        }, {\r\n            \"verse_number\": \"23\",\r\n            \"tokens\": [\"For\", \"anyone\", \"who\", \"hears\", \"the\", \"word\", \"but\", \"does\", \"not\", \"carry\", \"it\", \"out\", \"is\", \"like\", \"a\", \"man\", \"who\", \"looks\", \"at\", \"his\", \"face\", \"in\", \"a\", \"mirror,\"]\r\n        }, {\r\n            \"verse_number\": \"24\",\r\n            \"tokens\": [\"and\", \"after\", \"observing\", \"himself\", \"goes\", \"away\", \"and\", \"immediately\", \"forgets\", \"what\", \"he\", \"looks\", \"like.\"]\r\n        }, {\r\n            \"verse_number\": \"25\",\r\n            \"tokens\": [\"But\", \"the\", \"one\", \"who\", \"looks\", \"intently\", \"into\", \"the\", \"perfect\", \"law\", \"of\", \"freedom,\", \"and\", \"continues\", \"to\", \"do\", \"so—not\", \"being\", \"a\", \"forgetful\", \"hearer,\", \"but\", \"an\", \"effective\", \"doer—he\", \"will\", \"be\", \"blessed\", \"in\", \"what\", \"he\", \"does.\"]\r\n        }, {\r\n            \"verse_number\": \"26\",\r\n            \"tokens\": [\"If\", \"anyone\", \"considers\", \"himself\", \"religious\", \"and\", \"yet\", \"does\", \"not\", \"bridle\", \"his\", \"tongue,\", \"he\", \"deceives\", \"his\", \"heart\", \"and\", \"his\", \"religion\", \"is\", \"worthless.\"]\r\n        }, {\r\n            \"verse_number\": \"27\",\r\n            \"tokens\": [\"Pure\", \"and\", \"undefiled\", \"religion\", \"before\", \"our\", \"God\", \"and\", \"Father\", \"is\", \"this:\", \"to\", \"care\", \"for\", \"orphans\", \"and\", \"widows\", \"in\", \"their\", \"distress,\", \"and\", \"to\", \"keep\", \"oneself\", \"from\", \"being\", \"polluted\", \"by\", \"the\", \"world.\"]\r\n        }],\r\n        \"definitions\": {\r\n            \"si\": [\"personal marker\"],\r\n            \"santiago\": [],\r\n            \"usa\": [\"one\", \"deer\", \"before\"],\r\n            \"ka\": [\"quantifier\", \"you\"],\r\n            \"sulugoon\": [\"servant\", \"errand\", \"mandate\", \"command\", \"order\", \"prescribe\"],\r\n            \"sa\": [\"at\", \"by\", \"for\", \"from\", \"in\", \"into\", \"of\", \"on\", \"through\", \"to\", \"fault\", \"guilt\", \"sin\", \"offence\", \"living room\", \"offense\", \"salon\", \"strain\", \"filter\"],\r\n            \"dios\": [\"god\"],\r\n            \"ug\": [\"a\", \"an\", \"and\"],\r\n            \"kang\": [\"whom\", \"four mahjong tiles of the same kind\"],\r\n            \"ginoong\": [\"deity\", \"lord\"],\r\n            \"jesu-cristo\": [\"jesus christ\"],\r\n            \"ngadto\": [\"forward\", \"there[motion/far]\", \"onto\", \"to\", \"unto\"],\r\n            \"mga\": [\"among\", \"many\", \"about\"],\r\n            \"tribo\": [\"tribe\"],\r\n            \"nga\": [\"grammatical ligature\"],\r\n            \"nagkatibulaag\": [\"scattered\", \"separated\"],\r\n            \"pangamusta\": [\"howdy\", \"hello\", \"hi\", \"how are you\"],\r\n            \"isipa\": [\"as\", \"consider\", \"mind\"],\r\n            \"kining\": [\"this [nominative/near you and me]\", \"this\"],\r\n            \"tanan\": [\"all\", \"everybody\", \"everyone\", \"everything\"],\r\n            \"kalipay\": [\"cheer\", \"croton\", \"glee\", \"happiness\", \"mirth\", \"pleasure\", \"glad\", \"happy\"],\r\n            \"akong\": [\"I\", \"mine\"],\r\n            \"igsoon\": [\"brother\", \"sibling\", \"sister\", \"fill up\", \"imitate\"],\r\n            \"dihang\": [\"there [near]\", \"upon\"],\r\n            \"kamo\": [\"touch food with bare hands\", \"you\", \"you-all\"],\r\n            \"makasinati\": [\"acquainted\", \"long-familiar\"],\r\n            \"daghang\": [\"many\", \"numerous\", \"several\", \"substantial\", \"voluminous\", \"much\", \"plenty\"],\r\n            \"kasamok\": [\"annoyance\", \"conflict\", \"disorder\", \"frenzy\", \"mess(n.) mischief\", \"muddle\", \"trouble\", \"turbulence\", \"turmoil\", \"uproar\", \"vexation\", \"agitate\", \"annoy\", \"bother\", \"distract\", \"harass\", \"perturb\", \"pester\"],\r\n            \"nasayod\": [\"aware\", \"knowing\", \"betrothal ceremony\", \"know\", \"transpire\"],\r\n            \"ang\": [\"the\"],\r\n            \"pagsulay\": [\"attempt\", \"test\", \"trial\", \"undertaking\", \"try\", \"undertake\"],\r\n            \"inyong\": [\"your\"],\r\n            \"pagtuo\": [\"conviction\", \"creed\", \"faith\", \"notion\", \"religion\", \"supposition\", \"right\", \"really\", \"believe\", \"heed\"],\r\n            \"mosangpot\": [\"outcome\"],\r\n            \"paglahutay\": [\"endure\", \"endurance\", \"stamina\"],\r\n            \"tugoti\": [\"approve\", \"endorse\", \"accede\", \"allow\", \"grant\", \"let\", \"pay out\", \"permit\", \"sanction\", \"yield\"],\r\n            \"hingpit\": [\"complete\", \"full-fledged\", \"outright\", \"perfect\", \"thorough\"],\r\n            \"mabuhat\": [\"doable\", \"deed\", \"compose\", \"create\", \"make\", \"moil\", \"work\"],\r\n            \"aron\": [\"in order to\"],\r\n            \"mamahimong\": [\"feasible\", \"possible\", \"potential\", \"probable\", \"possibly\", \"can\", \"could\", \"enable\", \"achieve\", \"become\", \"do\", \"make\", \"produce\", \"render\", \"transact\"],\r\n            \"mahingpit\": [\"complete\", \"full-fledged\", \"outright\", \"perfect\", \"thorough\"],\r\n            \"hingkod\": [\"mature\"],\r\n            \"walay\": [\"left\", \"no\", \"without\", \"non\", \"none\"],\r\n            \"makulang\": [\"deficient\", \"devoid\", \"insufficient\", \"less\", \"meager\", \"scanty\", \"sketchy\"],\r\n            \"apan\": [\"but\", \"yet\", \"defect\", \"demerit\", \"fault\", \"flaw\", \"handicap\", \"liability\", \"obstacle\"],\r\n            \"kung\": [\"if\"],\r\n            \"adunay\": [\"available\", \"has\", \"have\"],\r\n            \"kaninyo\": [\"you\", \"your\"],\r\n            \"nanginahanglan\": [\"in need\", \"essential\", \"imperative\", \"mandatory\", \"necessary\", \"vital\", \"must\", \"need\", \"ought\", \"require\", \"should\", \"greedy\", \"needy\"],\r\n            \"kaalam\": [\"expertise\", \"know\"],\r\n            \"pangayo\": [\"ask\", \"beg\", \"request\", \"solicit\", \"fire\", \"flame\", \"= pangayo\"],\r\n            \"niini\": [\"this [possesive/near you and me]\", \"thus\", \"this\"],\r\n            \"gikan\": [\"from\", \"depart\", \"emanate\", \"leave\"],\r\n            \"mohatag\": [\"give\", \"provide\", \"tender\"],\r\n            \"madagayaon\": [\"plenteous\", \"abundant\"],\r\n            \"pagbadlong\": [\"rebuke\", \"reproof\", \"admonish\", \"reprove\"],\r\n            \"mangayo\": [\"ask\", \"solicit\", \"request\", \"beg\", \"fire\", \"flame\", \"= pangayo\"],\r\n            \"siya\": [\"he\", \"she\", \"set of three consecutive mahjong tiles\", \"chair\"],\r\n            \"uban\": [\"gray hair\", \"another\", \"other\", \"along\", \"companion\", \"mate\", \"with\", \"accompany\", \"join\"],\r\n            \"pagduhaduha\": [\"misgiving\", \"reluctance\", \"doubt\", \"both\", \"two\"],\r\n            \"kay\": [\"instead\", \"because\"],\r\n            \"nagduhaduha\": [\"doubted\", \"doubting\", \"reluctant\", \"doubt\", \"both\", \"two\"],\r\n            \"sama\": [\"like\", \"same\"],\r\n            \"balod\": [\"imperial pigeon\", \"wave\"],\r\n            \"dagat\": [\"sea\"],\r\n            \"dad-on\": [\"bring\", \"bear\", \"carry\", \"conduct\", \"transport\"],\r\n            \"pinaagi\": [\"through\", \"thru\", \"device\", \"manner\", \"method\", \"mode\", \"procedure\", \"process\", \"scheme\", \"mean\", \"course\", \"handwriting\", \"result\", \"track record\", \"wake\", \"pass\", \"trace\", \"undergo\"],\r\n            \"hangin\": [\"air\", \"draft\", \"wind\"],\r\n            \"dalahon\": [\"bear\", \"bring\", \"carry\", \"conduct\", \"transport\"],\r\n            \"bisan\": [\"albeit\", \"although\", \"despite\", \"even\", \"though\", \"yet\", \"nor\"],\r\n            \"asa\": [\"where\", \"hope\"],\r\n            \"tungod\": [\"directly beneath\", \"because\", \"due to\"],\r\n            \"tawo\": [\"character\", \"human\", \"individual\", \"man\", \"mortal\", \"person\"],\r\n            \"kinahanglan\": [\"essential\", \"imperative\", \"mandatory\", \"necessary\", \"vital\", \"must\", \"need\", \"ought\", \"require\", \"should\", \"greedy\", \"needy\"],\r\n            \"dili\": [\"nay\", \"no\", \"not\"],\r\n            \"maghunahuna\": [\"thinking\", \"mindful\", \"concept\", \"consideration\", \"imagination\", \"mind\", \"regard\", \"thought\", \"suppose\", \"think\"],\r\n            \"makadawat\": [\"accept\", \"gather palm toddy\", \"receive\"],\r\n            \"iyang\": [\"hers\", \"his\", \"its\"],\r\n            \"gihangyo\": [\"appealed\", \"bargained\", \"appeal\", \"bargain\", \"bargain down\", \"dicker\", \"haggle\", \"petition\", \"plea\", \"request\"],\r\n            \"ginoo\": [\"deity\", \"lord\"],\r\n            \"kanang\": [\"american lady\", \"it\", \"that\", \"that [nominative/near you]\"],\r\n            \"tawhana\": [\"person\", \"character\", \"human\", \"individual\", \"man\", \"mortal\"],\r\n            \"mabalhinbalhinon\": [\"migratory\", \"variable\", \"move back and forth\", \"displace\", \"move\", \"rearrange\", \"shift\", \"transfer\"],\r\n            \"niya\": [\"her\", \"hers\", \"him\", \"his\"],\r\n            \"pamaagi\": [\"means\", \"method\", \"process\", \"ways\", \"device\", \"manner\", \"mode\", \"procedure\", \"scheme\", \"mean\", \"course\", \"handwriting\", \"result\", \"track record\", \"wake\", \"pass\", \"trace\", \"undergo\"],\r\n            \"kabos\": [\"destitute\", \"poor\", \"pauper\", \"slum\"],\r\n            \"magmaya\": [\"rejoicing\", \"cheerful\", \"jubilant\", \"black-headed munia\", \"Lonchura atricapilla\"],\r\n            \"pagkahalangdon\": [\"eminence\", \"cachet\", \"distinguished\", \"eminent\", \"honourable\", \"majestic\", \"noble\", \"notable\", \"superb\", \"venerable\", \"look up\"],\r\n            \"samtang\": [\"meantime\", \"meanwhile\", \"whereas\", \"while\"],\r\n            \"dato\": [\"chieftain\", \"opulent\", \"rich\", \"wealthy\", \"well-to-do\"],\r\n            \"diha\": [\"there [near]\", \"upon\"],\r\n            \"pagpaubos\": [\"abasement\", \"downwards\", \"demote\", \"deteriorate\", \"downgrade\", \"lower\", \"reduce\", \"down\", \"humble\", \"ignoble\", \"low\", \"minor\", \"subordinate\", \"under\", \"below\", \"beneath\"],\r\n            \"molabay\": [\"elapse\", \"pass by\", \"throw\"],\r\n            \"lamang\": [\"mere\", \"just\", \"only\"],\r\n            \"bulak\": [\"blossom\", \"flower\"],\r\n            \"uma\": [\"farm\", \"field\"],\r\n            \"malaya\": [\"cast net\", \"dried\", \"shrivel\", \"wither\"],\r\n            \"adlaw\": [\"day\", \"sun\"],\r\n            \"mosubang\": [\"rise\"],\r\n            \"makasunog\": [\"caustic\", \"fire\", \"burn\"],\r\n            \"kainit\": [\"ardor\", \"ardour\", \"heat\", \"thermal\", \"warmth\", \"zeal\", \"hot\"],\r\n            \"makapauga\": [\"dessicate\", \"dehydrate\", \"dry\"],\r\n            \"tanom\": [\"crop\", \"plant\"],\r\n            \"mangatagak\": [\"fall\", \"join strands of abaca at the ends to make a long thread\"],\r\n            \"kaanyag\": [\"beauty\", \"charm\", \"beaut\"],\r\n            \"mamatay\": [\"pip out\", \"die\"],\r\n            \"samang\": [\"like\", \"same\"],\r\n            \"paagi\": [\"device\", \"manner\", \"method\", \"mode\", \"procedure\", \"process\", \"scheme\", \"mean\", \"course\", \"handwriting\", \"result\", \"track record\", \"wake\", \"pass\", \"trace\", \"undergo\"],\r\n            \"mangawala\": [\"absence\", \"left\", \"no\", \"without\", \"non\", \"none\"],\r\n            \"lang\": [\"just\", \"mediocre\", \"naturally\", \"only\"],\r\n            \"tunga-tunga\": [\"halfway\", \"median\", \"medium\", \"mid\", \"middle\", \"midway\", \"center\", \"half\", \"rise up\", \"emerge\"],\r\n            \"ilang\": [\"birthmark\", \"nevus\", \"their\", \"theirs\", \"acknowledge\", \"distuinguish\", \"recognise\", \"recognize\"],\r\n            \"buluhaton\": [\"chore\", \"deed\", \"compose\", \"create\", \"make\", \"moil\", \"work\"],\r\n            \"bulahan\": [\"bingo cage\", \"blessed\", \"fortunate\", \"Lansium domesticum\", \"bubble\", \"foam\", \"froth\", \"lather\", \"heave\", \"ball\", \"drawing\"],\r\n            \"molahutay\": [\"endurance\", \"stamina\"],\r\n            \"human\": [\"done\", \"after\", \"finish\"],\r\n            \"makalahutay\": [\"endurance\", \"stamina\"],\r\n            \"korona\": [\"crown\", \"wreath\"],\r\n            \"kinabuhi\": [\"ephemeral\", \"existence\", \"life\", \"alive\", \"animate\", \"live\", \"living\", \"survive\"],\r\n            \"gisaad\": [\"promised\", \"pledge\", \"promise\", \"vow\"],\r\n            \"niadtong\": [\"that [possesive/far]\", \"went\", \"go\", \"go to\"],\r\n            \"nahigugma\": [\"enamored\", \"fall in love\", \"affection\", \"love\"],\r\n            \"moingon\": [\"like\", \"such\", \"thus\", \"say\"],\r\n            \"tintalon\": [\"tempt\"],\r\n            \"kini\": [\"this [nominative/near you and me]\", \"this\"],\r\n            \"tintasyon\": [\"temptation\"],\r\n            \"matintal\": [\"tempt\"],\r\n            \"daotan\": [\"bad\", \"depraved\", \"harmful\", \"lousy\", \"mean\", \"nefarious\", \"pernicious\", \"vile\", \"emaciated\", \"gaunt\", \"sorcery\", \"damage\", \"go bad\", \"ravage\"],\r\n            \"motintal\": [\"tempt\"],\r\n            \"ni\": [\"by\", \"this\", \"nor\", \"of\"],\r\n            \"kinsa\": [\"who\", \"whoever\"],\r\n            \"matag-usa\": [\"each and everyone\", \"one\", \"deer\", \"before\"],\r\n            \"daotang\": [\"bad\", \"depraved\", \"harmful\", \"lousy\", \"mean\", \"nefarious\", \"pernicious\", \"vile\", \"emaciated\", \"gaunt\", \"sorcery\", \"damage\", \"go bad\", \"ravage\"],\r\n            \"tinguha\": [\"aim\", \"desire\", \"object\", \"zeal\", \"covet\", \"crave\", \"yearn\", \"miscarriage\", \"derive\", \"earn\", \"fetch\", \"gain\", \"garner\", \"get\", \"obtain\", \"take\"],\r\n            \"nagkabig\": [\"rake\", \"entice\", \"attract\"],\r\n            \"nagguyod\": [\"dragged\", \"white snapping shrimp\", \"drag\"],\r\n            \"kaniya\": [\"her\", \"hers\", \"him\", \"his\"],\r\n            \"palayo\": [\"walk away\", \"distant\", \"far\", \"remote\", \"yonder\"],\r\n            \"unya\": [\"then\", \"after\", \"afterward\", \"later\"],\r\n            \"makasasala\": [\"malefactor\", \"outlaw\", \"sinner\", \"living room\", \"salon\", \"fault\", \"guilt\", \"offence\", \"offense\", \"sin\", \"filter\", \"strain\"],\r\n            \"manamkon\": [\"will conceive\", \"conceive\"],\r\n            \"sala\": [\"living room\", \"salon\", \"fault\", \"guilt\", \"offence\", \"offense\", \"sin\", \"filter\", \"strain\"],\r\n            \"matawo\": [\"be born\", \"character\", \"human\", \"individual\", \"man\", \"mortal\", \"person\"],\r\n            \"pagkahuman\": [\"thereafter\", \"conclusion\", \"done\", \"after\", \"finish\"],\r\n            \"dako\": [\"big\", \"great\", \"large\"],\r\n            \"na\": [\"already\", \"although\", \"that\"],\r\n            \"kamatayon\": [\"death\", \"die\"],\r\n            \"ayaw\": [\"do not\", \"don't\", \"for a child to cry when a parent leaves\"],\r\n            \"pagpalimbong\": [\"cheat\", \"deceive\", \"defraud\", \"trick\", \"wangle\"],\r\n            \"hinigugmang\": [\"steady\", \"sweetheart\", \"sweetie\", \"fall in love\", \"affection\", \"love\"],\r\n            \"matag\": [\"every\", \"per\"],\r\n            \"maayo\": [\"fair\", \"good\", \"well\", \"asking for trouble\", \"fix\"],\r\n            \"gasa\": [\"gas mantle\", \"gauze\", \"gift\", \"gratuity\", \"present\", \"endow\"],\r\n            \"kahitas-an\": [\"heavens\", \"long\", \"tall\"],\r\n            \"moabot\": [\"output\", \"arrive\", \"reach\"],\r\n            \"kanato\": [\"ours\", \"us\", \"our\"],\r\n            \"amahan\": [\"father\", \"= amahan\"],\r\n            \"kahayag\": [\"light\", \"effulgence\", \"limelight\", \"sheen\", \"splendour\", \"bright\"],\r\n            \"mausab\": [\"flexible\", \"convert\", \"iterate\", \"modify\", \"recur\", \"repeat\"],\r\n            \"gabalhinbalhin\": [\"shifting\", \"displace\", \"move\", \"rearrange\", \"shift\", \"transfer\"],\r\n            \"anino\": [\"shadow\"],\r\n            \"gipili\": [\"chose\", \"selected\", \"preferred\", \"picked\", \"opted\", \"elected\", \"Canarium ovatum\", \"choose\", \"elect\", \"pick\", \"select\"],\r\n            \"paghatag\": [\"give\", \"provide\", \"tender\"],\r\n            \"nganhi\": [\"here[motion/near you and me]\"],\r\n            \"pulong\": [\"term\", \"text\", \"word\"],\r\n            \"kamatuoran\": [\"evidence\", \"proof\", \"truth\", \"verification\", \"true\", \"prove\", \"actually\", \"be serious\", \"stump\", \"know where\"],\r\n            \"mahisama\": [\"likened\", \"like\", \"same\"],\r\n            \"kita\": [\"we\", \"see\", \"proceeds\"],\r\n            \"unang\": [\"juice of the salted fish\", \"first\", \"prime\", \"go ahead\", \"initiate\", \"precede\", \"before\"],\r\n            \"abot\": [\"output\", \"arrive\", \"reach\"],\r\n            \"taliwala\": [\"midst\"],\r\n            \"binuhat\": [\"manufactured\", \"creature\", \"deed\", \"compose\", \"create\", \"make\", \"moil\", \"work\"],\r\n            \"hinigugma\": [\"steady\", \"sweetheart\", \"sweetie\", \"fall in love\", \"affection\", \"love\"],\r\n            \"maabtikon\": [\"dynamic\", \"zestful\", \"active\", \"agile\", \"cunning\", \"foxy\", \"nimble\", \"quick\"],\r\n            \"pagpamati\": [\"hearing\", \"heeding\", \"listening\", \"listen\", \"sense\", \"ugly\", \"feel\", \"hear\", \"percieve\"],\r\n            \"magmahinay\": [\"mild\", \"gently\", \"softly\", \"slow\", \"sluggish\"],\r\n            \"pagsulti\": [\"remark\", \"say\", \"speak\", \"talk\"],\r\n            \"pagkasuko\": [\"fury\", \"rage\", \"ire\", \"anger\", \"angry\", \"mad\"],\r\n            \"pagkamatarong\": [\"righteous\", \"upright\", \"just\", \"proper\", \"sane\", \"suited\", \"large tin can\"],\r\n            \"busa\": [\"consequently\", \"ergo\", \"hence\", \"therefore\"],\r\n            \"biyai\": [\"quit\", \"desert\", \"abandon\", \"junk\", \"underdog\", \"give up\", \"leave\", \"relinquish\", \"vacate\"],\r\n            \"tanang\": [\"all\", \"everybody\", \"everyone\", \"everything\"],\r\n            \"mahugaw\": [\"corrupt\", \"dingy\", \"dirty\", \"filthy\", \"foul\", \"impure\", \"insanitary\", \"nasty\", \"unclean\", \"unhealthy\", \"unsanitary\", \"vile\", \"sordid\", \"cesspool\", \"filth\", \"sewage\", \"waste\", \"pollute\"],\r\n            \"anaa\": [\"is there\", \"exist\", \"there [existential/near you]\", \"has\", \"have\"],\r\n            \"pagkamaubsanon\": [\"lower\", \"reduce\", \"down\", \"humble\", \"ignoble\", \"low\", \"minor\", \"subordinate\", \"under\", \"below\", \"beneath\"],\r\n            \"madawat\": [\"acceptable\", \"admissible\", \"eligible\", \"accept\", \"gather palm toddy\", \"receive\"],\r\n            \"natanom\": [\"planted\", \"crop\", \"plant\"],\r\n            \"makahimo\": [\"able\", \"capable\", \"competent\", \"achieve\", \"become\", \"do\", \"make\", \"produce\", \"render\", \"transact\"],\r\n            \"pagluwas\": [\"deliverance\", \"rescue\", \"salvage\", \"free\", \"safe\", \"save\"],\r\n            \"kalag\": [\"ghost\", \"soul\", \"specter\", \"spectre\", \"wraith\"],\r\n            \"tumana\": [\"old village site\", \"obey\", \"utmost\", \"comply\", \"conform\", \"fufill\"],\r\n            \"paminawa\": [\"listen\"],\r\n            \"malimbongan\": [\"cheater\", \"knave\", \"crook\", \"cheat\", \"deceive\", \"defraud\", \"trick\", \"wangle\"],\r\n            \"kaugalingon\": [\"oneself\", \"self\", \"itself\"],\r\n            \"makadungog\": [\"able to hear\", \"prestige\", \"reputation\", \"hear\"],\r\n            \"magbuhat\": [\"creating\", \"making\", \"laboring\", \"toiling\", \"deed\", \"compose\", \"create\", \"make\", \"moil\", \"work\"],\r\n            \"misusi\": [\"investigated\", \"examined\", \"inspected\", \"examine\", \"inspect\", \"investigate\"],\r\n            \"naandan\": [\"habitual\", \"normal\", \"traditional\", \"routine\", \"docile\", \"domesticated\", \"familiar\", \"tame\", \"used to\"],\r\n            \"dagway\": [\"apparently\", \"face\", \"facet\", \"semblance\"],\r\n            \"samin\": [\"mirror\"],\r\n            \"milakaw\": [\"leaved\", \"walked\", \"went\", \"walk\"],\r\n            \"wala\": [\"left\", \"no\", \"without\", \"non\", \"none\"],\r\n            \"madugay\": [\"tardy\", \"lengthy\"],\r\n            \"nalimtan\": [\"forgotten\", \"forget\"],\r\n            \"unsa\": [\"what\", \"ounce\"],\r\n            \"mitan-aw\": [\"looked\", \"scanned\", \"look\", \"watch\"],\r\n            \"mabinantayon\": [\"careful\", \"cautious\", \"discreet\", \"furtive\", \"vigilant\", \"escort\", \"sentinel\", \"sentry\", \"warden\", \"watch dog\", \"guard\", \"keep\"],\r\n            \"balaod\": [\"law\"],\r\n            \"kagawasan\": [\"freedom\", \"liberty\", \"outward\", \"exterior\", \"out\", \"outside\", \"get out\", \"go out\"],\r\n            \"padayon\": [\"carry on\", \"continue\", \"go ahead\", \"go on\", \"last\", \"maintain\", \"persist\", \"remain\", \"resume\", \"immediately\", \"instantly\", \"onward\", \"soon\", \"come\", \"enter\", \"get in\", \"push on\"],\r\n            \"pagtuman\": [\"follow\", \"fulfill\", \"utmost\", \"comply\", \"conform\", \"fufill\", \"obey\"],\r\n            \"tigpaminaw\": [\"audience\", \"listener\", \"listen\"],\r\n            \"makalimot\": [\"oblivion\", \"forget\"],\r\n            \"mahimong\": [\"feasible\", \"possible\", \"potential\", \"probable\", \"possibly\", \"can\", \"could\", \"achieve\", \"become\", \"do\", \"make\", \"produce\", \"render\", \"transact\"],\r\n            \"mapanalanginan\": [\"blessing\", \"pray\"],\r\n            \"ginabuhat\": [\"done\", \"created\", \"made\", \"toiled\", \"deed\", \"compose\", \"create\", \"make\", \"moil\", \"work\"],\r\n            \"naghunahuna\": [\"mindful\", \"thinking\", \"concept\", \"consideration\", \"imagination\", \"mind\", \"regard\", \"thought\", \"suppose\", \"think\"],\r\n            \"relihiyoso\": [\"religious\"],\r\n            \"mapugngan\": [\"preventable\", \"prevent\", \"repress\", \"clip\", \"abstain\", \"preclude\", \"restrain\", \"restrict\"],\r\n            \"dila\": [\"tongue\"],\r\n            \"gilimbongan\": [\"cheater\", \"knave\", \"crook\", \"cheat\", \"deceive\", \"defraud\", \"trick\", \"wangle\"],\r\n            \"kasingkasing\": [\"heart\"],\r\n            \"relihiyon\": [\"religion\"],\r\n            \"pulos\": [\"all\", \"function\", \"use\"],\r\n            \"putli\": [\"pure\", \"virgin\", \"sever\", \"amputate\", \"cut\"],\r\n            \"buling\": [\"black mark\", \"blemish\", \"bowling\", \"dirt\", \"stain\", \"stigma\", \"blot\", \"smudge\", \"spot\"],\r\n            \"atubangan\": [\"forefront\", \"frontage\", \"facade\", \"front\", \"face\"],\r\n            \"atong\": [\"be present\"],\r\n            \"mao\": [\"is\"],\r\n            \"pagtabang\": [\"assistance\", \"aid\", \"assist\", \"help\"],\r\n            \"nay\": [\"already\", \"mom\", \"mother\", \"although\", \"that\"],\r\n            \"balo\": [\"don't know\", \"garfish\", \"loop\", \"needlefish\", \"dowager\", \"widow\", \"widower\"],\r\n            \"pag-antos\": [\"affliction\", \"endurance\", \"patience\", \"sufferings\", \"bear\", \"endure\", \"put up\", \"suffer\", \"tolerate\", \"withstand\"],\r\n            \"pagpanalipod\": [\"defense\", \"protection\", \"defend\", \"protect\", \"shield\", \"block\", \"obstruct\"],\r\n            \"dunot\": [\"putrid\", \"rotten\"],\r\n            \"kalibotan\": [\"awareness\", \"earth\", \"world\", \"around\", \"go around\", \"orbit\"]\r\n        }\r\n    };\r\n}\r\n","./public/src/bible_engbsb_chapter.mjs":"import {bible_verses_parse} from \"./bible_verses_parse.mjs\";\r\nimport {list_join} from \"./list_join.mjs\";\r\nimport {list_map} from \"./list_map.mjs\";\r\nimport {bible_chapter_parsed} from \"./bible_chapter_parsed.mjs\";\r\nexport async function bible_engbsb_chapter(chapter_name) {\r\n    let parsed_bsb = await bible_chapter_parsed('engbsb_html', chapter_name);\r\n    let verses_bsb = parsed_bsb.querySelectorAll('.m,.pc');\r\n    let mapped6 = list_map(verses_bsb, v => v.rawText);\r\n    let joined = list_join(mapped6, '');\r\n    let eng = bible_verses_parse(joined);\r\n    return eng;\r\n}\r\n","./public/src/bible_engbsb_chapter_upload.mjs":"import {bible_engbsb_storage_path_file} from \"./bible_engbsb_storage_path_file.mjs\";\r\nimport {storage_upload_object} from \"./storage_upload_object.mjs\";\r\nimport {bible_engbsb_chapter} from \"./bible_engbsb_chapter.mjs\";\r\nexport async function bible_engbsb_chapter_upload(chapter_name) {\r\n    let data = await bible_engbsb_chapter(chapter_name);\r\n    let destination = bible_engbsb_storage_path_file(chapter_name);\r\n    await storage_upload_object(data, destination);\r\n}\r\n","./public/src/bible_engbsb_storage_path.mjs":"export function bible_engbsb_storage_path() {\r\n    return 'bible/engbsb/';\r\n}\r\n","./public/src/bible_engbsb_storage_path_file.mjs":"import {file_name_json} from \"./file_name_json.mjs\";\r\nimport {bible_engbsb_storage_path} from \"./bible_engbsb_storage_path.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nexport function bible_engbsb_storage_path_file(chapter_name) {\r\n    let file_name = file_name_json(chapter_name);\r\n    return string_combine(bible_engbsb_storage_path(), file_name);\r\n}\r\n","./public/src/bible_token_normalize.mjs":"import {string_case_lower} from \"./string_case_lower.mjs\";\r\nimport {string_replace_multiple} from \"./string_replace_multiple.mjs\";\r\nexport function bible_token_normalize(token) {\r\n    let mapped3 = string_case_lower(token);\r\n    let symbols = [',', '1', '2', '.', ';', '“', '”', ':'];\r\n    let mapped4 = string_replace_multiple(mapped3, symbols, '');\r\n    return mapped4;\r\n}\r\n","./public/src/bible_verses_parse.mjs":"import {equal} from \"./equal.mjs\";\r\nimport {string_empty_not_is} from \"./string_empty_not_is.mjs\";\r\nimport {number_is} from \"./number_is.mjs\";\r\nimport {integer_parse} from \"./integer_parse.mjs\";\r\nimport {list_last} from \"./list_last.mjs\";\r\nimport {each_pairs} from \"./each_pairs.mjs\";\r\nimport {string_split_space} from \"./string_split_space.mjs\";\r\nimport {list_map} from \"./list_map.mjs\";\r\nimport {string_split} from \"./string_split.mjs\";\r\nimport {list_index_last} from \"./list_index_last.mjs\";\r\nimport {assert} from \"./assert.mjs\";\r\nimport {list_adder} from \"./list_adder.mjs\";\r\nimport {list_take} from \"./list_take.mjs\";\r\nimport {list_filter} from \"./list_filter.mjs\";\r\nexport function bible_verses_parse(rawText) {\r\n    let split = string_split(rawText, '&#160;');\r\n    let mapped = list_map(split, s => {\r\n        let s2 = string_split_space(s);\r\n        return list_filter(s2, string_empty_not_is);\r\n    });\r\n    let last = list_last(mapped);\r\n    return list_adder(la => {\r\n        each_pairs(mapped, (previous, current) => {\r\n            let {verse_number} = verse_get(previous);\r\n            let {tokens} = verse_get(current);\r\n            if (equal(current, last)) {\r\n                tokens = current;\r\n            }\r\n            la({\r\n                verse_number,\r\n                tokens\r\n            });\r\n        });\r\n    });\r\n    function verse_get(verse_tokens) {\r\n        let verse_number = list_last(verse_tokens);\r\n        let parsed = integer_parse(verse_number);\r\n        assert(number_is, [parsed]);\r\n        let less_1 = list_index_last(verse_tokens);\r\n        let tokens = list_take(verse_tokens, less_1);\r\n        return {\r\n            verse_number,\r\n            tokens\r\n        };\r\n    }\r\n}\r\n","./public/src/call_multiple.mjs":"import {list_adder} from \"./list_adder.mjs\";\r\nimport {range} from \"./range.mjs\";\r\nexport function call_multiple(fn, times) {\r\n    return list_adder(la => {\r\n        for (let i of range(times)) {\r\n            la(fn());\r\n        }\r\n    });\r\n}\r\n","./public/src/ceb_definition.mjs":"import {string_combine_multiple} from './string_combine_multiple.mjs';\r\nimport {http_cache} from './http_cache.mjs';\r\nimport {html_parse} from './html_parse.mjs';\r\nimport {list_map} from './list_map.mjs';\r\nimport {object_property_get} from './object_property_get.mjs';\r\nimport {string_starts_with} from './string_starts_with.mjs';\r\nimport {string_trim} from './string_trim.mjs';\r\nimport {list_unique} from './list_unique.mjs';\r\nimport {list_filter} from './list_filter.mjs';\r\nexport async function ceb_definition(word) {\r\n    let url = string_combine_multiple(['https://www.binisaya.com/node/21?search=binisaya&word=', word, '&Search=Search']);\r\n    let html = await http_cache(url);\r\n    let parsed = html_parse(html);\r\n    let q = parsed.querySelectorAll('a[href]');\r\n    let filtered = list_filter(q, i => {\r\n        let href = i.getAttribute('href');\r\n        return string_starts_with(href, 'http://www.binisaya.com/english/');\r\n    });\r\n    let mapped = list_map(filtered, i => object_property_get(i, 'text'));\r\n    let mapped3 = list_map(mapped, i => string_trim(i));\r\n    let u = list_unique(mapped3);\r\n    return u;\r\n}\r\n","./public/src/ceb_learn.mjs":"import {html_style_centered} from \"./html_style_centered.mjs\";\r\nimport {html_button_width_full_text} from \"./html_button_width_full_text.mjs\";\r\nimport {html_document_body} from \"./html_document_body.mjs\";\r\nimport {ceb_translations} from \"./ceb_translations.mjs\";\r\nimport {list_map} from \"./list_map.mjs\";\r\nimport {object_properties} from \"./object_properties.mjs\";\r\nimport {object_property_get} from \"./object_property_get.mjs\";\r\nimport {string_length} from \"./string_length.mjs\";\r\nimport {list_sort} from \"./list_sort.mjs\";\r\nimport {html_element} from \"./html_element.mjs\";\r\nimport {list_get} from \"./list_get.mjs\";\r\nimport {html_inner_set} from \"./html_inner_set.mjs\";\r\nimport {html_style} from \"./html_style.mjs\";\r\nimport {html_style_width_full} from \"./html_style_width_full.mjs\";\r\nimport {html_on_click} from \"./html_on_click.mjs\";\r\nimport {html_value_set} from \"./html_value_set.mjs\";\r\nimport {html_on} from \"./html_on.mjs\";\r\nimport {html_value_get} from \"./html_value_get.mjs\";\r\nexport function ceb_learn() {\r\n    let root = html_document_body();\r\n    let button_font_size = '5vh';\r\n    let button1 = html_element(root, 'div');\r\n    html_style(button1, {\r\n        'font-size': button_font_size\r\n    });\r\n    html_style(button1, {\r\n        'font-weight': 'bold'\r\n    });\r\n    html_style_centered(button1);\r\n    html_style_width_full(button1);\r\n    let button2 = html_element(root, 'div');\r\n    html_style(button2, {\r\n        'font-size': button_font_size\r\n    });\r\n    html_style(button2, {\r\n        'font-weight': 'bold'\r\n    });\r\n    html_style_centered(button2);\r\n    html_style_width_full(button2);\r\n    const button_text = 'previous';\r\n    let button_previous = html_button_width_full_text(root, button_text);\r\n    html_style(button_previous, {\r\n        'font-size': button_font_size\r\n    });\r\n    let button_next = html_element(root, 'button');\r\n    html_style(button_next, {\r\n        'font-size': button_font_size\r\n    });\r\n    html_style_width_full(button_next);\r\n    html_inner_set(button_next, 'next');\r\n    let input = html_element(root, 'input');\r\n    html_style(input, {\r\n        'font-size': button_font_size\r\n    });\r\n    html_style_centered(input);\r\n    html_style_width_full(input);\r\n    let translations = ceb_translations();\r\n    let keys = object_properties(translations);\r\n    let mapped = list_map(keys, key => {\r\n        return {\r\n            key,\r\n            value: object_property_get(translations, key)\r\n        };\r\n    });\r\n    list_sort(mapped, item => string_length(item.key));\r\n    let index = 0;\r\n    refresh();\r\n    function refresh() {\r\n        html_value_set(input, index);\r\n        let item = list_get(mapped, index);\r\n        html_inner_set(button1, item.key);\r\n        html_inner_set(button2, item.value);\r\n    }\r\n    html_on_click(button_previous, () => {\r\n        index--;\r\n        refresh();\r\n    });\r\n    html_on_click(button_next, () => {\r\n        index++;\r\n        refresh();\r\n    });\r\n    html_on(input, 'change', () => {\r\n        index = parseInt(html_value_get(input), 10);\r\n        refresh();\r\n    });\r\n}\r\n","./public/src/ceb_translations_generate.mjs":"import {folder_read} from './folder_read.mjs';\r\nimport {file_read} from './file_read.mjs';\r\nimport {newline} from './newline.mjs';\r\nimport {string_split} from './string_split.mjs';\r\nimport {string_get} from './string_get.mjs';\r\nimport {function_new_generic} from './function_new_generic.mjs';\r\nimport {list_join} from './list_join.mjs';\r\nimport {object_property_get} from './object_property_get.mjs';\r\nimport {string_combine_multiple} from './string_combine_multiple.mjs';\r\nimport {list_adder} from './list_adder.mjs';\r\nimport {string_delimit} from './string_delimit.mjs';\r\nimport {js_code_return} from './js_code_return.mjs';\r\nexport async function ceb_translations_generate() {\r\n    let folder = `./translations/ceb/learnentry/letters/`;\r\n    let extension = `.txt`;\r\n    let words = {};\r\n    let files = await folder_read(folder, extension);\r\n    for (let file of files) {\r\n        let contents = await file_read(file);\r\n        let lines = string_split(contents, newline());\r\n        for (let line of lines) {\r\n            let split = string_split(line, '\\t');\r\n            let first = string_get(split, 0);\r\n            let second = string_get(split, 1);\r\n            words[first] = second;\r\n        }\r\n    }\r\n    let pairs = list_adder(la => {\r\n        for (let word in words) {\r\n            let value = object_property_get(words, word);\r\n            la(string_combine_multiple([string_delimit(word), ':', string_delimit(value)]));\r\n        }\r\n    });\r\n    let entries_string = list_join(pairs, ', ');\r\n    let body_string = js_code_return(`{ ${entries_string} }`);\r\n    await function_new_generic(`ceb_translations`, ``, body_string, false, [], false);\r\n}\r\n","./public/src/command_line.mjs":"\r\nimport {import_node} from \"./import_node.mjs\";\r\nexport async function command_line(command) {\r\n    let c = await import_node(\"child_process\")\r\n    let  {exec}  = c;\r\n    return await new Promise(resolve => {\r\n        exec(command, (error, stdout, stderr) => {\r\n            resolve({\r\n                error,\r\n                stdout,\r\n                stderr\r\n            });\r\n        });\r\n    });\r\n}\r\n","./public/src/command_line_git.mjs":"import {command_line} from \"./command_line.mjs\";\r\nexport async function command_line_git(args) {\r\n    await command_line(`git ${args}`);\r\n}\r\n","./public/src/divide.mjs":"export function divide(i, max) {\r\n    return i / max;\r\n}\r\n","./public/src/each_index.mjs":"export function each_index(list, lambda) {\r\n    let index = 0;\r\n    for (let element of list) {\r\n        lambda(element, index);\r\n        index++;\r\n    }\r\n}\r\n","./public/src/each_object.mjs":"import {object_property_get} from \"./object_property_get.mjs\";\r\nimport {object_properties} from \"./object_properties.mjs\";\r\nexport function each_object(object, lambda) {\r\n    let keys = object_properties(object);\r\n    for (let key of keys) {\r\n        let value = object_property_get(object, key);\r\n        lambda(key, value);\r\n    }\r\n}\r\n","./public/src/each_object_async.mjs":"import {object_property_get} from \"./object_property_get.mjs\";\r\nimport {object_properties} from \"./object_properties.mjs\";\r\nexport async function each_object_async(object, lambda) {\r\n    let keys = object_properties(object);\r\n    for (let key of keys) {\r\n        let value = object_property_get(object, key);\r\n        await lambda(key, value);\r\n    }\r\n}\r\n","./public/src/each_pairs.mjs":"import {add_1} from \"./add_1.mjs\";\r\nimport {list_get} from \"./list_get.mjs\";\r\nimport {list_index_last} from \"./list_index_last.mjs\";\r\nimport {range} from \"./range.mjs\";\r\nexport function each_pairs(list, lambda) {\r\n    let last_index = list_index_last(list);\r\n    for (let i of range(last_index)) {\r\n        let i_next = add_1(i);\r\n        let current = list_get(list, i);\r\n        let next = list_get(list, i_next);\r\n        lambda(current, next);\r\n    }\r\n}\r\n","./public/src/each_reverse.mjs":"import {list_index_first} from \"./list_index_first.mjs\";\r\nimport {list_get} from \"./list_get.mjs\";\r\nimport {list_index_last} from \"./list_index_last.mjs\";\r\nexport function each_reverse(list, lambda) {\r\n    let index_last = list_index_last(list);\r\n    for (let i = index_last; i >= list_index_first(); i--) {\r\n        let element = list_get(list, i);\r\n        lambda(element);\r\n    }\r\n}\r\n","./public/src/equal.mjs":"export function equal(a, b) {\r\n    return a === b;\r\n}\r\n","./public/src/equal_1.mjs":"import {equal} from \"./equal.mjs\";\r\nexport function equal_1(length) {\r\n    return equal(length, 1);\r\n}\r\n","./public/src/equal_by.mjs":"import {equal} from \"./equal.mjs\";\r\nexport function equal_by(a, b, mapper) {\r\n    return equal(mapper(a), mapper(b));\r\n}\r\n","./public/src/equal_json.mjs":"import {equal_by} from \"./equal_by.mjs\";\r\nimport {json_to} from \"./json_to.mjs\";\r\nexport function equal_json(a, b) {\r\n    return equal_by(a, b, json_to);\r\n}\r\n","./public/src/equal_not.mjs":"export function equal_not(value, value2) {\r\n    return value !== value2;\r\n}\r\n","./public/src/error.mjs":"export function error(message) {\r\n    throw new Error(message);\r\n}\r\n","./public/src/file_copy.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nimport {file_open} from './file_open.mjs';\r\nimport {assert_not_async} from './assert_not_async.mjs';\r\nimport {file_exists} from './file_exists.mjs';\r\nexport async function file_copy(file_name_from, file_name_to) {\r\n    await assert_not_async(file_exists, [file_name_to]);\r\n    await fs.promises.copyFile(file_name_from, file_name_to);\r\n    await file_open(file_name_to);\r\n}\r\n","./public/src/file_delete.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nexport async function file_delete(file_name) {\r\n    return await fs.promises.rm(file_name);\r\n}\r\n","./public/src/file_empty.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nexport async function file_empty(file_new_name) {\r\n    await fs.promises.writeFile(file_new_name, '');\r\n}\r\n","./public/src/file_exists.mjs":"import {global_get} from \"./global_get.mjs\";\r\nimport {web_is} from './web_is.mjs';\r\nimport {import_node} from './import_node.mjs';\r\nimport { object_properties } from \"./object_properties.mjs\";\r\nimport { list_includes } from \"./list_includes.mjs\";\r\nlet fs = await import_node('fs');\r\nexport function file_exists(file_name) {\r\n    if (web_is()) {\r\n        let {files} = global_get();\r\n        let keys = object_properties(files);\r\n        return list_includes(keys, file_name);\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        fs.stat(file_name, function (err, stat) {\r\n            if (err == null) {\r\n                resolve(true);\r\n            } else if (err.code === 'ENOENT') {\r\n                resolve(false);\r\n            } else {\r\n                reject(err);\r\n            }\r\n        });\r\n    });\r\n}\r\n","./public/src/file_js_identifier_rename.mjs":"import {js_identifier_rename} from \"./js_identifier_rename.mjs\";\r\nimport {file_js_transform} from \"./file_js_transform.mjs\";\r\nexport async function file_js_identifier_rename(file_path, identifier_from, identifier_to) {\r\n    let lambda = js_identifier_rename;\r\n    await file_js_transform(lambda, file_path, [identifier_from, identifier_to]);\r\n}\r\n","./public/src/file_js_parse.mjs":"import {file_read} from './file_read.mjs';\r\nimport {js_parse} from './js_parse.mjs';\r\nexport async function file_js_parse(file_name) {\r\n    let code = await file_read(file_name);\r\n    let parsed = js_parse(code);\r\n    return parsed;\r\n}\r\n","./public/src/file_js_transform.mjs":"import {file_js_parse} from \"./file_js_parse.mjs\";\r\nimport {file_js_unparse} from \"./file_js_unparse.mjs\";\r\nexport async function file_js_transform(lambda, file_path, args) {\r\n    let ast = await file_js_parse(file_path);\r\n    let result = await lambda(ast, ...args);\r\n    await file_js_unparse(file_path, ast);\r\n    return result;\r\n}\r\n","./public/src/file_js_unparse.mjs":"import {file_overwrite} from './file_overwrite.mjs';\r\nimport {js_unparse} from './js_unparse.mjs';\r\nexport async function file_js_unparse(file_name, ast) {\r\n    let code = js_unparse(ast);\r\n    await file_overwrite(file_name, code);\r\n}\r\n","./public/src/file_line_append.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nimport {newline} from './newline.mjs';\r\nexport async function file_line_append(file_new_name, line) {\r\n    await fs.promises.appendFile(file_new_name, [newline(), line].join(''));\r\n}\r\n","./public/src/file_line_prepend.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nimport {newline} from './newline.mjs';\r\nexport async function file_line_prepend(file_new_name, line) {\r\n    await fs.promises.appendFile(file_new_name, [line, newline()].join(''));\r\n}\r\n","./public/src/file_name_json.mjs":"import {string_combine} from \"./string_combine.mjs\";\r\nexport function file_name_json(key_encoded) {\r\n    return string_combine(key_encoded, '.json');\r\n}\r\n","./public/src/file_open.mjs":"import {command_line} from './command_line.mjs';\r\nexport async function file_open(file_name) {\r\n    await command_line(`code ${file_name}`);\r\n}\r\n","./public/src/file_overwrite.mjs":"import {global_get} from \"./global_get.mjs\";\r\nimport {web_is} from \"./web_is.mjs\";\r\nimport {import_node} from './import_node.mjs';\r\nimport {object_property_set} from './object_property_set.mjs';\r\nexport async function file_overwrite(file_name, data) {\r\n    if (web_is()) {\r\n        let {files} = global_get();\r\n        object_property_set(files, file_name, data);\r\n    } else {\r\n        console.log({file_name})\r\n        let fs = await import('fs');\r\n        return await fs.promises.writeFile(file_name, data, 'utf-8');\r\n    }\r\n}\r\n","./public/src/file_read.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nexport async function file_read(file_name) {\r\n    return await fs.promises.readFile(file_name, 'utf-8');\r\n}\r\n","./public/src/file_read_json.mjs":"import {json_from} from \"./json_from.mjs\";\r\nimport {file_read} from \"./file_read.mjs\";\r\nexport async function file_read_json(file_path) {\r\n    let json = await file_read(file_path);\r\n    let object = json_from(json);\r\n    return object;\r\n}\r\n","./public/src/file_rename.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nexport async function file_rename(file_name_from, file_name_to) {\r\n    await fs.promises.rename(file_name_from, file_name_to);\r\n}\r\n","./public/src/file_write.mjs":"import {assert_not_async} from './assert_not_async.mjs';\r\nimport {file_exists} from './file_exists.mjs';\r\nimport {file_overwrite} from './file_overwrite.mjs';\r\nexport async function file_write(file_name, data) {\r\n    await assert_not_async(file_exists, [file_name]);\r\n    return await file_overwrite(file_name, data);\r\n}\r\n","./public/src/file_write_json.mjs":"import {file_write} from \"./file_write.mjs\";\r\nimport {json_to} from \"./json_to.mjs\";\r\nexport async function file_write_json(file_path, object) {\r\n    let json = json_to(object);\r\n    await file_write(file_path, json);\r\n}\r\n","./public/src/floor.mjs":"export function floor(n) {\r\n    return Math.floor(n);\r\n}\r\n","./public/src/folder_current.mjs":"export function folder_current() {\r\n    return `.`;\r\n}\r\n","./public/src/folder_gitignore.mjs":"import {path_join} from './path_join.mjs';\r\nexport function folder_gitignore() {\r\n    return path_join(['.', 'gitignore']);\r\n}\r\n","./public/src/folder_name_public.mjs":"export function folder_name_public() {\r\n    return 'public';\r\n}\r\n","./public/src/folder_name_src.mjs":"export function folder_name_src() {\r\n    return 'src';\r\n}\r\n","./public/src/folder_new.mjs":"import {import_node} from './import_node.mjs';let fs = await import_node('fs');\r\nexport async function folder_new(folder_new_name) {\r\n    await fs.promises.mkdir(folder_new_name);\r\n}\r\n","./public/src/folder_path_src.mjs":"import {folder_name_src} from \"./folder_name_src.mjs\";\r\nimport {folder_name_public} from \"./folder_name_public.mjs\";\r\nexport function folder_path_src() {\r\n    let a = `${folder_name_public()}/${folder_name_src()}/`;\r\n    return a;\r\n}\r\n","./public/src/folder_read.mjs":"import {import_node} from './import_node.mjs';\r\nlet g = await import_node('glob');\r\nexport async function folder_read(folder, file_extension) {\r\n    let {glob} = g;\r\n    let files = await glob(`${folder}**/*${file_extension}`);\r\n    return files;\r\n}\r\n","./public/src/functions_source_get.mjs":"import {function_contents} from \"./function_contents.mjs\";\r\nimport {object_property_set} from \"./object_property_set.mjs\";\r\nexport async function functions_source_get() {\r\n    let mapped = await function_contents();\r\n    let result = {};\r\n    for (let fc of mapped) {\r\n        let {file_path, contents} = fc;\r\n        object_property_set(result, file_path, contents);\r\n    }\r\n    return result;\r\n}\r\n","./public/src/functions_source_set.mjs":"import {object_property_exists} from \"./object_property_exists.mjs\";\r\nimport {list_map} from \"./list_map.mjs\";\r\nimport {object_property_get} from \"./object_property_get.mjs\";\r\nimport {function_contents} from \"./function_contents.mjs\";\r\nimport {object_properties} from \"./object_properties.mjs\";\r\nimport {promise_all} from \"./promise_all.mjs\";\r\nimport { equal_not } from \"./equal_not.mjs\";\r\nimport { file_overwrite } from \"./file_overwrite.mjs\";\r\nexport async function functions_source_set(contents) {\r\n    let existing = await function_contents();\r\n    let keys = object_properties(contents);\r\n    let mapped = list_map(keys, async key => {\r\n        let value = object_property_get(contents, key);\r\n        return await lambda(key, value);\r\n    });\r\n    await promise_all(mapped);\r\n    async function lambda(file_path, contents) {\r\n        if (object_property_exists(existing, file_path)) {\r\n            let contents_existing = object_property_get(existing, file_path);\r\n            if (equal(contents, contents_existing)) {\r\n                return;\r\n            }\r\n        }\r\n        await file_overwrite(file_path, contents)\r\n    }\r\n}\r\n","./public/src/function_cache.mjs":"import {file_name_json} from \"./file_name_json.mjs\";\r\nimport {file_write_json} from \"./file_write_json.mjs\";\r\nimport {file_read_json} from \"./file_read_json.mjs\";\r\nimport {json_to} from './json_to.mjs';\r\nimport {path_join} from './path_join.mjs';\r\nimport {folder_gitignore} from './folder_gitignore.mjs';\r\nimport {file_exists} from './file_exists.mjs';\r\nimport {string_encoded_to} from './string_encoded_to.mjs';\r\nimport {object_property_get} from './object_property_get.mjs';\r\nexport async function function_cache(fn, args) {\r\n    let function_name = fn.name;\r\n    let key = {\r\n        function_name,\r\n        args\r\n    };\r\n    let key_json = json_to(key);\r\n    let key_encoded = string_encoded_to(key_json);\r\n    let file_name = file_name_json(key_encoded);\r\n    let file_path = path_join([folder_gitignore(), 'cache', file_name]);\r\n    let result;\r\n    let json;\r\n    let object;\r\n    if (await file_exists(file_path)) {\r\n        object = await file_read_json(file_path);\r\n        result = object_property_get(object, 'result');\r\n        return result;\r\n    }\r\n    result = await fn(...args);\r\n    object = {\r\n        result\r\n    };\r\n    await file_write_json(file_path, object);\r\n    return result;\r\n}\r\n","./public/src/function_call_append.mjs":"import {js_call_append} from \"./js_call_append.mjs\";\r\nimport {function_transform_args_split} from \"./function_transform_args_split.mjs\";\r\nimport {assert} from \"./assert.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {list_get} from \"./list_get.mjs\";\r\nimport {list_length} from \"./list_length.mjs\";\r\nimport {string_split} from \"./string_split.mjs\";\r\nimport {string_split_comma} from \"./string_split_comma.mjs\";\r\nexport async function function_call_append(function_name, combined) {\r\n    let split = string_split(combined, ':');\r\n    let length = list_length(split);\r\n    assert(equal, [length, 3]);\r\n    let callee = list_get(split, 0);\r\n    let args_string = list_get(split, 1);\r\n    let result_name = list_get(split, 2);\r\n    let args;\r\n    if (equal(args_string, '')) {\r\n        args = [];\r\n    } else {\r\n        args = string_split_comma(args_string);\r\n    }\r\n    await function_transform_args_split(js_call_append.name, function_name, [{\r\n        function_name: callee,\r\n        args,\r\n        result_name\r\n    }]);\r\n}\r\n","./public/src/function_contents.mjs":"import {list_adder_async} from \"./list_adder_async.mjs\";\r\nimport {promise_all} from \"./promise_all.mjs\";\r\nimport {file_read} from \"./file_read.mjs\";\r\nimport {list_map} from \"./list_map.mjs\";\r\nimport {function_paths} from \"./function_paths.mjs\";\r\nexport async function function_contents() {\r\n    let paths = await function_paths();\r\n    let mapped = list_map(paths, async file_path => {\r\n        return {\r\n            file_path,\r\n            contents: await file_read(file_path)\r\n        };\r\n    });\r\n    return await promise_all(mapped);\r\n}\r\n","./public/src/function_copy.mjs":"import {file_copy} from \"./file_copy.mjs\";\r\nimport {function_copy_generic} from \"./function_copy_generic.mjs\";\r\nexport async function function_copy(fn_name_from, fn_name_to) {\r\n    let lambda = file_copy;\r\n    function_copy_generic(lambda, fn_name_from, fn_name_to);\r\n}\r\n","./public/src/function_copy_generic.mjs":"import {function_name_to_path} from \"./function_name_to_path.mjs\";\r\nimport {file_js_identifier_rename} from \"./file_js_identifier_rename.mjs\";\r\nexport async function function_copy_generic(file_lambda, fn_name_from, fn_name_to) {\r\n    let fn_path_from = function_name_to_path(fn_name_from);\r\n    let fn_path_to = function_name_to_path(fn_name_to);\r\n    await file_lambda(fn_path_from, fn_path_to);\r\n    await file_js_identifier_rename(fn_path_to, fn_name_from, fn_name_to);\r\n}\r\n","./public/src/function_extension.mjs":"export function function_extension() {\r\n    let extension = 'mjs';\r\n    return extension;\r\n}\r\n","./public/src/function_import.mjs":"import {import_node} from './import_node.mjs';let path = await import_node('path');\r\nimport {function_extension} from './function_extension.mjs';\r\nexport async function function_import(function_name) {\r\n    let extension = function_extension();\r\n    let extension_marker = '.';\r\n    let folder_current = '.';\r\n    let first_with_extension = [function_name, extension_marker, extension].join('');\r\n    let function_path_second = path.join(folder_current, first_with_extension);\r\n    let function_path = './' + function_path_second;\r\n    let imported = await import(function_path);\r\n    let imported_function = imported[function_name];\r\n    return imported_function;\r\n}\r\n","./public/src/function_imports_add.mjs":"import {js_imports_add} from \"./js_imports_add.mjs\";\r\nimport {function_transform} from \"./function_transform.mjs\";\r\nexport async function function_imports_add(function_name) {\r\n    await function_transform(js_imports_add.name, function_name);\r\n}\r\n","./public/src/function_import_add.mjs":"import {function_name_to_path} from \"./function_name_to_path.mjs\";\r\nimport {file_line_prepend} from \"./file_line_prepend.mjs\";\r\nimport {js_code_import} from \"./js_code_import.mjs\";\r\nexport async function function_import_add(function_name, import_name) {\r\n    let function_path = function_name_to_path(function_name);\r\n    let import_code = js_code_import(import_name);\r\n    await file_line_prepend(function_path, import_code);\r\n}\r\n","./public/src/function_names.mjs":"import {list_reverse} from \"./list_reverse.mjs\";\r\nimport {folder_path_src} from \"./folder_path_src.mjs\";\r\nimport {list_map} from './list_map.mjs';\r\nimport {string_prefix_without} from './string_prefix_without.mjs';\r\nimport {string_suffix_without} from './string_suffix_without.mjs';\r\nimport {string_replace} from './string_replace.mjs';\r\nimport {folder_read} from './folder_read.mjs';\r\nexport async function function_names() {\r\n    let prefix = folder_path_src();\r\n    let suffix = '.mjs';\r\n    let files = await folder_read(prefix, suffix);\r\n    let mapped = list_map(files, file_path => {\r\n        let replaced = string_replace(file_path, '\\\\', '/');\r\n        let mapped2 = string_prefix_without(replaced, prefix);\r\n        let mapped3 = string_suffix_without(mapped2, suffix);\r\n        return mapped3;\r\n    });\r\n    list_reverse(mapped);\r\n    return mapped;\r\n}\r\n","./public/src/function_name_to_parts.mjs":"import {string_split_underscore} from './string_split_underscore.mjs';\r\nexport function function_name_to_parts(function_name) {\r\n    return string_split_underscore(function_name);\r\n}\r\n","./public/src/function_name_to_path.mjs":"import {function_path_suffix} from \"./function_path_suffix.mjs\";\r\nimport {function_path_prefix} from \"./function_path_prefix.mjs\";\r\nimport {string_combine_multiple} from './string_combine_multiple.mjs';\r\nexport function function_name_to_path(function_name) {\r\n    return string_combine_multiple([function_path_prefix(), function_name, function_path_suffix()]);\r\n}\r\n","./public/src/function_new.mjs":"import {function_new_generic} from \"./function_new_generic.mjs\";\r\nexport async function function_new(function_name) {\r\n    const open = true;\r\n    await function_new_generic(function_name, '', '', open, [], false);\r\n}\r\n","./public/src/function_new_args.mjs":"import {function_new_generic} from \"./function_new_generic.mjs\";\r\nimport {list_join} from \"./list_join.mjs\";\r\nimport {string_split_comma} from \"./string_split_comma.mjs\";\r\nexport async function function_new_args(function_name, args) {\r\n    let args_split = string_split_comma(args);\r\n    let args_joined = list_join(args_split, ', ');\r\n    await function_new_generic(function_name, args_joined, '', true, [], false);\r\n}\r\n","./public/src/function_new_generic.mjs":"import {file_write} from \"./file_write.mjs\";\r\nimport {file_open} from './file_open.mjs';\r\nimport {function_name_to_path} from './function_name_to_path.mjs';\r\nimport {list_map} from './list_map.mjs';\r\nimport {js_code_import} from './js_code_import.mjs';\r\nimport {list_concat} from './list_concat.mjs';\r\nimport {list_join} from './list_join.mjs';\r\nimport {newline} from './newline.mjs';\r\nimport {js_parse} from './js_parse.mjs';\r\nimport {js_unparse} from './js_unparse.mjs';\r\nexport async function function_new_generic(function_name, args_string, body_string, open, imports, async_is) {\r\n    let space = async_is ? ` async ` : ' ';\r\n    let contents_function = `export${space}function ${function_name}(${args_string}) {\r\n${body_string}\r\n}`;\r\n    let mapped = list_map(imports, js_code_import);\r\n    let concat = list_concat(mapped, [contents_function]);\r\n    let contents = list_join(concat, newline());\r\n    let parsed = js_parse(contents);\r\n    let unparsed = js_unparse(parsed);\r\n    let file_path = function_name_to_path(function_name);\r\n    await file_write(file_path, unparsed);\r\n    if (open) {\r\n        await file_open(file_path);\r\n    }\r\n}\r\n","./public/src/function_open.mjs":"import {file_open} from \"./file_open.mjs\";\r\nimport {function_name_to_path} from \"./function_name_to_path.mjs\";\r\nexport async function function_open(function_name) {\r\n    const file_path = function_name_to_path(function_name);\r\n    await file_open(file_path);\r\n}\r\n","./public/src/function_paths.mjs":"import {function_name_to_path} from \"./function_name_to_path.mjs\";\r\nimport {list_map} from \"./list_map.mjs\";\r\nimport {function_names} from \"./function_names.mjs\";\r\nexport async function function_paths() {\r\n    let names = await function_names();\r\n    let paths = list_map(names, function_name_to_path);\r\n    return paths;\r\n}\r\n","./public/src/function_path_prefix.mjs":"import {folder_path_src} from \"./folder_path_src.mjs\";\r\nexport function function_path_prefix() {\r\n    return `./${folder_path_src()}`;\r\n}\r\n","./public/src/function_path_suffix.mjs":"import {function_extension} from \"./function_extension.mjs\";\r\nexport function function_path_suffix() {\r\n    return `.${function_extension()}`;\r\n}\r\n","./public/src/function_path_to_name.mjs":"import { function_path_prefix } from \"./function_path_prefix.mjs\";\r\nimport { function_path_suffix } from \"./function_path_suffix.mjs\";\r\nimport { string_prefix_without } from \"./string_prefix_without.mjs\";\r\nimport { string_suffix_without } from \"./string_suffix_without.mjs\";\r\n\r\nexport function function_path_to_name(function_path) {\r\n    function_path = string_prefix_without(function_path, function_path_prefix())\r\n    function_path = string_suffix_without(function_path, function_path_suffix())\r\n    return function_path;\r\n}\r\n","./public/src/function_read.mjs":"import {file_read} from \"./file_read.mjs\";\r\nimport {function_name_to_path} from \"./function_name_to_path.mjs\";\r\nexport async function function_read(function_name) {\r\n    let function_path = function_name_to_path(function_name);\r\n    return await file_read(function_path);\r\n}\r\n","./public/src/function_rename.mjs":"import {file_rename} from \"./file_rename.mjs\";\r\nimport {function_copy_generic} from \"./function_copy_generic.mjs\";\r\nexport async function function_rename(fn_name_from, fn_name_to) {\r\n    let lambda = file_rename;\r\n    function_copy_generic(lambda, fn_name_from, fn_name_to);\r\n}\r\n","./public/src/function_run.mjs":"import {server_port} from \"./server_port.mjs\";\r\nimport {http_post} from \"./http_post.mjs\";\r\nimport {function_import} from './function_import.mjs';\r\nimport { web_is } from \"./web_is.mjs\";\r\nexport async function function_run(function_name, args) {\r\n    let result;\r\n    if (web_is()) {\r\n        result = await http_post(`http://localhost:${server_port()}/`, {\r\n            function_name,\r\n            args\r\n        });\r\n    } else {\r\n        let imported_function = await function_import(function_name);\r\n        result = await imported_function(...args);\r\n    }\r\n    return result;\r\n}\r\n","./public/src/function_run_json.mjs":"import { error } from \"./error.mjs\";\r\nimport {file_overwrite} from \"./file_overwrite.mjs\";\r\nimport {file_read} from \"./file_read.mjs\";\r\nimport {function_run} from \"./function_run.mjs\";\r\nimport {json_from} from \"./json_from.mjs\";\r\nimport {json_to} from \"./json_to.mjs\";\r\nexport async function function_run_json(function_name, input_file_path, output_file_path) {\r\n    let args_json_string = await file_read(input_file_path);\r\n    let {args} = json_from(args_json_string);\r\n    let result = await function_run(function_name, args);\r\n    let json = json_to(result);\r\n    await file_overwrite(output_file_path, json);\r\n}\r\n","./public/src/function_search.mjs":"import {string_split_comma} from './string_split_comma.mjs';\r\nimport {function_names} from './function_names.mjs';\r\nimport {list_filter} from './list_filter.mjs';\r\nimport {function_search_terms_match} from './function_search_terms_match.mjs';\r\nexport async function function_search(query) {\r\n    let terms = string_split_comma(query);\r\n    let fn_names = await function_names();\r\n    let result = list_filter(fn_names, fn_name => {\r\n        return function_search_terms_match(fn_name, terms);\r\n    });\r\n    return result;\r\n}\r\n","./public/src/function_search_terms_match.mjs":"import {function_name_to_parts} from './function_name_to_parts.mjs';\r\nimport {list_includes_multiple} from './list_includes_multiple.mjs';\r\nexport function function_search_terms_match(function_name, terms) {\r\n    let fn_name_parts = function_name_to_parts(function_name);\r\n    return list_includes_multiple(fn_name_parts, terms);\r\n}\r\n","./public/src/function_tests_generate.mjs":"import {function_run} from \"./function_run.mjs\";\r\nimport {range} from \"./range.mjs\";\r\nimport {add_1} from \"./add_1.mjs\";\r\nimport {list_random_item} from \"./list_random_item.mjs\";\r\nimport {json_to} from \"./json_to.mjs\";\r\nimport {object_property_exists} from \"./object_property_exists.mjs\";\r\nimport {tests_generate_single} from \"./tests_generate_single.mjs\";\r\nimport {object_property_set} from \"./object_property_set.mjs\";\r\nexport async function function_tests_generate(function_name, args_values_get) {\r\n    let args_values = await function_run(args_values_get, []);\r\n    let existing = {};\r\n    let max = 10;\r\n    for (let test_index of range(max)) {\r\n        let test_number = add_1(test_index);\r\n        let attempts = 100;\r\n        for (let attempt of range(attempts)) {\r\n            let args = list_random_item(args_values);\r\n            let args_json = json_to(args);\r\n            if (!object_property_exists(existing, args_json)) {\r\n                object_property_set(existing, args_json, true);\r\n                await tests_generate_single(function_name, args, test_number);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","./public/src/function_transform.mjs":"import {function_transform_args} from \"./function_transform_args.mjs\";\r\nimport {list_length} from \"./list_length.mjs\";\r\nimport {assert} from \"./assert.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport async function function_transform(lambda_name, function_name) {\r\n    let args = arguments;\r\n    let length = list_length(args);\r\n    assert(equal, [length, 2]);\r\n    return function_transform_args(lambda_name, function_name, 'a');\r\n}\r\n","./public/src/function_transform_all.mjs":"import {function_names} from \"./function_names.mjs\";\r\nimport {function_transform_args} from \"./function_transform_args.mjs\";\r\nexport async function function_transform_all(lambda_name, args) {\r\n    let function_names_result = await function_names();\r\n    for (let function_name of function_names_result) {\r\n        await function_transform_args(lambda_name, function_name, args);\r\n    }\r\n}\r\n","./public/src/function_transform_args.mjs":"import {function_transform_args_split} from \"./function_transform_args_split.mjs\";\r\nimport {string_split_comma} from \"./string_split_comma.mjs\";\r\nexport async function function_transform_args(lambda_name, function_name, args) {\r\n    let args_split = string_split_comma(args);\r\n    return await function_transform_args_split(lambda_name, function_name, args_split);\r\n}\r\n","./public/src/function_transform_args_split.mjs":"import {file_js_transform} from \"./file_js_transform.mjs\";\r\nimport {function_name_to_path} from \"./function_name_to_path.mjs\";\r\nimport {function_import} from \"./function_import.mjs\";\r\nexport async function function_transform_args_split(lambda_name, function_name, args) {\r\n    let lambda = await function_import(lambda_name);\r\n    let file_path = function_name_to_path(function_name);\r\n    return await file_js_transform(lambda, file_path, args);\r\n}\r\n","./public/src/git_acp.mjs":"import {git_acp_message} from \"./git_acp_message.mjs\";\r\nexport async function git_acp() {\r\n    let commit_message = '';\r\n    await git_acp_message(commit_message);\r\n}\r\n","./public/src/git_acp_message.mjs":"import {git_ac_message} from \"./git_ac_message.mjs\";\r\nexport async function git_acp_message(commit_message) {\r\n    await git_ac_message(commit_message);\r\n    await git_push();\r\n}\r\n","./public/src/git_ac_message.mjs":"import {command_line_git} from \"./command_line_git.mjs\";\r\nexport async function git_ac_message(commit_message) {\r\n    let commands = ['add *', `commit -m \"${new Date().toISOString()}${commit_message}\"`];\r\n    for (let command of commands) {\r\n        await command_line_git(command);\r\n    }\r\n}\r\n","./public/src/git_push.mjs":"import {command_line_git} from \"./command_line_git.mjs\";\r\nexport async function git_push() {\r\n    await command_line_git('push');\r\n}\r\n","./public/src/global_get.mjs":"let global = {};\r\nexport function global_get() {\r\n    return global;\r\n}\r\n","./public/src/greater_than.mjs":"export function greater_than(a, b) {\r\n    return a > b;\r\n}\r\n","./public/src/greater_than_equal.mjs":"export function greater_than_equal(a, b) {\r\n    return a >= b;\r\n}\r\n","./public/src/html_button.mjs":"import {html_style_button_default} from \"./html_style_button_default.mjs\";\r\nimport {html_style} from \"./html_style.mjs\";\r\nimport {html_element} from \"./html_element.mjs\";\r\nexport function html_button(root) {\r\n    let result = html_element(root, 'button');\r\n    html_style(result, html_style_button_default());\r\n    return result;\r\n}\r\n","./public/src/html_button_width_full.mjs":"import {html_style_width_full} from \"./html_style_width_full.mjs\";\r\nimport {html_button} from \"./html_button.mjs\";\r\nexport function html_button_width_full(root) {\r\n    let button_previous = html_button(root);\r\n    html_style_width_full(button_previous);\r\n    return button_previous;\r\n}\r\n","./public/src/html_button_width_full_text.mjs":"import {html_inner_set} from \"./html_inner_set.mjs\";\r\nimport {html_button_width_full} from \"./html_button_width_full.mjs\";\r\nexport function html_button_width_full_text(parent, button_text) {\r\n    let button_previous = html_button_width_full(parent);\r\n    html_inner_set(button_previous, button_text);\r\n    return button_previous;\r\n}\r\n","./public/src/html_button_width_full_text_click.mjs":"import {html_on_click} from \"./html_on_click.mjs\";\r\nimport {html_button_width_full_text} from \"./html_button_width_full_text.mjs\";\r\nexport function html_button_width_full_text_click(parent, text, on_click) {\r\n    let button_next = html_button_width_full_text(parent, text);\r\n    html_on_click(button_next, on_click);\r\n    return button_next;\r\n}\r\n","./public/src/html_clear.mjs":"import {html_inner_set} from \"./html_inner_set.mjs\";\r\nexport function html_clear(root) {\r\n    html_inner_set(root, '');\r\n}\r\n","./public/src/html_disable.mjs":"export function html_disable(button_previous) {\r\n    button_previous.element.disabled = true;\r\n}\r\n","./public/src/html_div.mjs":"import {html_element} from \"./html_element.mjs\";\r\nexport function html_div(root_component) {\r\n    return html_element(root_component, 'div');\r\n}\r\n","./public/src/html_document_body.mjs":"export function html_document_body() {\r\n    return {\r\n        element: document.body\r\n    };\r\n}\r\n","./public/src/html_document_body_clear.mjs":"import {html_clear} from \"./html_clear.mjs\";\r\nimport {html_document_body} from \"./html_document_body.mjs\";\r\nexport function html_document_body_clear() {\r\n    let root = html_document_body();\r\n    html_clear(root);\r\n    return root;\r\n}\r\n","./public/src/html_element.mjs":"import {html_style_default} from \"./html_style_default.mjs\";\r\nimport {html_style} from \"./html_style.mjs\";\r\nexport function html_element(parent, tag_name) {\r\n    let {element} = parent;\r\n    let e = document.createElement(tag_name);\r\n    element.appendChild(e);\r\n    let result = {\r\n        element: e\r\n    };\r\n    html_style(result, html_style_default());\r\n    return result;\r\n}\r\n","./public/src/html_enable.mjs":"export function html_enable(button_previous) {\r\n    button_previous.element.disabled = false;\r\n}\r\n","./public/src/html_focus.mjs":"export function html_focus(input) {\r\n    let {element} = input;\r\n    element.focus();\r\n}\r\n","./public/src/html_hash.mjs":"import {html_hash_exists} from \"./html_hash_exists.mjs\";\r\nimport {html_hash_get} from \"./html_hash_get.mjs\";\r\nimport {object_property_get} from \"./object_property_get.mjs\";\r\nimport {list_includes} from \"./list_includes.mjs\";\r\nimport {list_get} from \"./list_get.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {assert} from \"./assert.mjs\";\r\nimport {list_length} from \"./list_length.mjs\";\r\nimport {string_split} from \"./string_split.mjs\";\r\nimport {string_prefix_without} from \"./string_prefix_without.mjs\";\r\nimport {object_properties} from \"./object_properties.mjs\";\r\nexport function html_hash(actions) {\r\n    let action_properties = object_properties(actions);\r\n    let hash = html_hash_get();\r\n    if (html_hash_exists()) {\r\n        let hash_no_tag = string_prefix_without(hash, '#');\r\n        let split = string_split(hash_no_tag, ',');\r\n        for (let s of split) {\r\n            let split2 = string_split(s, '=');\r\n            let s2_length = list_length(split2);\r\n            assert(equal, [s2_length, 2]);\r\n            let key = list_get(split2, 0);\r\n            let value = list_get(split2, 1);\r\n            if (list_includes(action_properties, key)) {\r\n                let action = object_property_get(actions, key);\r\n                action(value);\r\n            }\r\n        }\r\n    }\r\n}\r\n","./public/src/html_hash_exists.mjs":"import {html_hash_get} from \"./html_hash_get.mjs\";\r\nimport {string_length} from \"./string_length.mjs\";\r\nimport {greater_than} from \"./greater_than.mjs\";\r\nexport function html_hash_exists() {\r\n    return greater_than(string_length(html_hash_get()), 0);\r\n}\r\n","./public/src/html_hash_get.mjs":"export function html_hash_get() {\r\n    return window.location.hash;\r\n}\r\n","./public/src/html_hr.mjs":"import {html_element} from \"./html_element.mjs\";\r\nexport function html_hr(parent) {\r\n    html_element(parent, 'hr');\r\n}\r\n","./public/src/html_img.mjs":"import {object_property_set} from \"./object_property_set.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nimport {html_element} from \"./html_element.mjs\";\r\nexport function html_img(parent, img_name) {\r\n    let i1 = html_element(parent, 'img');\r\n    let img_path = string_combine('./img/', img_name);\r\n    let {element} = i1;\r\n    object_property_set(element, 'src', img_path);\r\n    return i1;\r\n}\r\n","./public/src/html_img_limited_centered.mjs":"import {html_style} from \"./html_style.mjs\";\r\nimport {html_img} from \"./html_img.mjs\";\r\nimport {html_style_centered} from \"./html_style_centered.mjs\";\r\nimport {html_div} from \"./html_div.mjs\";\r\nexport function html_img_limited_centered(parent, img_src) {\r\n    let container = html_div(parent);\r\n    html_style_centered(container);\r\n    let i1 = html_img(container, img_src);\r\n    html_style(i1, {\r\n        'max-height': '50dvh',\r\n        'max-width': '100%'\r\n    });\r\n}\r\n","./public/src/html_img_width_full.mjs":"import {html_img} from \"./html_img.mjs\";\r\nimport {html_style} from \"./html_style.mjs\";\r\nexport function html_img_width_full(parent, img_name) {\r\n    let i1 = html_img(parent, img_name);\r\n    html_style(i1, {\r\n        'width': '100%'\r\n    });\r\n}\r\n","./public/src/html_inner_set.mjs":"export function html_inner_set(component, text) {\r\n    let {element} = component;\r\n    element.innerHTML = text;\r\n}\r\n","./public/src/html_input.mjs":"import {html_style_border_box} from \"./html_style_border_box.mjs\";\r\nimport {html_element} from \"./html_element.mjs\";\r\nexport function html_input(root) {\r\n    let input = html_element(root, 'input');\r\n    html_style_border_box(input);\r\n    return input;\r\n}\r\n","./public/src/html_li.mjs":"import {html_element} from \"./html_element.mjs\";\r\nexport function html_li(ol) {\r\n    return html_element(ol, 'li');\r\n}\r\n","./public/src/html_li_text.mjs":"import {html_li} from \"./html_li.mjs\";\r\nimport {html_inner_set} from \"./html_inner_set.mjs\";\r\nexport function html_li_text(ol, text) {\r\n    let li = html_li(ol);\r\n    html_inner_set(li, text);\r\n    return li;\r\n}\r\n","./public/src/html_li_text_monospace.mjs":"import {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nimport {html_li_text} from \"./html_li_text.mjs\";\r\nexport function html_li_text_monospace(ol4, code) {\r\n    let li1 = html_li_text(ol4, code);\r\n    html_style_monospace(li1);\r\n}\r\n","./public/src/html_merge.mjs":"import {object_properties} from \"./object_properties.mjs\";\r\nimport {object_property_get} from \"./object_property_get.mjs\";\r\nexport function html_merge(component, to_merge) {\r\n    let {element} = component;\r\n    let ps = object_properties(to_merge);\r\n    for (let p of ps) {\r\n        let value = object_property_get(to_merge, p);\r\n        element.setAttribute(p, value);\r\n    }\r\n}\r\n","./public/src/html_ol.mjs":"import {html_element} from \"./html_element.mjs\";\r\nexport function html_ol(parent) {\r\n    return html_element(parent, 'ol');\r\n}\r\n","./public/src/html_on.mjs":"export function html_on(component, type, lambda) {\r\n    let {element} = component;\r\n    element.addEventListener(type, lambda);\r\n}\r\n","./public/src/html_on_click.mjs":"import {html_on} from './html_on.mjs';\r\nexport function html_on_click(component, lambda) {\r\n    html_on(component, \"click\", lambda);\r\n}\r\n","./public/src/html_p.mjs":"import {html_element} from \"./html_element.mjs\";\r\nexport function html_p(parent) {\r\n    return html_element(parent, 'p');\r\n}\r\n","./public/src/html_parse.mjs":"import {parse} from 'node-html-parser';\r\nexport function html_parse(input) {\r\n    return parse(input);\r\n}\r\n","./public/src/html_p_text.mjs":"import {html_p} from \"./html_p.mjs\";\r\nimport {html_inner_set} from \"./html_inner_set.mjs\";\r\nexport function html_p_text(parent, text) {\r\n    let p = html_p(parent);\r\n    html_inner_set(p, text);\r\n    return p;\r\n}\r\n","./public/src/html_root.mjs":"export function html_root() {\r\n    return {\r\n        element: document.documentElement\r\n    };\r\n}\r\n","./public/src/html_scroll_center.mjs":"export function html_scroll_center(component) {\r\n    let {element} = component;\r\n    element.scrollIntoView({\r\n        behavior: 'auto',\r\n        block: 'center',\r\n        inline: 'center'\r\n    });\r\n}\r\n","./public/src/html_scroll_top.mjs":"export function html_scroll_top() {\r\n    window.scrollTo({\r\n        top: 0\r\n    });\r\n}\r\n","./public/src/html_spaced_tokens.mjs":"import {html_inner_set} from \"./html_inner_set.mjs\";\r\nimport {html_element} from \"./html_element.mjs\";\r\nexport function html_spaced_tokens(parent, tokens, each) {\r\n    for (let token of tokens) {\r\n        let spacer = html_element(parent, 'span');\r\n        html_inner_set(spacer, ' ');\r\n        let token_element = html_element(parent, 'span');\r\n        html_inner_set(token_element, token);\r\n        each(token_element, token);\r\n    }\r\n}\r\n","./public/src/html_spacer_vertical.mjs":"import {html_style} from \"./html_style.mjs\";\r\nimport {html_div} from \"./html_div.mjs\";\r\nexport function html_spacer_vertical(input_container) {\r\n    let spacer_vertical = html_div(input_container);\r\n    html_style(spacer_vertical, {\r\n        'height': '1vh'\r\n    });\r\n}\r\n","./public/src/html_span.mjs":"import {html_element} from \"./html_element.mjs\";\r\nexport function html_span(parent) {\r\n    return html_element(parent, 'span');\r\n}\r\n","./public/src/html_span_text.mjs":"import {html_span} from \"./html_span.mjs\";\r\nimport {html_inner_set} from \"./html_inner_set.mjs\";\r\nexport function html_span_text(parent, text) {\r\n    let a = html_span(parent);\r\n    html_inner_set(a, text);\r\n    return a;\r\n}\r\n","./public/src/html_spellcheck_none.mjs":"export function html_spellcheck_none(ta) {\r\n    let {element} = ta;\r\n    element.spellcheck = false;\r\n}\r\n","./public/src/html_strong.mjs":"import {html_element} from \"./html_element.mjs\";\r\nexport function html_strong(parent) {\r\n    return html_element(parent, 'strong');\r\n}\r\n","./public/src/html_strong_text.mjs":"import {html_strong} from \"./html_strong.mjs\";\r\nimport {html_inner_set} from \"./html_inner_set.mjs\";\r\nexport function html_strong_text(parent, text) {\r\n    let a = html_strong(parent);\r\n    html_inner_set(a, text);\r\n    return a;\r\n}\r\n","./public/src/html_style.mjs":"import {object_merge} from \"./object_merge.mjs\";\r\nexport function html_style(component, styles) {\r\n    let {element} = component;\r\n    object_merge(element.style, styles);\r\n}\r\n","./public/src/html_style_alternate.mjs":"import {list_get} from \"./list_get.mjs\";\r\nimport {mod} from \"./mod.mjs\";\r\nimport {html_span_text} from \"./html_span_text.mjs\";\r\nimport {each_index} from \"./each_index.mjs\";\r\nimport {list_length} from \"./list_length.mjs\";\r\nexport function html_style_alternate(parent, create, patterns, strings) {\r\n    let patterns_length = list_length(patterns);\r\n    let p1 = create(parent);\r\n    each_index(strings, (element, index) => {\r\n        let span = html_span_text(p1, element);\r\n        let pattern_index = mod(index, patterns_length);\r\n        let pattern = list_get(patterns, pattern_index);\r\n        pattern(span);\r\n    });\r\n}\r\n","./public/src/html_style_alternate_bold.mjs":"import {html_style_bold} from \"./html_style_bold.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nexport function html_style_alternate_bold(parent, list) {\r\n    html_style_alternate(parent, html_p, [noop, html_style_bold], list);\r\n}\r\n","./public/src/html_style_alternate_code_li.mjs":"import {app_learn_code_style_code_colored} from \"./app_learn_code_style_code_colored.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {html_li} from \"./html_li.mjs\";\r\nexport function html_style_alternate_code_li(parent, list) {\r\n    html_style_alternate(parent, html_li, [noop, app_learn_code_style_code_colored], list);\r\n}\r\n","./public/src/html_style_alternate_monospace.mjs":"import {app_learn_code_style_code_colored} from \"./app_learn_code_style_code_colored.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nexport function html_style_alternate_monospace(parent, list) {\r\n    html_style_alternate(parent, html_p, [noop, app_learn_code_style_code_colored], list);\r\n}\r\n","./public/src/html_style_background_color.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_background_color(container, color) {\r\n    html_style(container, {\r\n        'background-color': color\r\n    });\r\n}\r\n","./public/src/html_style_bold.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_bold(component) {\r\n    return html_style(component, {\r\n        'font-weight': 'bold'\r\n    });\r\n}\r\n","./public/src/html_style_border_box.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_border_box(input) {\r\n    html_style(input, {\r\n        'box-sizing': 'border-box'\r\n    });\r\n}\r\n","./public/src/html_style_button_default.mjs":"let d = {};\r\nexport function html_style_button_default() {\r\n    return d;\r\n}\r\n","./public/src/html_style_button_default_background_color.mjs":"export function html_style_button_default_background_color() {\r\n    return 'lightblue';\r\n}\r\n","./public/src/html_style_button_default_border.mjs":"import {html_style_default_border_value} from \"./html_style_default_border_value.mjs\";\r\nimport {html_style_button_default_border_color} from \"./html_style_button_default_border_color.mjs\";\r\nexport function html_style_button_default_border() {\r\n    let color = html_style_button_default_border_color();\r\n    return html_style_default_border_value(color);\r\n}\r\n","./public/src/html_style_button_default_border_color.mjs":"export function html_style_button_default_border_color() {\r\n    return 'dodgerblue';\r\n}\r\n","./public/src/html_style_button_default_initialize.mjs":"import {html_style_margin_default_value} from \"./html_style_margin_default_value.mjs\";\r\nimport {html_style_button_default_background_color} from \"./html_style_button_default_background_color.mjs\";\r\nimport {html_style_button_default_border} from \"./html_style_button_default_border.mjs\";\r\nimport {app_learn_code_style_rounded_padded_style} from \"./app_learn_code_style_rounded_padded_style.mjs\";\r\nimport {html_style_button_default} from \"./html_style_button_default.mjs\";\r\nimport {object_merge} from \"./object_merge.mjs\";\r\nexport function html_style_button_default_initialize() {\r\n    object_merge(html_style_button_default(), app_learn_code_style_rounded_padded_style());\r\n    object_merge(html_style_button_default(), html_style_margin_default_value());\r\n    object_merge(html_style_button_default(), {\r\n        'background-color': html_style_button_default_background_color()\r\n    });\r\n    object_merge(html_style_button_default(), html_style_button_default_border());\r\n}\r\n","./public/src/html_style_centered.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_centered(button1) {\r\n    html_style(button1, {\r\n        'text-align': 'center'\r\n    });\r\n}\r\n","./public/src/html_style_default.mjs":"let d = {};\r\nexport function html_style_default() {\r\n    return d;\r\n}\r\n","./public/src/html_style_default_border_value.mjs":"import {string_combine} from \"./string_combine.mjs\";\r\nexport function html_style_default_border_value(color) {\r\n    return {\r\n        'border': string_combine('solid 0.5dvh ', color)\r\n    };\r\n}\r\n","./public/src/html_style_default_font_size.mjs":"import {string_combine} from \"./string_combine.mjs\";\r\nimport {html_style_default} from \"./html_style_default.mjs\";\r\nimport {object_merge} from \"./object_merge.mjs\";\r\nexport function html_style_default_font_size(default_font_size) {\r\n    object_merge(html_style_default(), {\r\n        'font-size': string_combine(default_font_size.toString(), 'vh')\r\n    });\r\n}\r\n","./public/src/html_style_default_font_size_value.mjs":"export function html_style_default_font_size_value() {\r\n    return 3;\r\n}\r\n","./public/src/html_style_default_initialize.mjs":"import {html_document_body} from \"./html_document_body.mjs\";\r\nimport {html_style_button_default_initialize} from \"./html_style_button_default_initialize.mjs\";\r\nimport {html_style_default_font_size_value} from \"./html_style_default_font_size_value.mjs\";\r\nimport {html_style_default_font_size} from \"./html_style_default_font_size.mjs\";\r\nimport {html_style_sans_serif} from \"./html_style_sans_serif.mjs\";\r\nexport function html_style_default_initialize() {\r\n    let root = html_document_body();\r\n    html_style_sans_serif(root);\r\n    html_style_default_font_size(html_style_default_font_size_value());\r\n    html_style_button_default_initialize();\r\n}\r\n","./public/src/html_style_display_block.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_display_block(container_bottom) {\r\n    html_style(container_bottom, {\r\n        display: 'block'\r\n    });\r\n}\r\n","./public/src/html_style_display_none.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_display_none(container_bottom) {\r\n    html_style(container_bottom, {\r\n        display: 'none'\r\n    });\r\n}\r\n","./public/src/html_style_font_color.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_font_color(component, color) {\r\n    html_style(component, {\r\n        color\r\n    });\r\n}\r\n","./public/src/html_style_height_full.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_height_full(ta) {\r\n    html_style(ta, {\r\n        'height': '100%'\r\n    });\r\n}\r\n","./public/src/html_style_hidden.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_hidden(code) {\r\n    html_style(code, {\r\n        visibility: 'hidden'\r\n    });\r\n}\r\n","./public/src/html_style_margin_default_value.mjs":"export function html_style_margin_default_value() {\r\n    return {\r\n        'margin': '0.5dvh'\r\n    };\r\n}\r\n","./public/src/html_style_margin_none.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_margin_none(component) {\r\n    html_style(component, {\r\n        'margin': '0'\r\n    });\r\n}\r\n","./public/src/html_style_margin_x.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_margin_x(component, x_margin) {\r\n    html_style(component, {\r\n        'margin-left': x_margin,\r\n        'margin-right': x_margin\r\n    });\r\n}\r\n","./public/src/html_style_margin_x_0.mjs":"import {html_style_margin_x} from \"./html_style_margin_x.mjs\";\r\nexport function html_style_margin_x_0(b) {\r\n    html_style_margin_x(b, '0');\r\n}\r\n","./public/src/html_style_margin_y.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_margin_y(component, y_margin) {\r\n    html_style(component, {\r\n        'margin-top': y_margin,\r\n        'margin-bottom': y_margin\r\n    });\r\n}\r\n","./public/src/html_style_monospace.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_monospace(component) {\r\n    html_style(component, {\r\n        'font-family': 'monospace'\r\n    });\r\n}\r\n","./public/src/html_style_pre_wrap.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_pre_wrap(code) {\r\n    html_style(code, {\r\n        'white-space': 'pre-wrap'\r\n    });\r\n}\r\n","./public/src/html_style_sans_serif.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_sans_serif(root) {\r\n    html_style(root, {\r\n        'font-family': 'sans-serif'\r\n    });\r\n}\r\n","./public/src/html_style_units.mjs":"export function html_style_units(units) {\r\n    return 0.1 * units + 'rem';\r\n}\r\n","./public/src/html_style_visible.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_visible(spacer2) {\r\n    html_style(spacer2, {\r\n        visibility: 'visible'\r\n    });\r\n}\r\n","./public/src/html_style_width_full.mjs":"import {html_style} from './html_style.mjs';\r\nexport function html_style_width_full(component) {\r\n    html_style(component, {\r\n        'width': '100%'\r\n    });\r\n}\r\n","./public/src/html_style_word_break_all.mjs":"import {html_style} from \"./html_style.mjs\";\r\nexport function html_style_word_break_all(code) {\r\n    html_style(code, {\r\n        'word-break': 'break-all'\r\n    });\r\n}\r\n","./public/src/html_ul.mjs":"import {html_element} from \"./html_element.mjs\";\r\nexport function html_ul(parent) {\r\n    return html_element(parent, 'ul');\r\n}\r\n","./public/src/html_value_get.mjs":"import {object_property_get} from \"./object_property_get.mjs\";\r\nexport function html_value_get(component) {\r\n    let {element} = component;\r\n    return object_property_get(element, 'value');\r\n}\r\n","./public/src/html_value_set.mjs":"import {object_property_set} from \"./object_property_set.mjs\";\r\nexport function html_value_set(component, value) {\r\n    let {element} = component;\r\n    object_property_set(element, 'value', value);\r\n}\r\n","./public/src/http.mjs":"import fetch from 'node-fetch';\r\nimport {sleep} from './sleep.mjs';\r\nimport {integer_random} from './integer_random.mjs';\r\nexport async function http(url) {\r\n    await sleep(integer_random(5000, 8000));\r\n    let response = await fetch(url);\r\n    let body = await response.text();\r\n    return body;\r\n}\r\n","./public/src/http_cache.mjs":"import {http} from \"./http.mjs\";\r\nimport {function_cache} from \"./function_cache.mjs\";\r\nexport async function http_cache(url) {\r\n    return await function_cache(http, [url]);\r\n}\r\n","./public/src/http_data_get.mjs":"import {equal} from \"./equal.mjs\";\r\nimport {assert} from \"./assert.mjs\";\r\nexport function http_data_get(result) {\r\n    let {status, data} = result;\r\n    assert(equal, [status, 200]);\r\n    return data;\r\n}\r\n","./public/src/http_get.mjs":"import {http_data_get} from \"./http_data_get.mjs\";\r\nexport async function http_get(url) {\r\n    let result = await axios.get(url);\r\n    return http_data_get(result);\r\n}\r\n","./public/src/http_post.mjs":"import {http_data_get} from \"./http_data_get.mjs\";\r\nexport async function http_post(url, body) {\r\n    let result = await axios.post(url, body);\r\n    return http_data_get(result);\r\n}\r\n","./public/src/identity.mjs":"export function identity(input) {\r\n    return input;\r\n}\r\n","./public/src/import_multi.mjs":"import {web_is} from \"./web_is.mjs\";\r\nexport async function import_multi(libary_to_import, variable_to_eval) {\r\n    let a;\r\n    if (web_is()) {\r\n        a = eval(variable_to_eval);\r\n    } else {\r\n        a = await import(libary_to_import);\r\n    }\r\n    return a;\r\n}\r\n","./public/src/import_node.mjs":"import {web_not_is} from \"./web_not_is.mjs\";\r\nexport async function import_node(libary_to_import) {\r\n    let a;\r\n    if (web_not_is()) {\r\n        a = await import(libary_to_import);\r\n    }\r\n    return a;\r\n}\r\n","./public/src/integer_parse.mjs":"export function integer_parse(verse_number) {\r\n    return parseInt(verse_number, 10);\r\n}\r\n","./public/src/integer_random.mjs":"export function integer_random(low, high) {\r\n    return Math.floor(Math.random() * (high - low + 1) + low);\r\n}\r\n","./public/src/integer_random_digit_single.mjs":"import {integer_random} from \"./integer_random.mjs\";\r\nexport function integer_random_digit_single() {\r\n    return integer_random(-9, 9);\r\n}\r\n","./public/src/integer_random_digit_single_positive.mjs":"import {integer_random} from \"./integer_random.mjs\";\r\nexport function integer_random_digit_single_positive() {\r\n    return integer_random(1, 9);\r\n}\r\n","./public/src/json_copy.mjs":"import {json_from} from \"./json_from.mjs\";\r\nimport {json_to} from \"./json_to.mjs\";\r\nexport function json_copy(input) {\r\n    let json = json_to(input);\r\n    return json_from(json);\r\n}\r\n","./public/src/json_from.mjs":"export function json_from(input) {\r\n    return JSON.parse(input);\r\n}\r\n","./public/src/json_to.mjs":"export function json_to(object) {\r\n    return JSON.stringify(object);\r\n}\r\n","./public/src/js_array_init_functionize.mjs":"import {js_call} from \"./js_call.mjs\";\r\nimport {each_reverse} from \"./each_reverse.mjs\";\r\nimport {js_init_index_insert} from \"./js_init_index_insert.mjs\";\r\nimport {js_variable_declarators} from \"./js_variable_declarators.mjs\";\r\nimport {list_insert} from \"./list_insert.mjs\";\r\nimport {list_get_end} from \"./list_get_end.mjs\";\r\nimport {object_property_set} from \"./object_property_set.mjs\";\r\nimport {list_add} from \"./list_add.mjs\";\r\nexport function js_array_init_functionize(ast) {\r\n    let vs = js_variable_declarators(ast, 'ArrayExpression');\r\n    for (let v of vs) {\r\n        let index_insert = js_init_index_insert(v, 1);\r\n        let {node} = v;\r\n        let {id} = node;\r\n        let {init} = node;\r\n        let {elements} = init;\r\n        each_reverse(elements, e => {\r\n            let call = js_call(list_add.name, [id, e]);\r\n            let {stack} = v;\r\n            let variable_declaration_parent = list_get_end(stack, 2);\r\n            list_insert(variable_declaration_parent, index_insert, call);\r\n        });\r\n        const init_new = js_call(object_new.name, []);\r\n        object_property_set(node, 'init', init_new);\r\n    }\r\n}\r\n","./public/src/js_arrow_to_function.mjs":"import {object_property_set} from \"./object_property_set.mjs\";\r\nimport {js_visit_node} from \"./js_visit_node.mjs\";\r\nexport function js_arrow_to_function(ast) {\r\n    js_visit_node(ast, 'ArrowFunctionExpression', v => {\r\n        let {node} = v;\r\n        object_property_set(node, 'type', 'FunctionExpression');\r\n    });\r\n}\r\n","./public/src/js_body_nested.mjs":"export function js_body_nested(declaration) {\r\n    let {body: body2} = declaration;\r\n    let {body: body3} = body2;\r\n    let body = body3;\r\n    return body;\r\n}\r\n","./public/src/js_call.mjs":"import {list_add} from \"./list_add.mjs\";\r\nimport {js_parse_first} from \"./js_parse_first.mjs\";\r\nimport {js_code_call} from \"./js_code_call.mjs\";\r\nimport {js_code_statement} from \"./js_code_statement.mjs\";\r\nexport function js_call(fn_name, args) {\r\n    let code_call = js_code_statement(js_code_call(fn_name));\r\n    let call = js_parse_first(code_call);\r\n    let {expression} = call;\r\n    let {arguments: args2} = expression;\r\n    for (let a of args) {\r\n        list_add(args2, a);\r\n    }\r\n    return call;\r\n}\r\n","./public/src/js_call_append.mjs":"import {string_empty_is} from \"./string_empty_is.mjs\";\r\nimport {js_body_nested} from \"./js_body_nested.mjs\";\r\nimport {js_variable_declaration_init} from \"./js_variable_declaration_init.mjs\";\r\nimport {js_export_single} from \"./js_export_single.mjs\";\r\nimport {file_exists} from \"./file_exists.mjs\";\r\nimport {function_name_to_path} from \"./function_name_to_path.mjs\";\r\nimport {js_code_declare_assign} from \"./js_code_declare_assign.mjs\";\r\nimport {js_call} from \"./js_call.mjs\";\r\nimport {js_parse_expression} from \"./js_parse_expression.mjs\";\r\nimport {list_add} from \"./list_add.mjs\";\r\nimport {list_map} from \"./list_map.mjs\";\r\nimport {js_imports_add_specified} from \"./js_imports_add_specified.mjs\";\r\nexport async function js_call_append(ast, a) {\r\n    let {function_name, args, result_name} = a;\r\n    let e = js_export_single(ast);\r\n    let {declaration} = e;\r\n    let body = js_body_nested(declaration);\r\n    let mapped = list_map(args, js_parse_expression);\r\n    let call = js_call(function_name, mapped);\r\n    let node;\r\n    if (string_empty_is(result_name)) {\r\n        node = {\r\n            type: 'ExpressionStatement',\r\n            expression: call\r\n        };\r\n    } else {\r\n        node = js_code_declare_assign(result_name);\r\n        js_variable_declaration_init(node, call);\r\n    }\r\n    list_add(body, node);\r\n    let path = function_name_to_path(function_name);\r\n    if (await file_exists(path)) {\r\n        js_imports_add_specified(ast, [function_name]);\r\n    }\r\n}\r\n","./public/src/js_call_variablize.mjs":"import {list_set} from \"./list_set.mjs\";\r\nimport {list_copy} from \"./list_copy.mjs\";\r\nimport {js_variablize} from \"./js_variablize.mjs\";\r\nimport {list_is} from \"./list_is.mjs\";\r\nimport {assert} from \"./assert.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {list_get_end} from \"./list_get_end.mjs\";\r\nimport {js_node_type_visitor} from \"./js_node_type_visitor.mjs\";\r\nimport {list_includes} from \"./list_includes.mjs\";\r\nimport {each_index} from \"./each_index.mjs\";\r\nexport function js_call_variablize(ast) {\r\n    let move_types = ['ArrayExpression'];\r\n    let vs = js_node_type_visitor(ast, 'CallExpression');\r\n    for (let v of vs) {\r\n        let {node} = v;\r\n        let {stack} = v;\r\n        let {arguments: args} = node;\r\n        let copy = list_copy(args);\r\n        each_index(copy, (arg, arg_i) => {\r\n            let {type} = arg;\r\n            if (list_includes(move_types, type)) {\r\n                let ancestor = list_get_end(stack, 2);\r\n                let {type: ancestor_type} = ancestor;\r\n                if (equal(ancestor_type, 'BlockStatement')) {\r\n                    let body = list_get_end(stack, 1);\r\n                    assert(list_is, [body]);\r\n                    let es = list_get_end(stack, 0);\r\n                    let {type: es_type} = es;\r\n                    assert(equal, [es_type, 'ExpressionStatement']);\r\n                    let parsed2 = js_variablize(ast, body, es, arg);\r\n                    list_set(args, arg_i, parsed2);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","./public/src/js_code_add.mjs":"export function js_code_add(a, b) {\r\n    return `${a} + ${b}`;\r\n}\r\n","./public/src/js_code_add_3.mjs":"import {js_code_add} from \"./js_code_add.mjs\";\r\nexport function js_code_add_3(a, b, c) {\r\n    return js_code_add(js_code_add(a, b), c);\r\n}\r\n","./public/src/js_code_assign.mjs":"export function js_code_assign(variable_name, value) {\r\n    return `${variable_name} = ${value}`;\r\n}\r\n","./public/src/js_code_call.mjs":"import {js_code_statement} from \"./js_code_statement.mjs\";\r\nexport function js_code_call(function_name) {\r\n    let code = js_code_statement(`${function_name}()`);\r\n    return code;\r\n}\r\n","./public/src/js_code_declare_assign.mjs":"import {js_code_statement_let} from \"./js_code_statement_let.mjs\";\r\nimport {js_code_assign} from \"./js_code_assign.mjs\";\r\nimport {js_parse_first} from \"./js_parse_first.mjs\";\r\nexport function js_code_declare_assign(variable_name) {\r\n    const value = `0`;\r\n    const declare = js_code_assign(variable_name, value);\r\n    const code = js_code_statement_let(declare);\r\n    let parsed = js_parse_first(code);\r\n    return parsed;\r\n}\r\n","./public/src/js_code_import.mjs":"import {folder_current} from \"./folder_current.mjs\";\r\nimport {js_code_import_path} from \"./js_code_import_path.mjs\";\r\nexport function js_code_import(import_name) {\r\n    const import_path = `${folder_current()}/`;\r\n    let import_code = js_code_import_path(import_path, import_name);\r\n    return import_code;\r\n}\r\n","./public/src/js_code_import_path.mjs":"import {js_code_statement} from \"./js_code_statement.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nexport function js_code_import_path(import_path, import_name) {\r\n    let import_path_combined = string_combine(import_path, import_name);\r\n    let import_code = js_code_statement(`import { ${import_name} } from \"${import_path_combined}.mjs\"`);\r\n    return import_code;\r\n}\r\n","./public/src/js_code_let.mjs":"export function js_code_let(declare) {\r\n    return `let ${declare}`;\r\n}\r\n","./public/src/js_code_return.mjs":"import {js_code_statement} from \"./js_code_statement.mjs\";\r\nexport function js_code_return(code) {\r\n    return js_code_statement(`return ${code}`);\r\n}\r\n","./public/src/js_code_statement.mjs":"export function js_code_statement(code) {\r\n    return `${code};`;\r\n}\r\n","./public/src/js_code_statement_assign.mjs":"import {js_code_assign} from \"./js_code_assign.mjs\";\r\nimport {js_code_statement} from \"./js_code_statement.mjs\";\r\nexport function js_code_statement_assign(name, value) {\r\n    return js_code_statement(js_code_assign(name, value));\r\n}\r\n","./public/src/js_code_statement_let.mjs":"import {js_code_let} from \"./js_code_let.mjs\";\r\nimport {js_code_statement} from \"./js_code_statement.mjs\";\r\nexport function js_code_statement_let(declare) {\r\n    return js_code_statement(js_code_let(declare));\r\n}\r\n","./public/src/js_code_statement_let_assign.mjs":"import {js_code_assign} from \"./js_code_assign.mjs\";\r\nimport {js_code_statement_let} from \"./js_code_statement_let.mjs\";\r\nexport function js_code_statement_let_assign(name, value) {\r\n    return js_code_statement_let(js_code_assign(name, value));\r\n}\r\n","./public/src/js_code_statement_let_assign_2.mjs":"import {list_join} from \"./list_join.mjs\";\r\nimport {js_code_assign} from \"./js_code_assign.mjs\";\r\nimport {js_code_statement_let} from \"./js_code_statement_let.mjs\";\r\nexport function js_code_statement_let_assign_2(name_a, a, name_b, b) {\r\n    return js_code_statement_let(list_join([js_code_assign(name_a, a), js_code_assign(name_b, b)], ', '));\r\n}\r\n","./public/src/js_code_statement_let_assign_multiple.mjs":"import {list_join} from \"./list_join.mjs\";\r\nimport {js_code_assign} from \"./js_code_assign.mjs\";\r\nimport {js_code_statement_let} from \"./js_code_statement_let.mjs\";\r\nimport {list_length} from \"./list_length.mjs\";\r\nimport {assert} from \"./assert.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {range} from \"./range.mjs\";\r\nimport {list_add} from \"./list_add.mjs\";\r\nimport {list_get} from \"./list_get.mjs\";\r\nimport {array_new} from \"./array_new.mjs\";\r\nexport function js_code_statement_let_assign_multiple(names, values) {\r\n    let length_n = list_length(names);\r\n    let length_v = list_length(values);\r\n    assert(equal, [length_n, length_v]);\r\n    let list = array_new();\r\n    for (let i of range(length_n)) {\r\n        let n = list_get(names, i);\r\n        let v = list_get(values, i);\r\n        list_add(list, js_code_assign(n, v));\r\n    }\r\n    return js_code_statement_let(list_join(list, ', '));\r\n}\r\n","./public/src/js_declaration_single.mjs":"import {js_export_single} from \"./js_export_single.mjs\";\r\nexport function js_declaration_single(ast) {\r\n    let e = js_export_single(ast);\r\n    let {declaration: d} = e;\r\n    let declaration = d;\r\n    return declaration;\r\n}\r\n","./public/src/js_declaration_single_name.mjs":"import {js_declaration_single} from \"./js_declaration_single.mjs\";\r\nexport function js_declaration_single_name(ast) {\r\n    let declaration = js_declaration_single(ast);\r\n    let {id} = declaration;\r\n    let name = id.name;\r\n    return name;\r\n}\r\n","./public/src/js_declaration_to_name.mjs":"export function js_declaration_to_name(declaration) {\r\n    let {id} = declaration;\r\n    let {name} = id;\r\n    return name;\r\n}\r\n","./public/src/js_empty_statements_remove.mjs":"import {list_remove} from \"./list_remove.mjs\";\r\nimport {list_is} from \"./list_is.mjs\";\r\nimport {assert} from \"./assert.mjs\";\r\nimport {js_node_type_visitor} from \"./js_node_type_visitor.mjs\";\r\nexport function js_empty_statements_remove(ast) {\r\n    let vs = js_node_type_visitor(ast, 'EmptyStatement');\r\n    for (let v of vs) {\r\n        let {parent} = v;\r\n        let {node} = v;\r\n        assert(list_is, [parent]);\r\n        list_remove(parent, node);\r\n    }\r\n}\r\n","./public/src/js_exports.mjs":"import {js_node_type} from \"./js_node_type.mjs\";\r\nexport function js_exports(ast) {\r\n    return js_node_type(ast, 'ExportNamedDeclaration');\r\n}\r\n","./public/src/js_export_single.mjs":"import {js_exports} from \"./js_exports.mjs\";\r\nimport {list_single} from \"./list_single.mjs\";\r\nexport function js_export_single(ast) {\r\n    let exports = js_exports(ast);\r\n    return list_single(exports);\r\n}\r\n","./public/src/js_function_move_outside.mjs":"import {js_node_type_visitor} from \"./js_node_type_visitor.mjs\";\r\nimport {js_outside_move} from \"./js_outside_move.mjs\";\r\nimport {object_replace} from \"./object_replace.mjs\";\r\nimport {js_parse_expression} from \"./js_parse_expression.mjs\";\r\nimport {object_copy} from \"./object_copy.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {list_add} from \"./list_add.mjs\";\r\nimport {object_property_set} from \"./object_property_set.mjs\";\r\nexport async function js_function_move_outside(ast, function_name) {\r\n    let vs = js_node_type_visitor(ast, 'FunctionExpression');\r\n    for (let v of vs) {\r\n        let {node} = v;\r\n        let {id} = node;\r\n        if (equal(id, null)) {\r\n            continue;\r\n        }\r\n        let {name} = id;\r\n        if (!equal(name, function_name)) {\r\n            continue;\r\n        }\r\n        let outside = object_copy(node);\r\n        object_property_set(outside, 'type', 'FunctionDeclaration');\r\n        let parsed = js_parse_expression(function_name);\r\n        object_replace(node, parsed);\r\n        let {body} = ast;\r\n        list_add(body, outside);\r\n    }\r\n    await js_outside_move(ast);\r\n}\r\n","./public/src/js_function_name_add.mjs":"import {object_property_set} from \"./object_property_set.mjs\";\r\nimport {js_name_unique} from \"./js_name_unique.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nimport {js_declaration_single_name} from \"./js_declaration_single_name.mjs\";\r\nimport {js_visit_node} from \"./js_visit_node.mjs\";\r\nimport {js_parse_expression} from \"./js_parse_expression.mjs\";\r\nexport function js_function_name_add(ast) {\r\n    let name = js_declaration_single_name(ast);\r\n    let prefix = string_combine(name, '_');\r\n    js_visit_node(ast, 'FunctionExpression', v => {\r\n        let {node} = v;\r\n        let u = js_name_unique(ast, prefix);\r\n        let id = js_parse_expression(u);\r\n        object_property_set(node, 'id', id);\r\n    });\r\n}\r\n","./public/src/js_identifiers.mjs":"import {js_visit_identifiers} from './js_visit_identifiers.mjs';\r\nimport {list_adder_unique} from './list_adder_unique.mjs';\r\nexport function js_identifiers(ast) {\r\n    return list_adder_unique(la => {\r\n        js_visit_identifiers(ast, v => {\r\n            let {node} = v;\r\n            la(node.name);\r\n        });\r\n    });\r\n}\r\n","./public/src/js_identifier_rename.mjs":"import {string_is} from \"./string_is.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {object_property_get} from \"./object_property_get.mjs\";\r\nimport {object_property_set} from \"./object_property_set.mjs\";\r\nimport {js_visit_identifiers} from \"./js_visit_identifiers.mjs\";\r\nimport {assert} from \"./assert.mjs\";\r\nexport function js_identifier_rename(ast, identifier_from, identifier_to) {\r\n    assert(string_is, [identifier_from]);\r\n    assert(string_is, [identifier_to]);\r\n    js_visit_identifiers(ast, v => {\r\n        let {node} = v;\r\n        let name = object_property_get(node, 'name');\r\n        if (equal(name, identifier_from)) {\r\n            object_property_set(node, 'name', identifier_to);\r\n        }\r\n    });\r\n}\r\n","./public/src/js_identifier_to_expression.mjs":"import {js_parse_expression} from \"./js_parse_expression.mjs\";\r\nimport {string_delimit} from \"./string_delimit.mjs\";\r\nexport function js_identifier_to_expression(key) {\r\n    let {name: key_name} = key;\r\n    let code_key_string = string_delimit(key_name);\r\n    let key_string = js_parse_expression(code_key_string);\r\n    return key_string;\r\n}\r\n","./public/src/js_imports_add.mjs":"import {js_imports_add_specified} from \"./js_imports_add_specified.mjs\";\r\nimport {function_names} from \"./function_names.mjs\";\r\nexport async function js_imports_add(ast) {\r\n    let names = await function_names();\r\n    js_imports_add_specified(ast, names);\r\n}\r\n","./public/src/js_imports_add_specified.mjs":"import {list_add_beginning} from \"./list_add_beginning.mjs\";\r\nimport {js_parse_first} from \"./js_parse_first.mjs\";\r\nimport {js_code_import} from \"./js_code_import.mjs\";\r\nimport {list_difference} from \"./list_difference.mjs\";\r\nimport {list_intersect} from \"./list_intersect.mjs\";\r\nimport {js_identifiers} from \"./js_identifiers.mjs\";\r\nimport {js_imports_existing} from \"./js_imports_existing.mjs\";\r\nimport {js_declaration_single_name} from \"./js_declaration_single_name.mjs\";\r\nexport function js_imports_add_specified(ast, specified) {\r\n    let name = js_declaration_single_name(ast);\r\n    let self = [name];\r\n    let existing = js_imports_existing(ast);\r\n    let identifiers = js_identifiers(ast);\r\n    let identifier_fns = list_intersect(identifiers, specified);\r\n    let missing = list_difference(identifier_fns, existing);\r\n    let missing_without_self = list_difference(missing, self);\r\n    let {body} = ast;\r\n    for (let m of missing_without_self) {\r\n        let code = js_code_import(m);\r\n        let first = js_parse_first(code);\r\n        list_add_beginning(body, first);\r\n    }\r\n}\r\n","./public/src/js_imports_existing.mjs":"import {list_adder} from \"./list_adder.mjs\";\r\nimport {js_visit_node} from \"./js_visit_node.mjs\";\r\nexport function js_imports_existing(ast) {\r\n    let existing = list_adder(la => {\r\n        js_visit_node(ast, 'ImportSpecifier', v => {\r\n            let {node} = v;\r\n            let {imported} = node;\r\n            if (imported.type === 'Identifier') {\r\n                la(imported.name);\r\n            }\r\n        });\r\n    });\r\n    return existing;\r\n}\r\n","./public/src/js_imports_existing_named.mjs":"import {list_adder} from \"./list_adder.mjs\";\r\nimport {js_visit_node} from \"./js_visit_node.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function js_imports_existing_named(ast, name) {\r\n    let existing = list_adder(la => {\r\n        js_visit_node(ast, 'ImportSpecifier', v => {\r\n            let {node} = v;\r\n            let {imported} = node;\r\n            if (imported.type === 'Identifier') {\r\n                if (equal(imported.name, name)) la(v);\r\n            }\r\n        });\r\n    });\r\n    return existing;\r\n}\r\n","./public/src/js_imports_fix.mjs":"import {js_imports_remove} from \"./js_imports_remove.mjs\";\r\nimport {js_imports_add} from \"./js_imports_add.mjs\";\r\nexport async function js_imports_fix(ast) {\r\n    await js_imports_add(ast);\r\n    js_imports_remove(ast);\r\n}\r\n","./public/src/js_imports_remove.mjs":"import {list_get_end} from \"./list_get_end.mjs\";\r\nimport {list_single} from \"./list_single.mjs\";\r\nimport {js_imports_existing_named} from \"./js_imports_existing_named.mjs\";\r\nimport {list_difference} from \"./list_difference.mjs\";\r\nimport {js_identifiers} from \"./js_identifiers.mjs\";\r\nimport {js_export_single} from \"./js_export_single.mjs\";\r\nimport {js_imports_existing} from \"./js_imports_existing.mjs\";\r\nimport {list_remove} from \"./list_remove.mjs\";\r\nexport function js_imports_remove(ast) {\r\n    let existing = js_imports_existing(ast);\r\n    let export_ = js_export_single(ast);\r\n    let used = js_identifiers(export_);\r\n    let extra = list_difference(existing, used);\r\n    let {body} = ast;\r\n    for (let e of extra) {\r\n        let existing2 = js_imports_existing_named(ast, e);\r\n        let e2 = list_single(existing2);\r\n        let {stack} = e2;\r\n        let ancestor = list_get_end(stack, 1);\r\n        list_remove(body, ancestor);\r\n    }\r\n}\r\n","./public/src/js_init_index_insert.mjs":"import {add_1} from \"./add_1.mjs\";\r\nimport {list_index} from \"./list_index.mjs\";\r\nimport {list_is} from \"./list_is.mjs\";\r\nimport {assert} from \"./assert.mjs\";\r\nimport {list_get_end} from \"./list_get_end.mjs\";\r\nexport function js_init_index_insert(v, offset) {\r\n    let {stack} = v;\r\n    let variable_declaration = list_get_end(stack, offset);\r\n    let variable_declaration_parent = list_get_end(stack, add_1(offset));\r\n    assert(list_is, [variable_declaration_parent]);\r\n    let index = list_index(variable_declaration_parent, variable_declaration);\r\n    let index_insert = add_1(index);\r\n    return index_insert;\r\n}\r\n","./public/src/js_name_unique.mjs":"import {list_includes} from \"./list_includes.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nimport {js_identifiers} from \"./js_identifiers.mjs\";\r\nexport function js_name_unique(ast, prefix) {\r\n    let identifiers = js_identifiers(ast);\r\n    let i = 1;\r\n    let variable_name;\r\n    while (true) {\r\n        variable_name = string_combine(prefix, i);\r\n        if (!list_includes(identifiers, variable_name)) {\r\n            break;\r\n        }\r\n        i++;\r\n    }\r\n    return variable_name;\r\n}\r\n","./public/src/js_name_unique_v.mjs":"import {js_name_unique} from \"./js_name_unique.mjs\";\r\nexport function js_name_unique_v(ast) {\r\n    const prefix = 'v';\r\n    let variable_name = js_name_unique(ast, prefix);\r\n    return variable_name;\r\n}\r\n","./public/src/js_name_unique_v_parsed.mjs":"import {js_code_declare_assign} from \"./js_code_declare_assign.mjs\";\r\nimport {js_name_unique_v} from \"./js_name_unique_v.mjs\";\r\nexport function js_name_unique_v_parsed(ast) {\r\n    let variable_name = js_name_unique_v(ast);\r\n    let parsed = js_code_declare_assign(variable_name);\r\n    return {\r\n        parsed,\r\n        variable_name\r\n    };\r\n}\r\n","./public/src/js_node_is.mjs":"import {object_property_exists} from './object_property_exists.mjs';\r\nimport {null_is} from './null_is.mjs';\r\nexport function js_node_is(candidate) {\r\n    if (null_is(candidate)) {\r\n        return false;\r\n    }\r\n    return object_property_exists(candidate, 'type');\r\n}\r\n","./public/src/js_node_type.mjs":"import {list_adder_unique} from './list_adder_unique.mjs';\r\nimport {js_visit} from './js_visit.mjs';\r\nexport function js_node_type(ast, type) {\r\n    return list_adder_unique(la => {\r\n        js_visit(ast, lambda);\r\n        function lambda(v) {\r\n            let {node} = v;\r\n            if (node.type === type) {\r\n                la(node);\r\n            }\r\n        }\r\n    });\r\n}\r\n","./public/src/js_node_types.mjs":"import {undefined_not_is} from \"./undefined_not_is.mjs\";\r\nimport {list_adder_unique} from './list_adder_unique.mjs';\r\nimport {js_visit} from './js_visit.mjs';\r\nexport function js_node_types(ast) {\r\n    return list_adder_unique(la => {\r\n        js_visit(ast, lambda);\r\n        function lambda(v) {\r\n            let {node} = v;\r\n            let {type} = node;\r\n            if (undefined_not_is(type)) {\r\n                la(type);\r\n            }\r\n        }\r\n    });\r\n}\r\n","./public/src/js_node_type_visitor.mjs":"import {list_adder_unique} from './list_adder_unique.mjs';\r\nimport {js_visit} from './js_visit.mjs';\r\nexport function js_node_type_visitor(ast, type) {\r\n    return list_adder_unique(la => {\r\n        js_visit(ast, lambda);\r\n        function lambda(v) {\r\n            let {node} = v;\r\n            if (node.type === type) {\r\n                la(v);\r\n            }\r\n        }\r\n    });\r\n}\r\n","./public/src/js_object_init_functionize.mjs":"import {js_identifier_to_expression} from \"./js_identifier_to_expression.mjs\";\r\nimport {js_call} from \"./js_call.mjs\";\r\nimport {each_reverse} from \"./each_reverse.mjs\";\r\nimport {js_init_index_insert} from \"./js_init_index_insert.mjs\";\r\nimport {js_variable_declarators} from \"./js_variable_declarators.mjs\";\r\nimport {list_insert} from \"./list_insert.mjs\";\r\nimport {list_is} from \"./list_is.mjs\";\r\nimport {assert} from \"./assert.mjs\";\r\nimport {list_get_end} from \"./list_get_end.mjs\";\r\nimport {object_property_set} from \"./object_property_set.mjs\";\r\nimport {object_new} from \"./object_new.mjs\";\r\nexport function js_object_init_functionize(ast) {\r\n    let vs = js_variable_declarators(ast, 'ObjectExpression');\r\n    for (let v of vs) {\r\n        let index_insert = js_init_index_insert(v, 1);\r\n        let {node} = v;\r\n        let {id} = node;\r\n        let {init} = node;\r\n        let {properties} = init;\r\n        each_reverse(properties, p => {\r\n            let {key, value} = p;\r\n            let key_string = js_identifier_to_expression(key);\r\n            let call = js_call(object_property_set.name, [id, key_string, value]);\r\n            let {stack} = v;\r\n            let variable_declaration_parent = list_get_end(stack, 2);\r\n            assert(list_is, [variable_declaration_parent]);\r\n            list_insert(variable_declaration_parent, index_insert, call);\r\n        });\r\n        const init_new = js_call(object_new.name, []);\r\n        object_property_set(node, 'init', init_new);\r\n    }\r\n}\r\n","./public/src/js_object_pattern_functionize.mjs":"import {js_imports_add_specified} from \"./js_imports_add_specified.mjs\";\r\nimport {list_remove} from \"./list_remove.mjs\";\r\nimport {js_variable_declaration_init} from \"./js_variable_declaration_init.mjs\";\r\nimport {js_code_declare_assign} from \"./js_code_declare_assign.mjs\";\r\nimport {js_name_unique_v_parsed} from \"./js_name_unique_v_parsed.mjs\";\r\nimport {js_identifier_to_expression} from \"./js_identifier_to_expression.mjs\";\r\nimport {js_node_type_visitor} from \"./js_node_type_visitor.mjs\";\r\nimport {list_insert} from \"./list_insert.mjs\";\r\nimport {list_get_end} from \"./list_get_end.mjs\";\r\nimport {js_call} from \"./js_call.mjs\";\r\nimport {js_parse_expression} from \"./js_parse_expression.mjs\";\r\nimport {each_reverse} from \"./each_reverse.mjs\";\r\nimport {js_init_index_insert} from \"./js_init_index_insert.mjs\";\r\nimport {object_property_get} from \"./object_property_get.mjs\";\r\nexport function js_object_pattern_functionize(ast) {\r\n    let vs = js_node_type_visitor(ast, 'ObjectPattern');\r\n    for (let v of vs) {\r\n        let {stack} = v;\r\n        let grandparent = list_get_end(stack, 1);\r\n        let variable_declaration = list_get_end(stack, 2);\r\n        let variable_declaration_parent = list_get_end(stack, 3);\r\n        let {parent} = v;\r\n        let {node} = v;\r\n        let {properties} = node;\r\n        let index_insert = js_init_index_insert(v, 2);\r\n        let {parsed, variable_name} = js_name_unique_v_parsed(ast);\r\n        each_reverse(properties, p => {\r\n            let {key, value} = p;\r\n            let {name: value_name} = value;\r\n            let parsed = js_code_declare_assign(value_name);\r\n            let key_string = js_identifier_to_expression(key);\r\n            let variable_name_identifier = js_parse_expression(variable_name);\r\n            let call = js_call(object_property_get.name, [variable_name_identifier, key_string]);\r\n            js_variable_declaration_init(parsed, call);\r\n            list_insert(variable_declaration_parent, index_insert, parsed);\r\n        });\r\n        let {init} = parent;\r\n        js_variable_declaration_init(parsed, init);\r\n        list_insert(variable_declaration_parent, index_insert, parsed);\r\n        list_remove(variable_declaration_parent, variable_declaration);\r\n    }\r\n    js_imports_add_specified(ast, [object_property_get.name]);\r\n}\r\n","./public/src/js_outside_move.mjs":"import {js_imports_remove} from \"./js_imports_remove.mjs\";\r\nimport {function_imports_add} from \"./function_imports_add.mjs\";\r\nimport {js_body_nested} from \"./js_body_nested.mjs\";\r\nimport {js_imports_add} from \"./js_imports_add.mjs\";\r\nimport {list_join_comma} from \"./list_join_comma.mjs\";\r\nimport {list_remove} from \"./list_remove.mjs\";\r\nimport {js_parse} from \"./js_parse.mjs\";\r\nimport {js_unparse} from \"./js_unparse.mjs\";\r\nimport {function_new_generic} from \"./function_new_generic.mjs\";\r\nimport {js_declaration_to_name} from \"./js_declaration_to_name.mjs\";\r\nimport {list_filter} from \"./list_filter.mjs\";\r\nimport {list_copy} from \"./list_copy.mjs\";\r\nimport {list_map} from \"./list_map.mjs\";\r\nimport {js_imports_add_specified} from \"./js_imports_add_specified.mjs\";\r\nexport async function js_outside_move(ast) {\r\n    const type = 'FunctionDeclaration';\r\n    let {body: body_ast} = ast;\r\n    let declarations = list_filter(body_ast, b => b.type === type);\r\n    let copy = list_copy(declarations);\r\n    for (let declaration of copy) {\r\n        let function_name = js_declaration_to_name(declaration);\r\n        let {params} = declaration;\r\n        let {async} = declaration;\r\n        let args = list_map(params, p => p.name);\r\n        let args_string = list_join_comma(args);\r\n        let body = js_body_nested(declaration);\r\n        let parsed = js_parse(``);\r\n        parsed.body = body;\r\n        let unparsed = js_unparse(parsed);\r\n        await function_new_generic(function_name, args_string, unparsed, false, [], async);\r\n    }\r\n    for (let declaration of copy) {\r\n        let function_name = js_declaration_to_name(declaration);\r\n        await function_imports_add(function_name);\r\n        list_remove(body_ast, declaration);\r\n    }\r\n    let names = list_map(copy, js_declaration_to_name);\r\n    js_imports_add_specified(ast, names);\r\n    js_imports_remove(ast);\r\n}\r\n","./public/src/js_param_new.mjs":"import {js_declaration_single_name} from \"./js_declaration_single_name.mjs\";\r\nimport {js_declaration_single} from \"./js_declaration_single.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {js_node_type} from \"./js_node_type.mjs\";\r\nimport {js_parse_expression} from \"./js_parse_expression.mjs\";\r\nimport {list_add} from \"./list_add.mjs\";\r\nexport function js_param_new(ast, function_name, param_name, default_value_string) {\r\n    let nodes = js_node_type(ast, 'CallExpression');\r\n    for (let node of nodes) {\r\n        let {callee} = node;\r\n        let {type} = callee;\r\n        if (!equal(type, 'Identifier')) {\r\n            continue;\r\n        }\r\n        let {name} = callee;\r\n        if (!equal(name, function_name)) {\r\n            continue;\r\n        }\r\n        let {arguments: args} = node;\r\n        let default_value = js_parse_expression(default_value_string);\r\n        list_add(args, default_value);\r\n    }\r\n    let name = js_declaration_single_name(ast);\r\n    if (!equal(name, function_name)) {\r\n        return;\r\n    }\r\n    let declaration = js_declaration_single(ast);\r\n    let {params} = declaration;\r\n    let param_new = js_parse_expression(param_name);\r\n    list_add(params, param_new);\r\n}\r\n","./public/src/js_parse.mjs":"import {import_multi} from \"./import_multi.mjs\";\r\nimport {js_parse_options} from \"./js_parse_options.mjs\";\r\nlet a = await import_multi('acorn', 'acorn');\r\nexport function js_parse(code) {\r\n    return a.parse(code, js_parse_options());\r\n}\r\n","./public/src/js_parse_expression.mjs":"import {js_parse_first} from \"./js_parse_first.mjs\";\r\nimport {js_code_statement} from \"./js_code_statement.mjs\";\r\nexport function js_parse_expression(variable_name) {\r\n    const identifier_code = js_code_statement(`(${variable_name})`);\r\n    let parsed2 = js_parse_first(identifier_code);\r\n    let {expression} = parsed2;\r\n    return expression;\r\n}\r\n","./public/src/js_parse_first.mjs":"import {js_parse} from \"./js_parse.mjs\";\r\nimport {list_first} from \"./list_first.mjs\";\r\nexport function js_parse_first(code) {\r\n    let parsed = js_parse(code);\r\n    let {body} = parsed;\r\n    let first = list_first(body);\r\n    return first;\r\n}\r\n","./public/src/js_parse_options.mjs":"export function js_parse_options() {\r\n    return {\r\n        ecmaVersion: 2022,\r\n        sourceType: 'module'\r\n    };\r\n}\r\n","./public/src/js_return_variablize.mjs":"import {js_variablize} from \"./js_variablize.mjs\";\r\nimport {js_node_type_visitor} from \"./js_node_type_visitor.mjs\";\r\nexport function js_return_variablize(ast) {\r\n    let return_statements = js_node_type_visitor(ast, 'ReturnStatement');\r\n    for (let r of return_statements) {\r\n        let {node} = r;\r\n        if (node.argument.type === 'Identifier') {\r\n            continue;\r\n        }\r\n        let {parent} = r;\r\n        const init = node.argument;\r\n        let parsed2 = js_variablize(ast, parent, node, init);\r\n        node.argument = parsed2;\r\n    }\r\n}\r\n","./public/src/js_tokenize.mjs":"import {js_parse_options} from \"./js_parse_options.mjs\";\r\nexport function js_tokenize(code) {\r\n    return acorn.tokenizer(code, js_parse_options());\r\n}\r\n","./public/src/js_unparse.mjs":"import {js_unparse_indent} from \"./js_unparse_indent.mjs\";\r\nexport function js_unparse(ast) {\r\n    return js_unparse_indent(ast, '    ');\r\n}\r\n","./public/src/js_unparse_indent.mjs":"import {import_multi} from \"./import_multi.mjs\";\r\nlet a = await import_multi('astring', 'astring');\r\nlet {generate} = a;\r\nexport function js_unparse_indent(ast, indent) {\r\n    return generate(ast, {\r\n        indent: indent\r\n    });\r\n}\r\n","./public/src/js_unparse_indent_none.mjs":"import {js_unparse_indent} from \"./js_unparse_indent.mjs\";\r\nexport function js_unparse_indent_none(ast) {\r\n    return js_unparse_indent(ast, '');\r\n}\r\n","./public/src/js_variable_declaration_init.mjs":"import {object_property_set} from \"./object_property_set.mjs\";\r\nimport {list_first} from \"./list_first.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {list_length} from \"./list_length.mjs\";\r\nimport {list_is} from \"./list_is.mjs\";\r\nimport {assert} from \"./assert.mjs\";\r\nexport function js_variable_declaration_init(parsed, init) {\r\n    let {declarations} = parsed;\r\n    assert(list_is, [declarations]);\r\n    let length = list_length(declarations);\r\n    assert(equal, [length, 1]);\r\n    let declaration = list_first(declarations);\r\n    object_property_set(declaration, 'init', init);\r\n}\r\n","./public/src/js_variable_declarators.mjs":"import {js_visit_node} from \"./js_visit_node.mjs\";\r\nimport {list_adder_unique} from \"./list_adder_unique.mjs\";\r\nexport function js_variable_declarators(ast, type) {\r\n    return list_adder_unique(la => {\r\n        js_visit_node(ast, 'VariableDeclarator', v => {\r\n            let {node} = v;\r\n            let {init} = node;\r\n            if (init.type === type) {\r\n                la(v);\r\n            }\r\n        });\r\n    });\r\n}\r\n","./public/src/js_variablize.mjs":"import {js_name_unique_v_parsed} from \"./js_name_unique_v_parsed.mjs\";\r\nimport {js_parse_expression} from \"./js_parse_expression.mjs\";\r\nimport {list_first} from \"./list_first.mjs\";\r\nimport {list_index} from \"./list_index.mjs\";\r\nimport {list_is} from \"./list_is.mjs\";\r\nimport {assert} from \"./assert.mjs\";\r\nexport function js_variablize(ast, parent, node, init) {\r\n    assert(list_is, [parent]);\r\n    let index = list_index(parent, node);\r\n    let {parsed, variable_name} = js_name_unique_v_parsed(ast);\r\n    parent.splice(index, 0, parsed);\r\n    let {declarations} = parsed;\r\n    let first = list_first(declarations);\r\n    first.init = init;\r\n    let parsed2 = js_parse_expression(variable_name);\r\n    return parsed2;\r\n}\r\n","./public/src/js_visit.mjs":"import {visit} from \"./visit.mjs\";\r\nimport {object_values} from \"./object_values.mjs\";\r\nimport {js_node_is} from \"./js_node_is.mjs\";\r\nimport {list_is} from \"./list_is.mjs\";\r\nimport {null_is} from \"./null_is.mjs\";\r\nimport {undefined_is} from \"./undefined_is.mjs\";\r\nexport function js_visit(ast, lambda) {\r\n    visit(ast, n => {\r\n        if (js_node_is(n)) {\r\n            return object_values(n);\r\n        }\r\n        if (list_is(n)) {\r\n            return n;\r\n        }\r\n        return [];\r\n    }, n => !null_is(n) && !undefined_is(n), lambda, []);\r\n}\r\n","./public/src/js_visit_identifiers.mjs":"import {js_visit_node} from \"./js_visit_node.mjs\";\r\nexport function js_visit_identifiers(ast, lambda) {\r\n    js_visit_node(ast, 'Identifier', lambda);\r\n}\r\n","./public/src/js_visit_node.mjs":"import {js_visit} from \"./js_visit.mjs\";\r\nexport function js_visit_node(ast, type, lambda) {\r\n    js_visit(ast, lambda_outer);\r\n    function lambda_outer(v) {\r\n        let {node} = v;\r\n        if (node.type !== type) {\r\n            return;\r\n        }\r\n        lambda(v);\r\n    }\r\n}\r\n","./public/src/keyboard_keys.mjs":"import {keyboard_keys_rows} from \"./keyboard_keys_rows.mjs\";\r\nimport {list_concat_multiple} from \"./list_concat_multiple.mjs\";\r\nexport function keyboard_keys() {\r\n    let ks = keyboard_keys_rows();\r\n    let concat = list_concat_multiple(ks);\r\n    return concat;\r\n}\r\n","./public/src/keyboard_keys_rows.mjs":"export function keyboard_keys_rows() {\r\n    return ['qwertyuiop', 'asdfghjkl', 'zxcvbnm'];\r\n}\r\n","./public/src/lesson_add.mjs":"import {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {lesson_add_quiz} from \"./lesson_add_quiz.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nexport function lesson_add() {\r\n    let example_message = 'adding two numbers together';\r\n    let description = 'addition ( + )';\r\n    return lesson_simple(lesson_add_quiz, example_before, description, example_message, []);\r\n    function example_before(parent) {\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['two numbers can be added together using the plus ( ', '+', ' ) sign']);\r\n    }\r\n}\r\n","./public/src/lesson_add_numbers_three.mjs":"import {call_multiple} from \"./call_multiple.mjs\";\r\nimport {app_learn_code_log_add_3} from \"./app_learn_code_log_add_3.mjs\";\r\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nexport function lesson_add_numbers_three() {\r\n    let example_message = 'adding three numbers';\r\n    let description = example_message;\r\n    return lesson_simple(function () {\r\n        let [a, b, c] = call_multiple(integer_random_digit_single_positive, 3);\r\n        return app_learn_code_log_add_3(a, b, c);\r\n    }, example_before, description, example_message, []);\r\n    function example_before(parent) {\r\n        html_p_text(parent, 'more than two numbers can be added together at once');\r\n    }\r\n}\r\n","./public/src/lesson_add_quiz.mjs":"import {app_learn_code_log_add} from \"./app_learn_code_log_add.mjs\";\r\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\r\nexport function lesson_add_quiz() {\r\n    let a = integer_random_digit_single_positive();\r\n    let b = integer_random_digit_single_positive();\r\n    return app_learn_code_log_add(a, b);\r\n}\r\n","./public/src/lesson_boolean.mjs":"import {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {list_add} from \"./list_add.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nimport {random_50_50} from \"./random_50_50.mjs\";\r\nimport {list_map} from \"./list_map.mjs\";\r\nimport {list_join} from \"./list_join.mjs\";\r\nexport function lesson_boolean() {\r\n    const example_message = 'boolean ( true , false )';\r\n    const description = 'outputting true or false';\r\n    return lesson_simple(source_get, example_before, description, example_message, []);\r\n    function example_before(parent) {\r\n        html_p_text(parent, 'some questions can be answered using a \"yes\" or a \"no\"');\r\n        html_p_text(parent, 'for example if someone asked \"is the number two bigger than the number one ?\" then the answer is \"yes\"');\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript the code for \"yes\" is ', 'true']);\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript the code for \"no\" is ', 'false']);\r\n    }\r\n    function source_get() {\r\n        let answers = [true, false];\r\n        list_add(answers, random_50_50());\r\n        list_scramble(answers);\r\n        let mapped = list_map(answers, a => `console.log(${a});`);\r\n        return list_join(mapped, '\\n');\r\n    }\r\n}\r\n","./public/src/lesson_comparisons_source_get_get.mjs":"import {integer_random} from \"./integer_random.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\r\nexport function lesson_comparisons_source_get_get(sign) {\r\n    return function source_get() {\r\n        let a = integer_random_digit_single_positive();\r\n        let b;\r\n        if (equal(integer_random(1, 3), 1)) {\r\n            b = a;\r\n        } else {\r\n            b = integer_random_digit_single_positive();\r\n        }\r\n        return `console.log(${a} ${sign} ${b});`;\r\n    };\r\n}\r\n","./public/src/lesson_console_log.mjs":"import {lesson_console_log_hierarchies} from \"./lesson_console_log_hierarchies.mjs\";\r\nimport {app_learn_code_unscramble} from \"./app_learn_code_unscramble.mjs\";\r\nimport {app_learn_code_quiz} from \"./app_learn_code_quiz.mjs\";\r\nimport {lesson_console_log_quiz} from \"./lesson_console_log_quiz.mjs\";\r\nimport {lesson_console_log_javascript} from \"./lesson_console_log_javascript.mjs\";\r\nimport {lesson_console_log_process_named} from \"./lesson_console_log_process_named.mjs\";\r\nimport {lesson_console_log_process_computer_program} from \"./lesson_console_log_process_computer_program.mjs\";\r\nimport {list_add} from \"./list_add.mjs\";\r\nimport {array_new} from \"./array_new.mjs\";\r\nimport {object_new} from \"./object_new.mjs\";\r\nimport {object_property_set} from \"./object_property_set.mjs\";\r\nimport {lesson_console_log_analogy_paper} from \"./lesson_console_log_analogy_paper.mjs\";\r\nimport {lesson_console_log_analogy_addition} from \"./lesson_console_log_analogy_addition.mjs\";\r\nimport {lesson_console_log_program_first} from \"./lesson_console_log_program_first.mjs\";\r\nimport {lesson_console_log_strings} from \"./lesson_console_log_strings.mjs\";\r\nimport {lesson_console_log_analogy_addition_symbol} from \"./lesson_console_log_analogy_addition_symbol.mjs\";\r\nexport function lesson_console_log() {\r\n    let v1 = object_new();\r\n    object_property_set(v1, 'description', 'outputting a string to the console');\r\n    let v2 = array_new();\r\n    list_add(v2, lesson_console_log_analogy_paper);\r\n    list_add(v2, lesson_console_log_analogy_addition);\r\n    list_add(v2, lesson_console_log_analogy_addition_symbol);\r\n    list_add(v2, lesson_console_log_process_named);\r\n    list_add(v2, lesson_console_log_hierarchies);\r\n    list_add(v2, lesson_console_log_javascript);\r\n    list_add(v2, lesson_console_log_strings);\r\n    list_add(v2, lesson_console_log_process_computer_program);\r\n    list_add(v2, lesson_console_log_program_first);\r\n    list_add(v2, app_learn_code_quiz(lesson_console_log_quiz));\r\n    list_add(v2, app_learn_code_unscramble(lesson_console_log_quiz));\r\n    object_property_set(v1, 'screens', v2);\r\n    return v1;\r\n}\r\n","./public/src/lesson_console_log_analogy_addition.mjs":"import {html_li_text} from \"./html_li_text.mjs\";\r\nimport {html_ul} from \"./html_ul.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nexport function lesson_console_log_analogy_addition(parent) {\r\n    html_p_text(parent, 'suppose two numbers are added together to get their sum');\r\n    html_p_text(parent, 'we could say :');\r\n    let ol1 = html_ul(parent);\r\n    html_li_text(ol1, 'the adding of the two numbers together is a process');\r\n    html_li_text(ol1, 'the two numbers are the inputs to the addition process');\r\n    html_li_text(ol1, 'the sum of the two numbers is the output of the addition process');\r\n}\r\n","./public/src/lesson_console_log_analogy_addition_symbol.mjs":"import {html_li_text} from \"./html_li_text.mjs\";\r\nimport {html_ul} from \"./html_ul.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nexport function lesson_console_log_analogy_addition_symbol(parent) {\r\n    html_p_text(parent, 'suppose the letters \"a\", \"b\" and \"c\" represent numbers');\r\n    html_p_text(parent, 'suppose \"c\" is the sum of \"a\" and \"b\"');\r\n    html_p_text(parent, 'then here is the equation : a + b = c');\r\n    html_p_text(parent, 'we could say :');\r\n    let ol2 = html_ul(parent);\r\n    html_li_text(ol2, 'the addition sign ( \"+\" ) is a process');\r\n    html_li_text(ol2, '\"a\" and \"b\" are the inputs to the \"+\" process');\r\n    html_li_text(ol2, '\"c\" is the output of the \"+\" process');\r\n}\r\n","./public/src/lesson_console_log_analogy_paper.mjs":"import {html_img_limited_centered} from \"./html_img_limited_centered.mjs\";\r\nimport {html_hr} from \"./html_hr.mjs\";\r\nimport {html_strong_text} from \"./html_strong_text.mjs\";\r\nimport {html_li} from \"./html_li.mjs\";\r\nimport {html_ul} from \"./html_ul.mjs\";\r\nimport {html_span_text} from \"./html_span_text.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nexport function lesson_console_log_analogy_paper(parent) {\r\n    html_p_text(parent, 'suppose there is paper');\r\n    html_img_limited_centered(parent, 'paper.jpg');\r\n    html_p_text(parent, 'and suppose someone folds the paper into origami');\r\n    html_img_limited_centered(parent, 'paper_folding.jpg');\r\n    html_p_text(parent, 'then afterward there is folded paper origami');\r\n    html_img_limited_centered(parent, 'paper_folded.jpg');\r\n    html_hr(parent);\r\n    html_p_text(parent, 'we could say :');\r\n    let ol = html_ul(parent);\r\n    let li1 = html_li(ol);\r\n    html_span_text(li1, 'the folding of the paper into origami is a ');\r\n    html_strong_text(li1, 'process');\r\n    let li2 = html_li(ol);\r\n    html_span_text(li2, 'the unfolded paper is the ');\r\n    html_strong_text(li2, 'input');\r\n    html_span_text(li2, ' to the folding process');\r\n    let li3 = html_li(ol);\r\n    html_span_text(li3, 'the folded paper is the ');\r\n    html_strong_text(li3, 'output');\r\n    html_span_text(li3, ' of the folding process');\r\n}\r\n","./public/src/lesson_console_log_hierarchies.mjs":"import {html_style_bold} from \"./html_style_bold.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nexport async function lesson_console_log_hierarchies(parent) {\r\n    html_p_text(parent, 'in english , there are letters');\r\n    html_p_text(parent, 'words have letters');\r\n    html_p_text(parent, 'phrases have words');\r\n    html_p_text(parent, 'sentences have phrases');\r\n    html_p_text(parent, 'paragraphs have sentences');\r\n    html_p_text(parent, 'and so on');\r\n    html_style_alternate(parent, html_p, [noop, html_style_bold], ['this is a ', 'hierarchy']);\r\n    html_style_alternate(parent, html_p, [noop, html_style_bold], ['a hierarchy can also be called a ', 'tree']);\r\n    html_p_text(parent, 'trees are very important in computer programming');\r\n}\r\n","./public/src/lesson_console_log_javascript.mjs":"import {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_bold} from \"./html_style_bold.mjs\";\r\nexport function lesson_console_log_javascript(parent) {\r\n    html_style_alternate(parent, html_p, [noop, html_style_bold], ['we will be learning a computer programming language called ', 'javascript']);\r\n    html_style_alternate(parent, html_p, [noop, html_style_bold], ['in english , a sentence is analogous to a ', 'statement', ' in javascript']);\r\n    html_style_alternate(parent, html_p, [noop, html_style_monospace], ['at the end of a statement there should be a semicolon ( ', ';', ' )']);\r\n    html_style_alternate(parent, html_p, [noop, html_style_bold], ['in computer programming different symbols can be used as a ', 'separator', ' so that the computer can tell two things apart']);\r\n    html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript a semicolon ( ', ';', ' ) is a separator that separates statements from other statements']);\r\n}\r\n","./public/src/lesson_console_log_process_computer_program.mjs":"import {html_p_text} from \"./html_p_text.mjs\";\r\nexport function lesson_console_log_process_computer_program(parent) {\r\n    html_p_text(parent, 'a computer program may have inputs');\r\n    html_p_text(parent, 'a computer program may have outputs');\r\n    html_p_text(parent, 'a computer program does something&nbsp;, using any inputs and producing any outputs');\r\n    html_p_text(parent, 'we could say a computer program is a process that may have inputs and may have outputs');\r\n}\r\n","./public/src/lesson_console_log_process_named.mjs":"import {html_li_text} from \"./html_li_text.mjs\";\r\nimport {html_ul} from \"./html_ul.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {html_hr} from \"./html_hr.mjs\";\r\nexport function lesson_console_log_process_named(parent) {\r\n    html_p_text(parent, 'besides addition&nbsp;, there are other symbols / processes&nbsp;as well');\r\n    html_p_text(parent, 'for example , there is&nbsp;:');\r\n    let ol3 = html_ul(parent);\r\n    html_li_text(ol3, 'subtraction&nbsp;: 3 − 2 = 1');\r\n    html_li_text(ol3, 'multiplication&nbsp;: 3 × 2 = 6');\r\n    html_li_text(ol3, 'division&nbsp;: 6 ÷ 3 = 2');\r\n    html_hr(parent);\r\n    html_p_text(parent, 'instead of symbols ( + , − , × , ÷ ) , we can write the name of the process&nbsp;:');\r\n    let ol5 = html_ul(parent);\r\n    html_li_text(ol5, 'add(1, 2) = 3');\r\n    html_li_text(ol5, 'subtract(3, 2) = 1');\r\n    html_li_text(ol5, 'multiply(3, 2) = 6');\r\n    html_li_text(ol5, 'divide(6, 3) = 2');\r\n    html_p_text(parent, 'after the name of the process , we write a pair of parentheses like this : process_name()');\r\n    html_p_text(parent, 'inside the parentheses , we write any inputs to the process separated by commas like this : process_name(input1, input2)');\r\n    html_p_text(parent, 'notice that a comma ( , ) separates the inputs');\r\n}\r\n","./public/src/lesson_console_log_program_first.mjs":"import {app_learn_code_code} from \"./app_learn_code_code.mjs\";\r\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\r\nimport {html_style_bold} from \"./html_style_bold.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nexport function lesson_console_log_program_first(parent) {\r\n    html_style_alternate(parent, html_p, [noop, html_style_monospace], ['suppose there is a process named ', 'console.log']);\r\n    html_p_text(parent, 'then we can write : ');\r\n    app_learn_code_code_part_contrast(parent, 'console.log()');\r\n    html_p_text(parent, 'right now there are no inputs for this process , so there is nothing in between the parentheses');\r\n    html_style_alternate(parent, html_p, [noop, html_style_monospace], ['suppose there is a string ', '\\'hello\\'']);\r\n    html_style_alternate(parent, html_p, [noop, html_style_monospace], ['suppose the string ', '\\'hello\\'', ' is an input to the ', 'console.log', ' process']);\r\n    html_p_text(parent, 'then we can write : ');\r\n    app_learn_code_code_part_contrast(parent, 'console.log(\\'hello\\')');\r\n    html_p_text(parent, 'this is almost a finished computer program');\r\n    html_p_text(parent, 'to finish this computer program we should add a semicolon separator to the end');\r\n    html_p_text(parent, 'here is the finished computer program and the output of the computer program :');\r\n    html_style_alternate(parent, html_p, [noop, html_style_bold], ['( when a human writes a computer program&nbsp;, the human writes ', 'code', ' )']);\r\n    app_learn_code_code(parent, `console.log('hello');`);\r\n}\r\n","./public/src/lesson_console_log_quiz.mjs":"import {lesson_console_log_quiz_value} from \"./lesson_console_log_quiz_value.mjs\";\r\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\r\nexport function lesson_console_log_quiz() {\r\n    let value = lesson_console_log_quiz_value();\r\n    let code = app_learn_code_log(value);\r\n    return code;\r\n}\r\n","./public/src/lesson_console_log_quiz_value.mjs":"import {list_join} from \"./list_join.mjs\";\r\nimport {list_slice} from \"./list_slice.mjs\";\r\nimport {add} from \"./add.mjs\";\r\nimport {subtract} from \"./subtract.mjs\";\r\nimport {list_length} from \"./list_length.mjs\";\r\nimport {integer_random} from \"./integer_random.mjs\";\r\nimport {string_split_space} from \"./string_split_space.mjs\";\r\nimport {string_delimit} from \"./string_delimit.mjs\";\r\nexport function lesson_console_log_quiz_value() {\r\n    let sentence = 'for GOD so loved the world that HE gave HIS only SON that whoever believes in HIM shall not perish but have eternal life';\r\n    let words = string_split_space(sentence);\r\n    let word_count = integer_random(2, 4);\r\n    let length = list_length(words);\r\n    let high = subtract(length, word_count);\r\n    let index = integer_random(0, high);\r\n    let end = add(index, word_count);\r\n    let sliced = list_slice(words, index, end);\r\n    let message = list_join(sliced, ' ');\r\n    let value = string_delimit(message);\r\n    return value;\r\n}\r\n","./public/src/lesson_console_log_strings.mjs":"import {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {html_style_bold} from \"./html_style_bold.mjs\";\r\nexport function lesson_console_log_strings(parent) {\r\n    html_style_alternate(parent, html_p, [noop, html_style_bold], ['in javascript , text , like letters and symbols , is called a ', 'string']);\r\n    html_p_text(parent, 'here are some examples of strings :');\r\n    app_learn_code_code_part_contrast(parent, '\\'hello\\'');\r\n    app_learn_code_code_part_contrast(parent, '\\'strings can have spaces\\'');\r\n    app_learn_code_code_part_contrast(parent, '\\'strings can have numbers like 123\\'');\r\n    app_learn_code_code_part_contrast(parent, '\\'456\\'');\r\n    app_learn_code_code_part_contrast(parent, '\\'strings can have symbols : !@#$%^&*...\\'');\r\n    html_style_alternate(parent, html_p, [noop, html_style_monospace], ['notice that a string has a quote ( ', '\\'', ' ) at the beginning and another quote at the end']);\r\n}\r\n","./public/src/lesson_divide.mjs":"import {lesson_divide_numbers} from \"./lesson_divide_numbers.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nexport function lesson_divide() {\r\n    const example_message = 'dividing two numbers';\r\n    const description = 'division ( / )';\r\n    return lesson_simple(function () {\r\n        let {dividend, divisor} = lesson_divide_numbers();\r\n        return `console.log(${dividend} / ${divisor});`;\r\n    }, example_before, description, example_message, []);\r\n    function example_before(parent) {\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['one number can be divided by the other using the forward slash ( ', '/', ' ) symbol']);\r\n    }\r\n}\r\n","./public/src/lesson_divide_numbers.mjs":"import {integer_random} from \"./integer_random.mjs\";\r\nimport {multiply} from \"./multiply.mjs\";\r\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\r\nexport function lesson_divide_numbers() {\r\n    let a = integer_random_digit_single_positive();\r\n    let b = integer_random_digit_single_positive();\r\n    let dividend = multiply(a, b);\r\n    let divisor = multiply(a, integer_random(1, 2));\r\n    return {\r\n        dividend,\r\n        divisor\r\n    };\r\n}\r\n","./public/src/lesson_equal_not_number.mjs":"import {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nimport {random_50_50} from \"./random_50_50.mjs\";\r\nimport {html_ul} from \"./html_ul.mjs\";\r\nimport {html_li_text} from \"./html_li_text.mjs\";\r\nexport function lesson_equal_not_number() {\r\n    const description = 'not equal ( !== ) ( numbers )';\r\n    const example_message = 'outputting whether or not two numbers are not equal';\r\n    return lesson_simple(source_get, example_before, description, example_message, [screen_before1, screen_before2]);\r\n    function source_get() {\r\n        let a = integer_random_digit_single_positive();\r\n        let b;\r\n        if (random_50_50()) {\r\n            b = a;\r\n        } else {\r\n            b = integer_random_digit_single_positive();\r\n        }\r\n        return `console.log(${a} !== ${b});`;\r\n    }\r\n    function screen_before1(parent) {\r\n        html_p_text(parent, 'if \"a\" and \"b\" are numbers and a and b are different from each other , then we can write : a ≠ b');\r\n        html_p_text(parent, 'for example :');\r\n        let ul = html_ul(parent);\r\n        html_li_text(ul, '1 ≠ 2');\r\n        html_li_text(ul, '7 ≠ 5');\r\n        html_li_text(ul, '10 ≠ -10');\r\n        html_p_text(parent, 'either : a = b or a ≠ b');\r\n        html_p_text(parent, 'if \"a\" and \"b\" are not equal to each other then a ≠ b is true');\r\n        html_p_text(parent, '≠ is the opposite of =');\r\n    }\r\n    function screen_before2(parent) {\r\n        html_p_text(parent, 'if \"a\" and \"b\" are numbers , and \"a\" and \"b\" are are the same number then a ≠ b is false');\r\n        html_p_text(parent, 'for example :');\r\n        let ul = html_ul(parent);\r\n        html_li_text(ul, '8 ≠ 8 is false');\r\n        html_li_text(ul, '0 ≠ 0 is false');\r\n        html_li_text(ul, '2 ≠ 2 is false');\r\n    }\r\n    function example_before(parent) {\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript to check if two numbers are not equal , instead of using the not equal sign ( ', '≠', ' ) use this : ', '!==']);\r\n    }\r\n}\r\n","./public/src/lesson_equal_not_string.mjs":"import {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nimport {random_50_50} from \"./random_50_50.mjs\";\r\nimport {lesson_console_log_quiz_value} from \"./lesson_console_log_quiz_value.mjs\";\r\nexport function lesson_equal_not_string() {\r\n    const description = 'not equal ( !== ) ( strings )';\r\n    const example_message = 'outputting whether or not two strings are not equal';\r\n    return lesson_simple(source_get, example_before, description, example_message, []);\r\n    function source_get() {\r\n        let a = lesson_console_log_quiz_value();\r\n        let b;\r\n        if (random_50_50()) {\r\n            b = a;\r\n        } else {\r\n            b = lesson_console_log_quiz_value();\r\n        }\r\n        return `console.log(${a} !== ${b});`;\r\n    }\r\n    function example_before(parent) {\r\n        html_style_alternate(parent, html_p, [html_style_monospace, noop], ['!==', ' also checks whether or not two strings are not equal']);\r\n    }\r\n}\r\n","./public/src/lesson_equal_number.mjs":"import {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nimport {random_50_50} from \"./random_50_50.mjs\";\r\nimport {html_ul} from \"./html_ul.mjs\";\r\nimport {html_li_text} from \"./html_li_text.mjs\";\r\nexport function lesson_equal_number() {\r\n    const description = 'equal ( === ) ( numbers )';\r\n    const example_message = 'outputting whether or not two numbers are equal';\r\n    return lesson_simple(source_get, example_before, description, example_message, [screen_before1, screen_before2]);\r\n    function source_get() {\r\n        let a = integer_random_digit_single_positive();\r\n        let b;\r\n        if (random_50_50()) {\r\n            b = a;\r\n        } else {\r\n            b = integer_random_digit_single_positive();\r\n        }\r\n        return `console.log(${a} === ${b});`;\r\n    }\r\n    function screen_before1(parent) {\r\n        html_p_text(parent, 'if \"a\" and \"b\" are numbers and a and b are the same number , then we can write : a = b');\r\n        html_p_text(parent, 'for example :');\r\n        let ul = html_ul(parent);\r\n        html_li_text(ul, '1 = 1');\r\n        html_li_text(ul, '7 = 7');\r\n        html_li_text(ul, '10 = 10');\r\n        html_p_text(parent, 'either two numbers are equal to each other , or they are not equal to each other');\r\n        html_p_text(parent, 'if \"a\" and \"b\" are equal to each other then a = b is true');\r\n    }\r\n    function screen_before2(parent) {\r\n        html_p_text(parent, 'if \"a\" and \"b\" are numbers , and \"a\" and \"b\" are different from each other then a = b is false');\r\n        html_p_text(parent, 'for example :');\r\n        let ul = html_ul(parent);\r\n        html_li_text(ul, '8 = 9 is false');\r\n        html_li_text(ul, '0 = -4 is false');\r\n        html_li_text(ul, '2.0 = 2.1 is false');\r\n        html_li_text(ul, '6 = -6 is false');\r\n    }\r\n    function example_before(parent) {\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript to check if two numbers are equal or not , instead of using one equal sign ( ', '=', ' ) use three equal signs ( ', '===', ' )']);\r\n    }\r\n}\r\n","./public/src/lesson_equal_string.mjs":"import {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nimport {random_50_50} from \"./random_50_50.mjs\";\r\nimport {lesson_console_log_quiz_value} from \"./lesson_console_log_quiz_value.mjs\";\r\nexport function lesson_equal_string() {\r\n    const description = 'equal ( === ) ( strings )';\r\n    const example_message = 'outputting whether or not two strings are equal';\r\n    return lesson_simple(source_get, example_before, description, example_message, []);\r\n    function source_get() {\r\n        let a = lesson_console_log_quiz_value();\r\n        let b;\r\n        if (random_50_50()) {\r\n            b = a;\r\n        } else {\r\n            b = lesson_console_log_quiz_value();\r\n        }\r\n        return `console.log(${a} === ${b});`;\r\n    }\r\n    function example_before(parent) {\r\n        html_style_alternate(parent, html_p, [html_style_monospace, noop], ['===', ' also checks if two strings are the same or not']);\r\n    }\r\n}\r\n","./public/src/lesson_greater_than.mjs":"import {lesson_comparisons_source_get_get} from \"./lesson_comparisons_source_get_get.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_bold} from \"./html_style_bold.mjs\";\r\nimport {html_ul} from \"./html_ul.mjs\";\r\nimport {html_li_text} from \"./html_li_text.mjs\";\r\nexport function lesson_greater_than() {\r\n    const description = 'greater than ( > )';\r\n    const example_message = 'outputting whether or not a number is greater than another number';\r\n    return lesson_simple(lesson_comparisons_source_get_get('>'), example_before, description, example_message, [screen_before1]);\r\n    function screen_before1(parent) {\r\n        html_style_alternate(parent, html_p, [noop, html_style_bold], ['if \"a\" and \"b\" are numbers and \"a\" is less than \"b\" then \"b\" is ', 'greater than', ' \"a\"']);\r\n        html_p_text(parent, 'like less than , if \"a\" and \"b\" are equal to each other , then \"a\" is not greater than \"b\"');\r\n        html_p_text(parent, 'we can write \"a\" is greater than \"b\" as : a > b');\r\n        html_p_text(parent, 'here are some examples :');\r\n        let ul = html_ul(parent);\r\n        html_li_text(ul, '6 > 4 is true');\r\n        html_li_text(ul, '3 > 5 is false');\r\n        html_li_text(ul, '2 > 2 is false');\r\n    }\r\n    function example_before(parent) {}\r\n}\r\n","./public/src/lesson_greater_than_equal.mjs":"import {lesson_comparisons_source_get_get} from \"./lesson_comparisons_source_get_get.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nimport {html_ul} from \"./html_ul.mjs\";\r\nimport {html_li_text} from \"./html_li_text.mjs\";\r\nexport function lesson_greater_than_equal() {\r\n    const description = 'greater than or equal to ( >= )';\r\n    const example_message = 'outputting whether or not a number is greater than or equal to another number';\r\n    return lesson_simple(lesson_comparisons_source_get_get('<='), example_before, description, example_message, [screen_before1]);\r\n    function screen_before1(parent) {\r\n        html_p_text(parent, 'as \"less than or equal to\" ( ≤ ) was for \"less than\" ( < ) so \"greater than or equal to\" ( ≥ ) is for \"greater than\" ( > )');\r\n        html_p_text(parent, 'if a > b then a ≥ b');\r\n        html_p_text(parent, 'if a = b then a ≥ b');\r\n        html_p_text(parent, 'here are some examples :');\r\n        let ul1 = html_ul(parent);\r\n        html_li_text(ul1, '3 ≥ 5 is false');\r\n        html_li_text(ul1, '6 ≥ 4 is true');\r\n        html_li_text(ul1, '2 ≥ 2 is true');\r\n    }\r\n    function example_before(parent) {\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript a ≥ b is written as : ', 'a >= b']);\r\n    }\r\n}\r\n","./public/src/lesson_if_binary.mjs":"import {app_learn_code_random_boolean_binary} from \"./app_learn_code_random_boolean_binary.mjs\";\r\nimport {list_join} from \"./list_join.mjs\";\r\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nimport {lesson_console_log_quiz} from \"./lesson_console_log_quiz.mjs\";\r\nexport function lesson_if_binary() {\r\n    let description = 'if with a process';\r\n    let example_message = string_combine('with an ', description);\r\n    return lesson_simple(function () {\r\n        let boolean = app_learn_code_random_boolean_binary();\r\n        let statements = [lesson_console_log_quiz(), `if (${boolean}) {\r\n${lesson_console_log_quiz()}\r\n}`, lesson_console_log_quiz()];\r\n        return list_join(statements, '\\n');\r\n    }, example_before, description, example_message, [screen2]);\r\n    function example_before() {}\r\n    function screen2(parent) {\r\n        html_style_alternate_monospace(parent, ['inside the parenthesis of an ', 'if', ' can be more than just ', 'true', ' and ', 'false']);\r\n        html_style_alternate_monospace(parent, ['remember ', '<', ' , ', '<=', ' , ', '>', ' , ', '>=', ' , ', '===', ' and ', '!==', ' all return ', 'true', ' or ', 'false']);\r\n        html_style_alternate_monospace(parent, ['therefore inside the parenthesis of an ', 'if', ' could be one of those']);\r\n    }\r\n}\r\n","./public/src/lesson_if_else.mjs":"import {list_join_newline} from \"./list_join_newline.mjs\";\r\nimport {app_learn_code_random_boolean_binary} from \"./app_learn_code_random_boolean_binary.mjs\";\r\nimport {app_learn_code_unique_multiple} from \"./app_learn_code_unique_multiple.mjs\";\r\nimport {html_style_alternate_bold} from \"./html_style_alternate_bold.mjs\";\r\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\r\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\r\nimport {app_learn_code_random_value} from \"./app_learn_code_random_value.mjs\";\r\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nimport {list_map} from \"./list_map.mjs\";\r\nimport { lesson_console_log_quiz_value } from \"./lesson_console_log_quiz_value.mjs\";\r\nexport function lesson_if_else() {\r\n    let description = 'if with else';\r\n    let example_message = string_combine('with an ', description);\r\n    return lesson_simple(function () {\r\n        let boolean = app_learn_code_random_boolean_binary();\r\n        let values = app_learn_code_unique_multiple(lesson_console_log_quiz_value, 2);\r\n        let mapped = list_map(values, app_learn_code_log);\r\n        let [a, b] = mapped;\r\n        let lines = [`if (${boolean}) {`, a, `} else {`, b, `}`];\r\n        return list_join_newline(lines);\r\n    }, example_before, description, example_message, [screen1, screen2, screen3]);\r\n    function example_before(parent) {}\r\n    function screen1(parent) {\r\n        html_style_alternate_monospace(parent, ['in javascript , code in between a ', '/*', ' and a ', '*/', ' is ignored']);\r\n        html_style_alternate_bold(parent, ['this is called a ', 'comment']);\r\n        html_p_text(parent, 'comments are for humans and code is for computers');\r\n        html_p_text(parent, 'here is an example comment :');\r\n        app_learn_code_code_part_contrast(parent, '/* console.log(0); */');\r\n        html_style_alternate_monospace(parent, ['even though it says ', 'console.log(0);', ' that will not get ran because it is inside of a comment']);\r\n    }\r\n    function screen2(parent) {\r\n        html_style_alternate_monospace(parent, ['another way to write a comment is to use ', '//']);\r\n        html_style_alternate_monospace(parent, ['', '//', ' begins a comment and the comment continues until the end of the current line']);\r\n        html_style_alternate_monospace(parent, ['here is an example ', '//', ' comment :']);\r\n        app_learn_code_code_part_contrast(parent, 'let a; // a is the first letter of the alphabet');\r\n    }\r\n    function screen3(parent) {\r\n        html_style_alternate_monospace(parent, ['in programming , sometimes there is need to code : if \"a\" is ', 'true', ' , then do \"b\" , otherwise , if \"a\" is ', 'false', ' , then do \"c\"']);\r\n        html_p_text(parent, 'in other words , choose between \"b\" and \"c\" , depending on the value of \"a\"');\r\n        html_style_alternate_monospace(parent, ['the code to represent that uses ', 'else', ' :']);\r\n        app_learn_code_code_part_contrast(parent, list_join_newline(['if (a) {', '// b', '} else {', '// c', '}']));\r\n    }\r\n}\r\n","./public/src/lesson_if_else_if.mjs":"import {app_learn_code_log_delimit} from \"./app_learn_code_log_delimit.mjs\";\r\nimport {list_join_newline} from \"./list_join_newline.mjs\";\r\nimport {js_code_statement_let_assign} from \"./js_code_statement_let_assign.mjs\";\r\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {random_50_50} from \"./random_50_50.mjs\";\r\nimport {integer_random_digit_single} from \"./integer_random_digit_single.mjs\";\r\nimport {html_hr} from \"./html_hr.mjs\";\r\nexport function lesson_if_else_if() {\r\n    let description = 'if with else if';\r\n    let example_message = 'outputting whether or not a number is positive , negative or zero';\r\n    return lesson_simple(function () {\r\n        let a;\r\n        if (random_50_50()) {\r\n            a = 0;\r\n        } else {\r\n            a = integer_random_digit_single();\r\n        }\r\n        let lines = [js_code_statement_let_assign('n', a), `if (n > 0) {`, app_learn_code_log_delimit('number is positive'), `} else if (n < 0) {`, app_learn_code_log_delimit('number is negative'), `} else {`, app_learn_code_log_delimit('number is zero'), `}`];\r\n        return list_join_newline(lines);\r\n    }, example_before, description, example_message, [screen1, screen2]);\r\n    function example_before(parent) {\r\n        html_p_text(parent, 'in this lesson , the code will first check whether or not the number is positive');\r\n        html_p_text(parent, 'if the number is not positive , then the code will check whether or not the number is negative');\r\n        html_hr(parent);\r\n    }\r\n    function screen1(parent) {\r\n        html_p_text(parent, 'the number zero is not positive');\r\n        html_p_text(parent, 'the number zero is not negative');\r\n        html_p_text(parent, 'if a number is not positive and the number is not negative , then the number must be zero');\r\n        html_p_text(parent, 'a number is either positive , negative or zero');\r\n    }\r\n    function screen2(parent) {\r\n        html_p_text(parent, 'a number is either positive , or is it not positive , so \"positive\" and \"not positive\" are two choices');\r\n        html_style_alternate_monospace(parent, ['if there are two choices , then one ', 'if', ' ', 'else', ' can be used']);\r\n        html_p_text(parent, 'this lesson will check a number to be either \"positive\" , \"negative\" or \"zero\"');\r\n        html_p_text(parent, '\"positive\" , \"negative\" and \"zero\" are three choices');\r\n        html_style_alternate_monospace(parent, ['if there are three choices , then two ', 'if', ' ', 'else', ' can be used , as will be shown later in this lesson']);\r\n    }\r\n}\r\n","./public/src/lesson_if_else_negative.mjs":"import {app_learn_code_log_delimit} from \"./app_learn_code_log_delimit.mjs\";\r\nimport {list_join_newline} from \"./list_join_newline.mjs\";\r\nimport {html_style_alternate_bold} from \"./html_style_alternate_bold.mjs\";\r\nimport {js_code_statement_let_assign} from \"./js_code_statement_let_assign.mjs\";\r\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {integer_random} from \"./integer_random.mjs\";\r\nimport {integer_random_digit_single} from \"./integer_random_digit_single.mjs\";\r\nimport {html_hr} from \"./html_hr.mjs\";\r\nexport function lesson_if_else_negative() {\r\n    let category = 'negative';\r\n    let description = `if with else about ${category} or not`;\r\n    let example_message = `outputting whether or not a number is ${category}`;\r\n    return lesson_simple(function () {\r\n        let a = integer_random_digit_single();\r\n        if (integer_random(1, 3) === 1) {\r\n            a = 0;\r\n        }\r\n        let lines = [js_code_statement_let_assign('n', a), js_code_statement_let_assign(`is_${category}`, `n < 0`), `if (is_${category}) {`, app_learn_code_log_delimit(`number is ${category}`), `} else {`, app_learn_code_log_delimit(`number is not ${category}`), `}`];\r\n        return list_join_newline(lines);\r\n    }, example_before, description, example_message, []);\r\n    function example_before(parent) {\r\n        html_style_alternate_bold(parent, ['a number is ', 'negative', ' if the number is less than zero']);\r\n        html_style_alternate_monospace(parent, ['', 'if', ' and ', 'else', ` can be used to output whether or not a number is ${category}`]);\r\n        html_hr(parent);\r\n    }\r\n}\r\n","./public/src/lesson_if_else_positive.mjs":"import {app_learn_code_log_delimit} from \"./app_learn_code_log_delimit.mjs\";\r\nimport {list_join_newline} from \"./list_join_newline.mjs\";\r\nimport {html_style_alternate_bold} from \"./html_style_alternate_bold.mjs\";\r\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {integer_random} from \"./integer_random.mjs\";\r\nimport {integer_random_digit_single} from \"./integer_random_digit_single.mjs\";\r\nimport {html_hr} from \"./html_hr.mjs\";\r\nexport function lesson_if_else_positive() {\r\n    let category = 'positive';\r\n    let description = `if with else about ${category} or not`;\r\n    let example_message = `outputting whether or not a number is ${category}`;\r\n    return lesson_simple(function () {\r\n        let a = integer_random_digit_single();\r\n        if (integer_random(1, 3) === 1) {\r\n            a = 0;\r\n        }\r\n        let lines = [`let is_positive = ${a} > 0;`, `if (is_positive) {`, app_learn_code_log_delimit(`number is ${category}`), `} else {`, app_learn_code_log_delimit(`number is not ${category}`), `}`];\r\n        return list_join_newline(lines);\r\n    }, example_before, description, example_message, []);\r\n    function example_before(parent) {\r\n        html_style_alternate_bold(parent, ['a number is ', 'positive', ' if the number is greater than zero']);\r\n        'a number is negative if the number is less than zero';\r\n        'if a number is neither positive nor negative , the number must be 0';\r\n        html_style_alternate_monospace(parent, ['', 'if', ' and ', 'else', ` can be used to output whether or not a number is ${category}`]);\r\n        html_hr(parent);\r\n    }\r\n}\r\n","./public/src/lesson_if_else_zero.mjs":"import {app_learn_code_log_delimit} from \"./app_learn_code_log_delimit.mjs\";\r\nimport {list_join_newline} from \"./list_join_newline.mjs\";\r\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {random_50_50} from \"./random_50_50.mjs\";\r\nimport {integer_random_digit_single} from \"./integer_random_digit_single.mjs\";\r\nexport function lesson_if_else_zero() {\r\n    let description = 'if with else about zero or not';\r\n    let example_message = 'outputting whether or not a number is zero';\r\n    return lesson_simple(function () {\r\n        let a;\r\n        if (random_50_50()) {\r\n            a = 0;\r\n        } else {\r\n            a = integer_random_digit_single();\r\n        }\r\n        let lines = [`if (${a} === 0) {`, app_learn_code_log_delimit('number is zero'), `} else {`, app_learn_code_log_delimit('number is not zero'), `}`];\r\n        return list_join_newline(lines);\r\n    }, example_before, description, example_message, []);\r\n    function example_before(parent) {\r\n        html_style_alternate_monospace(parent, ['', 'if', ' and ', 'else', ' can be used to output whether or not a number is ', '0']);\r\n    }\r\n}\r\n","./public/src/lesson_if_false.mjs":"import {list_join} from \"./list_join.mjs\";\r\nimport {app_learn_code_log_random_value} from \"./app_learn_code_log_random_value.mjs\";\r\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {html_hr} from \"./html_hr.mjs\";\r\nexport function lesson_if_false() {\r\n    let description = 'if with false';\r\n    let example_message = 'with an if with false passed in';\r\n    return lesson_simple(function () {\r\n        let statements = [app_learn_code_log_random_value(), `if (false) {\r\n${app_learn_code_log_random_value()}\r\n}`, app_learn_code_log_random_value()];\r\n        return list_join(statements, '\\n');\r\n    }, example_before, description, example_message, []);\r\n    function example_before(parent) {\r\n        html_style_alternate_monospace(parent, ['if there is an ', 'if', ' and what is in between the parentheses results in ', 'false', ' , the code in between the braces will not be ran']);\r\n        html_hr(parent);\r\n        html_style_alternate_monospace(parent, ['in the example below , ', 'false', ' is in between the parentheses of the ', 'if']);\r\n        html_style_alternate_monospace(parent, ['therefore what is inside the braces of the ', 'if', ' is not ran']);\r\n        html_style_alternate_monospace(parent, ['therefore the ', 'console.log();', ' statement inside the ', 'if', ' braces is not ran']);\r\n        html_style_alternate_monospace(parent, ['therefore only ', 'console.log();', ' statements before and after the ', 'if', ' braces are ran']);\r\n        html_hr(parent);\r\n    }\r\n}\r\n","./public/src/lesson_if_true.mjs":"import {app_learn_code_log_random_value} from \"./app_learn_code_log_random_value.mjs\";\r\nimport {html_img_limited_centered} from \"./html_img_limited_centered.mjs\";\r\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\r\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_bold} from \"./html_style_bold.mjs\";\r\nimport {html_hr} from \"./html_hr.mjs\";\r\nimport {app_learn_code_style_code_colored} from \"./app_learn_code_style_code_colored.mjs\";\r\nimport {list_join} from \"./list_join.mjs\";\r\nexport function lesson_if_true() {\r\n    let description = 'if with true';\r\n    let example_message = 'with an if with true passed in';\r\n    return lesson_simple(function () {\r\n        let statements = [app_learn_code_log_random_value(), `if (true) {\r\n${app_learn_code_log_random_value()}\r\n}`, app_learn_code_log_random_value()];\r\n        return list_join(statements, '\\n');\r\n    }, example_before, description, example_message, [screen1, screen2, screen3]);\r\n    function example_before(parent) {\r\n        html_style_alternate_monospace(parent, ['in the example below , ', 'true', ' is in between the parentheses of the ', 'if']);\r\n        html_style_alternate_monospace(parent, ['therefore what is inside the braces of the ', 'if', ' is ran']);\r\n        html_style_alternate_monospace(parent, ['therefore all three ', 'console.log();', ' statements are ran']);\r\n        html_hr(parent);\r\n    }\r\n    function screen1(parent) {\r\n        html_p_text(parent, 'a pen may be used for writing');\r\n        html_img_limited_centered(parent, 'pen.jpg');\r\n        html_p_text(parent, 'a pencil may also be used for writing');\r\n        html_img_limited_centered(parent, 'pencil.jpg');\r\n        html_p_text(parent, 'an eraser can erase pencil writing');\r\n        html_img_limited_centered(parent, 'pencil_eraser.jpg');\r\n        html_p_text(parent, 'bowever , an eraser cannot erase pen writing');\r\n        html_hr(parent);\r\n        html_p_text(parent, 'if someone needs to erase , they should use a pencil');\r\n        html_p_text(parent, 'otherwise they are free to use a pen');\r\n    }\r\n    function screen2(parent) {\r\n        html_style_alternate_monospace(parent, ['in programming , sometimes there is need to code : if \"a\" is ', 'true', ' , then do \"b\"']);\r\n        html_style_alternate_monospace(parent, ['\"b\" is something that should happen only if \"a\" is ', 'true']);\r\n    }\r\n    function screen3(parent) {\r\n        html_p_text(parent, 'below is some code that could represent using a pencil if an eraser is needed :');\r\n        app_learn_code_code_part_contrast(parent, `let need_eraser = true;\r\nlet use_pencil = false;\r\nif (need_eraser) {\r\nuse_pencil = true;\r\n}`);\r\n        html_hr(parent);\r\n        html_style_alternate_monospace(parent, ['after the ', 'if', ' there should be a pair of parentheses : ', '(', ' ', ')']);\r\n        html_style_alternate_monospace(parent, ['for now , in between the parentheses there should be something that results in either ', 'true', ' or ', 'false']);\r\n        html_style_alternate_monospace(parent, ['javascript allows other values besides ', 'true', ' and ', 'false', ' in between the parentheses of an ', 'if']);\r\n        html_p_text(parent, 'however , that will not be covered at this time');\r\n        html_style_alternate(parent, html_p, [noop, html_style_bold, noop, app_learn_code_style_code_colored, noop, app_learn_code_style_code_colored], ['after the parenthesis should be a pair of ', 'braces', ' : ', '{', ' ', '}']);\r\n        html_style_alternate_monospace(parent, ['in between the braces should be the code that should be ran if what is in between the parenthesis is ', 'true']);\r\n    }\r\n}\r\n","./public/src/lesson_if_variable.mjs":"import {app_learn_code_random_boolean_binary} from \"./app_learn_code_random_boolean_binary.mjs\";\r\nimport {list_join} from \"./list_join.mjs\";\r\nimport {js_code_statement_let_assign} from \"./js_code_statement_let_assign.mjs\";\r\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\r\nimport {app_learn_code_random_identifier} from \"./app_learn_code_random_identifier.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {lesson_console_log_quiz} from \"./lesson_console_log_quiz.mjs\";\r\nexport function lesson_if_variable() {\r\n    let description = 'if with a variable';\r\n    let example_message = description;\r\n    return lesson_simple(function () {\r\n        let boolean = app_learn_code_random_boolean_binary();\r\n        let name = app_learn_code_random_identifier();\r\n        let statements = [js_code_statement_let_assign(name, boolean), lesson_console_log_quiz(), `if (${name}) {\r\n${lesson_console_log_quiz()}\r\n}`, lesson_console_log_quiz()];\r\n        return list_join(statements, '\\n');\r\n    }, example_before, description, example_message, []);\r\n    function example_before(parent) {\r\n        html_style_alternate_monospace(parent, ['inside the parenthesis of an ', 'if', ' could also be a variable']);\r\n    }\r\n}\r\n","./public/src/lesson_less_than.mjs":"import {lesson_comparisons_source_get_get} from \"./lesson_comparisons_source_get_get.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_bold} from \"./html_style_bold.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nimport {html_ul} from \"./html_ul.mjs\";\r\nimport {html_li_text} from \"./html_li_text.mjs\";\r\nexport function lesson_less_than() {\r\n    const description = 'less than ( < )';\r\n    const example_message = 'outputting whether or not a number is less than another number';\r\n    return lesson_simple(lesson_comparisons_source_get_get('<'), example_before, description, example_message, [screen_before1, screen_before2, screen_before3]);\r\n    function screen_before1(parent) {\r\n        html_p_text(parent, 'if \"a\" and \"b\" are numbers , then either \"a\" is less than \"b\" or \"a\" is not less than \"b\"');\r\n        html_p_text(parent, 'we can write \"a\" is less than \"b\" as : a < b');\r\n        html_p_text(parent, 'either a < b is true or a < b is false');\r\n        html_p_text(parent, 'for example :');\r\n        let ul = html_ul(parent);\r\n        html_li_text(ul, '1 < 2 is true');\r\n        html_li_text(ul, '3 < 5 is true');\r\n        html_li_text(ul, '6 < 4 is false');\r\n        html_li_text(ul, '7 < 0 is false');\r\n    }\r\n    function screen_before2(parent) {\r\n        html_p_text(parent, 'if \"a\" and \"b\" are equal to each other , then \"a\" is not less than \"b\"');\r\n        html_p_text(parent, 'for example :');\r\n        let ul = html_ul(parent);\r\n        html_li_text(ul, '8 < 8 is false');\r\n        html_li_text(ul, '0 < 0 is false');\r\n        html_li_text(ul, '-2 < -2 is false');\r\n    }\r\n    function screen_before3(parent) {\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript , to check if a number is less than another number or not , use the less than ( ', '<', ' ) sign']);\r\n        html_style_alternate(parent, html_p, [html_style_monospace, noop], ['1', ' , ', '2', ' and ', '3', ' are numbers']);\r\n        html_style_alternate(parent, html_p, [html_style_monospace, noop], ['\\'JESUS\\'', ' , ', '\\'is\\'', ' and ', '\\'LORD\\'', ' are strings']);\r\n        html_style_alternate(parent, html_p, [html_style_monospace, noop, html_style_monospace, noop, html_style_bold], ['true', ' and ', 'false', ' are ', 'boolean']);\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['just as javascript has strings and numbers , javascript also has boolean ', 'true', ' and ', 'false']);\r\n    }\r\n    function example_before(parent) {}\r\n}\r\n","./public/src/lesson_less_than_equal.mjs":"import {lesson_comparisons_source_get_get} from \"./lesson_comparisons_source_get_get.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nimport {html_ul} from \"./html_ul.mjs\";\r\nimport {html_li_text} from \"./html_li_text.mjs\";\r\nexport function lesson_less_than_equal() {\r\n    const description = 'less than or equal to ( <= )';\r\n    const example_message = 'outputting whether or not a number is less than or equal to another number';\r\n    return lesson_simple(lesson_comparisons_source_get_get('<='), example_before, description, example_message, [screen_before1, screen_before2]);\r\n    function screen_before1(parent) {\r\n        html_p_text(parent, '\"less than or equal to\" ( ≤ ) is almost the same as \"less than\" ( < )');\r\n        html_p_text(parent, 'the only difference is when the two numbers being compared are the same');\r\n        html_p_text(parent, 'if \"a\" and \"b\" are equal then \"a\" is less than or equal to \"b\"');\r\n        html_p_text(parent, 'whereas if \"a\" and \"b\" are equal then \"a\" is not less than \"b\"');\r\n    }\r\n    function screen_before2(parent) {\r\n        html_p_text(parent, 'if a < b then a ≤ b');\r\n        html_p_text(parent, 'if a = b then a ≤ b');\r\n        html_p_text(parent, 'here are some examples :');\r\n        let ul1 = html_ul(parent);\r\n        html_li_text(ul1, '3 ≤ 5 is true');\r\n        html_li_text(ul1, '6 ≤ 4 is false');\r\n        html_li_text(ul1, '2 ≤ 2 is true');\r\n    }\r\n    function example_before(parent) {\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript a ≤ b is written as : ', 'a <= b']);\r\n    }\r\n}\r\n","./public/src/lesson_log_boolean.mjs":"import {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {random_50_50} from \"./random_50_50.mjs\";\r\nexport function lesson_log_boolean() {\r\n    let example_message = 'outputting a boolean to the console';\r\n    let description = example_message;\r\n    return lesson_simple(function () {\r\n        return `console.log(${random_50_50()});\r\nconsole.log(${random_50_50()});`;\r\n    }, example_before, description, example_message, []);\r\n    function example_before(parent) {\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['boolean ', 'true', ' and ', 'false', ' can be used in code :']);\r\n    }\r\n}\r\n","./public/src/lesson_log_number.mjs":"import {lesson_add_quiz} from \"./lesson_add_quiz.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {lesson_log_number_explain} from \"./lesson_log_number_explain.mjs\";\r\nexport function lesson_log_number() {\r\n    let example_message = 'outputting a number to the console';\r\n    let description = example_message;\r\n    return lesson_simple(lesson_add_quiz, example_before, description, example_message, [lesson_log_number_explain]);\r\n    function example_before(parent) {}\r\n}\r\n","./public/src/lesson_log_number_example.mjs":"import {app_learn_code_code} from \"./app_learn_code_code.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nimport {html_button_width_full_text_click} from \"./html_button_width_full_text_click.mjs\";\r\nimport {html_clear} from \"./html_clear.mjs\";\r\nimport {html_div} from \"./html_div.mjs\";\r\nimport {app_learn_code_range_retry} from \"./app_learn_code_range_retry.mjs\";\r\nimport {equal_not} from \"./equal_not.mjs\";\r\nexport function lesson_log_number_example(source_get, message, before) {\r\n    return parent => {\r\n        let previous;\r\n        let div = html_div(parent);\r\n        refresh();\r\n        function refresh() {\r\n            html_clear(div);\r\n            before(div);\r\n            html_p_text(div, string_combine('below is an example computer program ', message));\r\n            html_p_text(div, 'if you want to see another example , press the \"another example\" button below');\r\n            let source;\r\n            for (let i of app_learn_code_range_retry()) {\r\n                source = source_get();\r\n                if (equal_not(source, previous)) {\r\n                    break;\r\n                }\r\n            }\r\n            previous = source;\r\n            app_learn_code_code(div, source);\r\n            html_button_width_full_text_click(div, 'another example', refresh);\r\n        }\r\n    };\r\n}\r\n","./public/src/lesson_log_number_explain.mjs":"import {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\r\nexport function lesson_log_number_explain(parent) {\r\n    html_style_alternate(parent, html_p, [noop, html_style_monospace], ['remember , strings need quotes ( ', '\\'', ' ) :']);\r\n    app_learn_code_code_part_contrast(parent, '\\'text\\'');\r\n    html_p_text(parent, 'however , numbers do not need quotes :');\r\n    app_learn_code_code_part_contrast(parent, '0');\r\n    app_learn_code_code_part_contrast(parent, '12');\r\n    app_learn_code_code_part_contrast(parent, '345');\r\n    html_p_text(parent, 'sometimes people write numbers with commas separating the digits , like 1,000 and 23,467,890');\r\n    html_p_text(parent, 'in javascript numbers are not written with commas :');\r\n    app_learn_code_code_part_contrast(parent, '1000');\r\n    app_learn_code_code_part_contrast(parent, '23467890');\r\n    html_p_text(parent, 'numbers can have a negative sign :');\r\n    app_learn_code_code_part_contrast(parent, '-6');\r\n    app_learn_code_code_part_contrast(parent, '-7890');\r\n    html_p_text(parent, 'numbers can have a decimal point :');\r\n    app_learn_code_code_part_contrast(parent, '6.7');\r\n    app_learn_code_code_part_contrast(parent, '8901.23');\r\n}\r\n","./public/src/lesson_log_number_quiz.mjs":"import {lesson_log_number_quiz_value} from \"./lesson_log_number_quiz_value.mjs\";\r\nexport function lesson_log_number_quiz() {\r\n    let value = lesson_log_number_quiz_value();\r\n    return `console.log(${value});`;\r\n}\r\n","./public/src/lesson_log_number_quiz_value.mjs":"import {list_random_item} from \"./list_random_item.mjs\";\r\nimport {random_50_50} from \"./random_50_50.mjs\";\r\nimport {integer_random} from \"./integer_random.mjs\";\r\nexport function lesson_log_number_quiz_value() {\r\n    let value = integer_random(0, 999999);\r\n    if (random_50_50()) {\r\n        value = value / list_random_item([10, 100, 1000]);\r\n    }\r\n    if (random_50_50()) {\r\n        value = value * -1;\r\n    }\r\n    return value;\r\n}\r\n","./public/src/lesson_mod.mjs":"import {mod} from \"./mod.mjs\";\r\nimport {floor} from \"./floor.mjs\";\r\nimport {list_join_newline} from \"./list_join_newline.mjs\";\r\nimport {html_style_alternate_bold} from \"./html_style_alternate_bold.mjs\";\r\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\r\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\r\nimport {html_li_text} from \"./html_li_text.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {integer_random_digit_single} from \"./integer_random_digit_single.mjs\";\r\nimport {html_ul} from \"./html_ul.mjs\";\r\nimport {html_hr} from \"./html_hr.mjs\";\r\nimport {range} from \"./range.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nimport {html_element} from \"./html_element.mjs\";\r\nimport {html_inner_set} from \"./html_inner_set.mjs\";\r\nimport {html_style_width_full} from \"./html_style_width_full.mjs\";\r\nimport {html_style_centered} from \"./html_style_centered.mjs\";\r\nimport {app_learn_code_style_rounded_padded} from \"./app_learn_code_style_rounded_padded.mjs\";\r\nimport {list_index_last} from \"./list_index_last.mjs\";\r\nimport {html_style_background_color} from \"./html_style_background_color.mjs\";\r\nimport {each_index} from \"./each_index.mjs\";\r\nimport { integer_random_digit_single_positive } from \"./integer_random_digit_single_positive.mjs\";\r\nexport function lesson_mod() {\r\n    let description = 'remainder ( % ) 2';\r\n    let example_message = 'outputting the remainder of a number with a divisor of 2';\r\n    return lesson_simple(function () {\r\n        let a = integer_random_digit_single_positive();\r\n        let lines = [app_learn_code_log(`${a} % 2`)];\r\n        return list_join_newline(lines);\r\n    }, example_before, description, example_message, [screen1, screen2, screen3]);\r\n    function example_before(parent) {\r\n        html_style_alternate_monospace(parent, ['in javascript , to get the remainder of ', 'dividend', ' use ', '%', ' like this : ', 'dividend % divisor']);\r\n    }\r\n    function screen1(parent) {\r\n        html_p_text(parent, 'here is an example of division in math : a / b');\r\n        html_style_alternate_bold(parent, ['when a number ( like \"a\" ) is divided by another number ( like \"b\" ) , the first number is called the ', 'dividend']);\r\n        html_style_alternate_bold(parent, ['the second number is called the ', 'divisor']);\r\n        html_p_text(parent, 'for example in 7 / 4 the dividend is 7 and the divisor is 4');\r\n    }\r\n    function screen2(parent) {\r\n        html_p_text(parent, 'after the divisor divides the dividend , there is a quotient and a remainder');\r\n        html_p_text(parent, 'the following formula will give the answer to the division with a decimal point :');\r\n        html_p_text(parent, 'quotient + ( remainder / divisor )');\r\n        html_p_text(parent, 'for example 7 / 4 has a quotient of 1 and a remainder of 3');\r\n        html_p_text(parent, '1 + ( 3 / 4 ) = 1 + 0.75 = 1.75');\r\n    }\r\n    function screen3(parent) {\r\n        let divisor = 2;\r\n        html_p_text(parent, string_combine('in the table below are some quotient and remainders for a divisor of ', divisor));\r\n        html_p_text(parent, 'pay attention to the remainder');\r\n        html_p_text(parent, 'here is what the letters mean :');\r\n        let ul = html_ul(parent);\r\n        html_li_text(ul, 'a is the dividend');\r\n        html_li_text(ul, 'b is the divisor');\r\n        html_li_text(ul, 'q is the quotient');\r\n        html_li_text(ul, 'r is the remainder');\r\n        let table = html_element(parent, 'table');\r\n        html_style_width_full(table);\r\n        let thead = html_element(table, 'thead');\r\n        let tr_head = html_element(thead, 'tr');\r\n        let columns_head = ['a', 'b', 'a / b', 'q', 'r'];\r\n        each_index(columns_head, (c, c_index) => {\r\n            let th = html_element(tr_head, 'th');\r\n            html_inner_set(th, c);\r\n            let index_last = list_index_last(columns_head);\r\n            app_learn_code_style_rounded_padded(th);\r\n            let color;\r\n            if (equal(c_index, index_last)) {\r\n                color = '#FFEB3B';\r\n            } else {\r\n                color = '#29B6F6';\r\n            }\r\n            html_style_background_color(th, color);\r\n        });\r\n        let tbody = html_element(table, 'tbody');\r\n        each_index(range(11), (n, n_index) => {\r\n            let even = equal(mod(n_index, divisor), 0);\r\n            let tr_body = html_element(tbody, 'tr');\r\n            let quotient = n / divisor;\r\n            let columns_body = [n, divisor, quotient, floor(quotient), n % divisor];\r\n            let index_last = list_index_last(columns_body);\r\n            each_index(columns_body, (c, c_index) => {\r\n                let divisor = 2;\r\n                let td = html_element(tr_body, 'td');\r\n                html_inner_set(td, c);\r\n                html_style_centered(td);\r\n                app_learn_code_style_rounded_padded(td);\r\n                let color;\r\n                if (equal(c_index, index_last)) {\r\n                    color = even ? '#F9E79F' : '#F7DC6F';\r\n                } else {\r\n                    color = even ? '#D6EAF8' : '#AED6F1';\r\n                }\r\n                html_style_background_color(td, color);\r\n            });\r\n        });\r\n        html_hr(parent);\r\n        html_p_text(parent, 'did you notice how the remainder alternates between 0 and 1 ?');\r\n        html_p_text(parent, 'did you notice that when the number is even the remainder is 0 ?');\r\n        html_p_text(parent, 'did you notice that when the number is odd the remainder is 1 ?');\r\n        html_p_text(parent, 'the remainder can be used to check whether a number is even or odd');\r\n    }\r\n    function screen1(parent) {\r\n        html_p_text(parent, 'here is an example of division in math : a / b');\r\n        html_style_alternate_bold(parent, ['when a number ( like \"a\" ) is divided by another number ( like \"b\" ) , the first number is called the ', 'dividend']);\r\n        html_style_alternate_bold(parent, ['the second number is called the ', 'divisor']);\r\n        html_p_text(parent, 'for example in 7 / 4 the dividend is 7 and the divisor is 4');\r\n    }\r\n    function screen2(parent) {\r\n        html_p_text(parent, 'after the divisor divides the dividend , there is a quotient and a remainder');\r\n        html_p_text(parent, 'the following formula will give the answer to the division with a decimal point :');\r\n        html_p_text(parent, 'quotient + ( remainder / divisor )');\r\n        html_p_text(parent, 'for example 7 / 4 has a quotient of 1 and a remainder of 3');\r\n        html_p_text(parent, '1 + ( 3 / 4 ) = 1 + 0.75 = 1.75');\r\n    }\r\n    function screen3(parent) {\r\n        let divisor = 2;\r\n        html_p_text(parent, string_combine('in the table below are some quotient and remainders for a divisor of ', divisor));\r\n        html_p_text(parent, 'pay attention to the remainder');\r\n        html_p_text(parent, 'here is what the letters mean :');\r\n        let ul = html_ul(parent);\r\n        html_li_text(ul, 'a is the dividend');\r\n        html_li_text(ul, 'b is the divisor');\r\n        html_li_text(ul, 'q is the quotient');\r\n        html_li_text(ul, 'r is the remainder');\r\n        let table = html_element(parent, 'table');\r\n        html_style_width_full(table);\r\n        let thead = html_element(table, 'thead');\r\n        let tr_head = html_element(thead, 'tr');\r\n        let columns_head = ['a', 'b', 'a / b', 'q', 'r'];\r\n        each_index(columns_head, (c, c_index) => {\r\n            let th = html_element(tr_head, 'th');\r\n            html_inner_set(th, c);\r\n            let index_last = list_index_last(columns_head);\r\n            app_learn_code_style_rounded_padded(th);\r\n            let color;\r\n            if (equal(c_index, index_last)) {\r\n                color = '#FFEB3B';\r\n            } else {\r\n                color = '#29B6F6';\r\n            }\r\n            html_style_background_color(th, color);\r\n        });\r\n        let tbody = html_element(table, 'tbody');\r\n        each_index(range(11), (n, n_index) => {\r\n            let even = equal(mod(n_index, divisor), 0);\r\n            let tr_body = html_element(tbody, 'tr');\r\n            let quotient = n / divisor;\r\n            let columns_body = [n, divisor, quotient, floor(quotient), n % divisor];\r\n            let index_last = list_index_last(columns_body);\r\n            each_index(columns_body, (c, c_index) => {\r\n                let divisor = 2;\r\n                let td = html_element(tr_body, 'td');\r\n                html_inner_set(td, c);\r\n                html_style_centered(td);\r\n                app_learn_code_style_rounded_padded(td);\r\n                let color;\r\n                if (equal(c_index, index_last)) {\r\n                    color = even ? '#F9E79F' : '#F7DC6F';\r\n                } else {\r\n                    color = even ? '#D6EAF8' : '#AED6F1';\r\n                }\r\n                html_style_background_color(td, color);\r\n            });\r\n        });\r\n        html_hr(parent);\r\n        html_p_text(parent, 'did you notice how the remainder alternates between 0 and 1 ?');\r\n        html_p_text(parent, 'did you notice that when the number is even the remainder is 0 ?');\r\n        html_p_text(parent, 'did you notice that when the number is odd the remainder is 1 ?');\r\n        html_p_text(parent, 'the remainder can be used to check whether a number is even or odd');\r\n    }\r\n}\r\n","./public/src/lesson_multiply.mjs":"import {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nexport function lesson_multiply() {\r\n    const example_message = 'mutiplying two numbers';\r\n    const description = 'multiplication ( * )';\r\n    return lesson_simple(function () {\r\n        let a = integer_random_digit_single_positive();\r\n        let b = integer_random_digit_single_positive();\r\n        return `console.log(${a} * ${b});`;\r\n    }, example_before, description, example_message, []);\r\n    function example_before(parent) {\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['two numbers can be multiplied together using the asterisk ( ', '*', ' ) symbol']);\r\n    }\r\n}\r\n","./public/src/lesson_simple.mjs":"import {app_learn_code_unscramble} from \"./app_learn_code_unscramble.mjs\";\r\nimport {app_learn_code_quiz} from \"./app_learn_code_quiz.mjs\";\r\nimport {lesson_log_number_example} from \"./lesson_log_number_example.mjs\";\r\nimport {list_add} from \"./list_add.mjs\";\r\nimport {array_new} from \"./array_new.mjs\";\r\nimport {object_property_set} from \"./object_property_set.mjs\";\r\nimport {object_new} from \"./object_new.mjs\";\r\nexport function lesson_simple(source_get, example_before, description, example_message, screens_before) {\r\n    let v1 = object_new();\r\n    object_property_set(v1, 'description', description);\r\n    let v2 = array_new();\r\n    for (let s of screens_before) {\r\n        list_add(v2, s);\r\n    }\r\n    list_add(v2, lesson_log_number_example(source_get, example_message, example_before));\r\n    list_add(v2, app_learn_code_quiz(source_get));\r\n    list_add(v2, app_learn_code_unscramble(source_get));\r\n    object_property_set(v1, 'screens', v2);\r\n    return v1;\r\n}\r\n","./public/src/lesson_statements_three.mjs":"import {lesson_console_log_quiz} from \"./lesson_console_log_quiz.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nexport function lesson_statements_three() {\r\n    const description = 'three console.log statements';\r\n    const example_message = 'with three statements';\r\n    return lesson_simple(() => {\r\n        return `${lesson_console_log_quiz()}\r\n${lesson_console_log_quiz()}\r\n${lesson_console_log_quiz()}`;\r\n    }, example_before, description, example_message, []);\r\n    function example_before(parent) {\r\n        html_p_text(parent, 'if there are three statements , the first statement will run and then the second statement will run and then the third statement will run');\r\n    }\r\n}\r\n","./public/src/lesson_statements_two.mjs":"import {lesson_statements_two_quiz} from \"./lesson_statements_two_quiz.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nexport function lesson_statements_two() {\r\n    const description = 'two console.log statements';\r\n    const example_message = 'with two statements';\r\n    return lesson_simple(lesson_statements_two_quiz, example_before, description, example_message, []);\r\n    function example_before(parent) {\r\n        html_p_text(parent, 'statements are ran one after the other');\r\n        html_p_text(parent, 'if there are two statements , the first statement will run and then the second statement will run');\r\n    }\r\n}\r\n","./public/src/lesson_statements_two_quiz.mjs":"import {lesson_console_log_quiz} from \"./lesson_console_log_quiz.mjs\";\r\nexport function lesson_statements_two_quiz() {\r\n    return `${lesson_console_log_quiz()}\r\n${lesson_console_log_quiz()}`;\r\n}\r\n","./public/src/lesson_subtract.mjs":"import {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nexport function lesson_subtract() {\r\n    const example_message = 'subtraction ( - )';\r\n    const description = example_message;\r\n    return lesson_simple(function () {\r\n        let a = integer_random_digit_single_positive();\r\n        let b = integer_random_digit_single_positive();\r\n        return `console.log(${a} - ${b});`;\r\n    }, example_before, description, example_message, []);\r\n    function example_before(parent) {\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['one number can be subtracted from another number using the minus ( ', '-', ' ) sign']);\r\n    }\r\n}\r\n","./public/src/lesson_variable.mjs":"import {lesson_variable_code_get} from \"./lesson_variable_code_get.mjs\";\r\nimport {app_learn_code_random_value} from \"./app_learn_code_random_value.mjs\";\r\nimport {app_learn_code_random_identifier} from \"./app_learn_code_random_identifier.mjs\";\r\nimport {html_li} from \"./html_li.mjs\";\r\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {html_style_monospace} from \"./html_style_monospace.mjs\";\r\nimport {html_p} from \"./html_p.mjs\";\r\nimport {html_style_alternate} from \"./html_style_alternate.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {noop} from \"./noop.mjs\";\r\nimport {html_style_bold} from \"./html_style_bold.mjs\";\r\nimport {html_ul} from \"./html_ul.mjs\";\r\nimport {html_hr} from \"./html_hr.mjs\";\r\nexport function lesson_variable() {\r\n    let example_message = 'outputting a variable to the console';\r\n    let description = example_message;\r\n    return lesson_simple(function () {\r\n        let name = app_learn_code_random_identifier();\r\n        let value = app_learn_code_random_value();\r\n        return lesson_variable_code_get(name, value);\r\n    }, example_before, description, example_message, [screen1, screen2, screen3, screen4, screen5, screen6]);\r\n    function example_before(parent) {}\r\n    function screen1(parent) {\r\n        html_style_alternate(parent, html_p, [noop, html_style_bold], ['in javascript , ', 'variables', ' have a ', 'name', ' and a ', 'value']);\r\n        html_p_text(parent, 'variables can be given a value using their name');\r\n        html_p_text(parent, 'the value given to a variable can be used later using the name of the variable');\r\n    }\r\n    function screen2(parent) {\r\n        html_p_text(parent, 'to use a variable , javascript must know about the variable');\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['to tell javascript about a variable named ', 'variable_name', ' we can write a statement using ', 'let', ' like this :']);\r\n        app_learn_code_code_part_contrast(parent, 'let variable_name;');\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['because this is a statement , it ends in semicolon ( ', ';', ' )']);\r\n    }\r\n    function screen3(parent) {\r\n        html_p_text(parent, 'in javascript , variable names can contain :');\r\n        let ul = html_ul(parent);\r\n        html_style_alternate(ul, html_li, [noop, html_style_monospace], ['letters ( ', 'a', ' , ', 'b', ' , ', 'c', ' , ... , ', 'z', ' and ', 'A', ' , ', 'B', ' , ', 'C', ' , ... , ', 'Z', ' )']);\r\n        html_style_alternate(ul, html_li, [noop, html_style_monospace], ['digits ( ', '0', ' , ', '1', ' , ', '2', ' , ', '3', ' , ... , ', '9', ' )']);\r\n        html_style_alternate(ul, html_li, [noop, html_style_monospace], ['underscores ( ', '_', ' )']);\r\n        html_style_alternate(ul, html_li, [noop, html_style_monospace], ['dollar signs ( ', '$', ' )']);\r\n        html_p_text(parent, 'here are some examples of valid variable names :');\r\n        app_learn_code_code_part_contrast(parent, 'y');\r\n        app_learn_code_code_part_contrast(parent, 'Y');\r\n        app_learn_code_code_part_contrast(parent, '_');\r\n        app_learn_code_code_part_contrast(parent, '$');\r\n        app_learn_code_code_part_contrast(parent, '$$');\r\n        app_learn_code_code_part_contrast(parent, '__$');\r\n        app_learn_code_code_part_contrast(parent, 'd8$_');\r\n    }\r\n    function screen4(parent) {\r\n        html_p_text(parent, 'variable names cannot begin with a number');\r\n        html_hr(parent);\r\n        html_p_text(parent, 'in a variable name , the case of the letters matter');\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['for example ', 'JESUS', ' , ', 'jesus', ' and ', 'Jesus', ' are all different variable names , even though they contain the same letters']);\r\n        html_hr(parent);\r\n        html_p_text(parent, 'some words cannot be used as variables');\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['for example ', 'if', ' , ', 'else', ' , ', 'for', ' and ', 'while', ' cannot be used as variable names because they already have meaning in javascript']);\r\n    }\r\n    function screen5(parent) {\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['remember the code from earlier that told javascript about ', 'variable_name', ' :']);\r\n        app_learn_code_code_part_contrast(parent, 'let variable_name;');\r\n        html_p_text(parent, 'after telling javascript about a variable , eventually variables should be given a value');\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['to give a variable named ', 'variable_name', ' a value of ', '123', ' write :']);\r\n        app_learn_code_code_part_contrast(parent, 'variable_name = 123;');\r\n        html_p_text(parent, 'in math x = y says x and y are equal');\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['in javascript , ', '=', ' does not check if two things are equal']);\r\n        html_style_alternate(parent, html_p, [noop, html_style_monospace], ['instead , ', '=', ' can be used to give a variable a value']);\r\n    }\r\n    function screen6(parent) {\r\n        html_p_text(parent, 'here was the code from earlier :');\r\n        app_learn_code_code_part_contrast(parent, 'let variable_name;');\r\n        app_learn_code_code_part_contrast(parent, 'variable_name = 123;');\r\n        html_p_text(parent, 'and now either of the following will output 123 :');\r\n        app_learn_code_code_part_contrast(parent, 'console.log(123);');\r\n        app_learn_code_code_part_contrast(parent, 'console.log(variable_name);');\r\n    }\r\n}\r\n","./public/src/lesson_variables_declare_shorthand.mjs":"import {list_sort} from \"./list_sort.mjs\";\r\nimport {js_code_statement_let_assign_multiple} from \"./js_code_statement_let_assign_multiple.mjs\";\r\nimport {call_multiple} from \"./call_multiple.mjs\";\r\nimport {app_learn_code_log_add} from \"./app_learn_code_log_add.mjs\";\r\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\r\nimport {js_code_statement_let_assign} from \"./js_code_statement_let_assign.mjs\";\r\nimport {html_li_text} from \"./html_li_text.mjs\";\r\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {identity} from \"./identity.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {list_sort_string} from \"./list_sort_string.mjs\";\r\nimport {html_ul} from \"./html_ul.mjs\";\r\nimport {app_learn_code_random_identifiers} from \"./app_learn_code_random_identifiers.mjs\";\r\nexport function lesson_variables_declare_shorthand() {\r\n    let description = 'declaring and assigning multiple variables in a single statement';\r\n    let example_message = description;\r\n    let count = 2;\r\n    return lesson_simple(function () {\r\n        let values = call_multiple(integer_random_digit_single_positive, count);\r\n        list_sort(values, identity);\r\n        let names = app_learn_code_random_identifiers(count);\r\n        list_sort_string(names, identity);\r\n        let [name_a, name_b] = names;\r\n        return `${js_code_statement_let_assign_multiple(names, values)}\r\n${app_learn_code_log_add(name_a, name_b)}`;\r\n    }, example_before, description, example_message, [screen1, screen2]);\r\n    function screen1(parent) {\r\n        html_p_text(parent, 'in this lesson :');\r\n        let ul = html_ul(parent);\r\n        html_li_text(ul, 'the declared variables will be ordered alphabetically');\r\n        html_li_text(ul, 'the numbers will be assigned from smallest to largest');\r\n    }\r\n    function screen2(parent) {\r\n        let values = call_multiple(integer_random_digit_single_positive, count);\r\n        list_sort(values, identity);\r\n        let [a, b] = values;\r\n        let names = app_learn_code_random_identifiers(count);\r\n        list_sort_string(names, identity);\r\n        let [name_a, name_b] = names;\r\n        html_p_text(parent, 'here is some code :');\r\n        app_learn_code_code_part_contrast(parent, `${js_code_statement_let_assign(name_a, a)}\r\n${js_code_statement_let_assign(name_b, b)}`);\r\n        html_p_text(parent, 'that code can be shortened to the following :');\r\n        app_learn_code_code_part_contrast(parent, js_code_statement_let_assign_multiple(names, values));\r\n    }\r\n    function example_before(parent) {}\r\n}\r\n","./public/src/lesson_variables_three.mjs":"import {js_code_statement_let_assign_multiple} from \"./js_code_statement_let_assign_multiple.mjs\";\r\nimport {list_sort} from \"./list_sort.mjs\";\r\nimport {app_learn_code_log_add_3} from \"./app_learn_code_log_add_3.mjs\";\r\nimport {call_multiple} from \"./call_multiple.mjs\";\r\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\r\nimport {html_li_text} from \"./html_li_text.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {identity} from \"./identity.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {list_sort_string} from \"./list_sort_string.mjs\";\r\nimport {html_ul} from \"./html_ul.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nimport {app_learn_code_random_identifiers} from \"./app_learn_code_random_identifiers.mjs\";\r\nexport function lesson_variables_three() {\r\n    let description = 'three variables';\r\n    let example_message = string_combine('with ', description);\r\n    return lesson_simple(function () {\r\n        let count = 3;\r\n        let values = call_multiple(integer_random_digit_single_positive, count);\r\n        list_sort(values, identity);\r\n        let names = app_learn_code_random_identifiers(count);\r\n        list_sort_string(names, identity);\r\n        let [name_a, name_b, name_c] = names;\r\n        return `${js_code_statement_let_assign_multiple(names, values)}\r\n${app_learn_code_log_add_3(name_a, name_b, name_c)}`;\r\n    }, example_before, description, example_message, [screen1]);\r\n    function example_before(parent) {\r\n        html_p_text(parent, 'a program can have more than two variables');\r\n    }\r\n    function screen1(parent) {\r\n        html_p_text(parent, 'in this lesson :');\r\n        let ul = html_ul(parent);\r\n        html_li_text(ul, 'the declared variables will be ordered alphabetically');\r\n        html_li_text(ul, 'the numbers will be assigned from smallest to largest');\r\n    }\r\n}\r\n","./public/src/lesson_variables_two.mjs":"import {call_multiple} from \"./call_multiple.mjs\";\r\nimport {app_learn_code_log_add} from \"./app_learn_code_log_add.mjs\";\r\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\r\nimport {js_code_statement_let_assign} from \"./js_code_statement_let_assign.mjs\";\r\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\r\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {identity} from \"./identity.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {list_sort_string} from \"./list_sort_string.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nimport {js_code_statement_let} from \"./js_code_statement_let.mjs\";\r\nimport {list_sort} from \"./list_sort.mjs\";\r\nimport {app_learn_code_random_identifiers} from \"./app_learn_code_random_identifiers.mjs\";\r\nexport function lesson_variables_two() {\r\n    let a = 'a';\r\n    let b = 'b';\r\n    let description = 'two variables';\r\n    let example_message = string_combine('with ', description);\r\n    return lesson_simple(function () {\r\n        let count = 2;\r\n        let values = call_multiple(integer_random_digit_single_positive, count);\r\n        list_sort(values, identity);\r\n        let [v_a, v_b] = values;\r\n        let names = app_learn_code_random_identifiers(count);\r\n        list_sort_string(names, identity);\r\n        let [name_a, name_b] = names;\r\n        return `${js_code_statement_let_assign(name_a, v_a)}\r\n${js_code_statement_let_assign(name_b, v_b)}\r\n${app_learn_code_log_add(name_a, name_b)}`;\r\n    }, example_before, description, example_message, [screen1, screen2]);\r\n    function screen1(parent) {\r\n        html_p_text(parent, 'a program can have more than one variable');\r\n        html_p_text(parent, 'in this lesson the declared variables will be ordered alphabetically');\r\n        html_p_text(parent, 'for example in the alphabet , A comes before B');\r\n        html_style_alternate_monospace(parent, ['therefore varable ', 'a', ' will come before variable ', 'b', ' , like this :']);\r\n        app_learn_code_code_part_contrast(parent, `${js_code_statement_let(a)}\r\n${js_code_statement_let(b)}`);\r\n        html_style_alternate_monospace(parent, ['', 'b', ' will not come before ', 'a']);\r\n        html_p_text(parent, 'it will not be like this :');\r\n        app_learn_code_code_part_contrast(parent, `${js_code_statement_let(b)}\r\n${js_code_statement_let(a)}`);\r\n        html_p_text(parent, 'this should make quizzing easier');\r\n        html_p_text(parent, 'however javascript allows variables to be declared either way');\r\n    }\r\n    function screen2(parent) {\r\n        html_p_text(parent, 'in this lesson the numbers will be assigned from smallest to largest');\r\n        html_p_text(parent, 'for example 1 is smaller than 2');\r\n        html_style_alternate_monospace(parent, ['therefore the assignment of ', '1', ' will come before the assignment of ', '2', ' , like this :']);\r\n        app_learn_code_code_part_contrast(parent, `${js_code_statement_let_assign(a, '1')}\r\n${js_code_statement_let_assign(b, '2')}`);\r\n        html_p_text(parent, 'it will not be like this :');\r\n        app_learn_code_code_part_contrast(parent, `${js_code_statement_let_assign(a, '2')}\r\n${js_code_statement_let_assign(b, '1')}`);\r\n        html_p_text(parent, 'this should make quizzing easier');\r\n        html_p_text(parent, 'however javascript allows numbers to be assigned either way');\r\n    }\r\n    function example_before(parent) {}\r\n}\r\n","./public/src/lesson_variable_binary.mjs":"import {lesson_divide_numbers} from \"./lesson_divide_numbers.mjs\";\r\nimport {list_join} from \"./list_join.mjs\";\r\nimport {call_multiple} from \"./call_multiple.mjs\";\r\nimport {integer_random_digit_single_positive} from \"./integer_random_digit_single_positive.mjs\";\r\nimport {js_code_statement_let_assign} from \"./js_code_statement_let_assign.mjs\";\r\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\r\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\r\nimport {app_learn_code_random_identifier} from \"./app_learn_code_random_identifier.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {random_50_50} from \"./random_50_50.mjs\";\r\nimport {list_random_item} from \"./list_random_item.mjs\";\r\nimport {string_combine} from \"./string_combine.mjs\";\r\nimport {list_includes} from \"./list_includes.mjs\";\r\nexport function lesson_variable_binary() {\r\n    let description = 'variable assigned from the output of a process';\r\n    let example_message = string_combine('with a ', description);\r\n    return lesson_simple(function () {\r\n        let operators;\r\n        if (random_50_50()) {\r\n            operators = ['+', '-', '*', '/'];\r\n        } else {\r\n            operators = ['<', '<=', '>', '>=', '===', '!=='];\r\n        }\r\n        let operator = list_random_item(operators);\r\n        let values = call_multiple(integer_random_digit_single_positive, 2);\r\n        let [a, b] = values;\r\n        let operators_equality = ['===', '!=='];\r\n        if (list_includes(operators_equality, operator) && random_50_50()) {\r\n            b = a;\r\n        }\r\n        if (operator === '/') {\r\n            let {dividend, divisor} = lesson_divide_numbers();\r\n            a = dividend;\r\n            b = divisor;\r\n        }\r\n        let name = app_learn_code_random_identifier();\r\n        let statements = [js_code_statement_let_assign(name, `${a} ${operator} ${b}`), app_learn_code_log(name)];\r\n        return list_join(statements, '\\n');\r\n    }, example_before, description, example_message, []);\r\n    function example_before(parent) {\r\n        html_style_alternate_monospace(parent, ['a variable can be assigned the output of : ', '<', ' ', '<=', ' ', '>', ' ', '>=', ' ', '===', ' ', '!==', ' ', '+', ' ', '-', ' ', '*', ' or ', '/']);\r\n    }\r\n}\r\n","./public/src/lesson_variable_change.mjs":"import {app_learn_code_unique} from \"./app_learn_code_unique.mjs\";\r\nimport {string_delimit_if} from \"./string_delimit_if.mjs\";\r\nimport {string_to} from \"./string_to.mjs\";\r\nimport {js_code_statement_assign} from \"./js_code_statement_assign.mjs\";\r\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\r\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\r\nimport {lesson_variable_code_get} from \"./lesson_variable_code_get.mjs\";\r\nimport {app_learn_code_random_value} from \"./app_learn_code_random_value.mjs\";\r\nimport {app_learn_code_random_identifier} from \"./app_learn_code_random_identifier.mjs\";\r\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nexport function lesson_variable_change() {\r\n    let example_message = 'changing a variable and logging to the console before and after the change';\r\n    let description = example_message;\r\n    return lesson_simple(function () {\r\n        let name = app_learn_code_random_identifier();\r\n        let value = app_learn_code_random_value();\r\n        let value2 = app_learn_code_unique(app_learn_code_random_value, [value]);\r\n        return `${lesson_variable_code_get(name, value)}\r\n${js_code_statement_assign(name, value2)}\r\n${app_learn_code_log(name)}`;\r\n    }, example_before, description, example_message, [screen1]);\r\n    function example_before(parent) {}\r\n    function screen1(parent) {\r\n        let name = app_learn_code_random_identifier();\r\n        let value = app_learn_code_random_value();\r\n        let value_string = string_delimit_if(value);\r\n        value_string = string_to(value);\r\n        html_style_alternate_monospace(parent, ['here is code that will set the value of a variable named ', name, ' to a value of ', value, ' :']);\r\n        app_learn_code_code_part_contrast(parent, js_code_statement_assign(name, value));\r\n        html_style_alternate_monospace(parent, ['if ', name, ' already has a value , and ', name, ' does not already have a value of ', value, ' , then the value of ', name, ' will be changed to ', value]);\r\n        html_style_alternate_monospace(parent, ['', '=', ' can be used to change the value of a variable']);\r\n    }\r\n}\r\n","./public/src/lesson_variable_change_2.mjs":"import {js_code_statement_let_assign} from \"./js_code_statement_let_assign.mjs\";\r\nimport {app_learn_code_unique} from \"./app_learn_code_unique.mjs\";\r\nimport {js_code_statement_assign} from \"./js_code_statement_assign.mjs\";\r\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\r\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\r\nimport {app_learn_code_random_value} from \"./app_learn_code_random_value.mjs\";\r\nimport {app_learn_code_random_identifier} from \"./app_learn_code_random_identifier.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nexport function lesson_variable_change_2() {\r\n    let example_message = 'changing a variable and logging to the console after the change';\r\n    let description = example_message;\r\n    return lesson_simple(function () {\r\n        let name = app_learn_code_random_identifier();\r\n        let value = app_learn_code_random_value();\r\n        let value2 = app_learn_code_unique(app_learn_code_random_value, [value]);\r\n        return `${js_code_statement_let_assign(name, value)}\r\n${js_code_statement_assign(name, value2)}\r\n${app_learn_code_log(name)}`;\r\n    }, example_before, description, example_message, [screen1]);\r\n    function example_before(parent) {}\r\n    function screen1(parent) {\r\n        html_style_alternate_monospace(parent, ['every time a variable is assigned a different value , the value of the variable changes']);\r\n        html_style_alternate_monospace(parent, ['', 'console.log(variable_name);', ' will output the most recent and last value of ', 'variable_name']);\r\n        html_style_alternate_monospace(parent, ['if ', 'variable_name', ' has had multiple assignments , ', 'console.log(variable_name);', ' will not output the previous values of ', 'variable_name']);\r\n    }\r\n}\r\n","./public/src/lesson_variable_code_get.mjs":"import {js_code_statement_let} from \"./js_code_statement_let.mjs\";\r\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\r\nimport {js_code_statement_assign} from \"./js_code_statement_assign.mjs\";\r\nexport function lesson_variable_code_get(name, value) {\r\n    return `${js_code_statement_let(name)}\r\n${js_code_statement_assign(name, value)}\r\n${app_learn_code_log(name)}`;\r\n}\r\n","./public/src/lesson_variable_log_twice.mjs":"import {app_learn_code_code} from \"./app_learn_code_code.mjs\";\r\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\r\nimport {lesson_statements_two_quiz} from \"./lesson_statements_two_quiz.mjs\";\r\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\r\nimport {lesson_variable_code_get} from \"./lesson_variable_code_get.mjs\";\r\nimport {app_learn_code_random_value} from \"./app_learn_code_random_value.mjs\";\r\nimport {app_learn_code_random_identifier} from \"./app_learn_code_random_identifier.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nexport function lesson_variable_log_twice() {\r\n    let example_message = 'outputting a variable to the console twice';\r\n    let description = example_message;\r\n    return lesson_simple(function () {\r\n        let name = app_learn_code_random_identifier();\r\n        let value = app_learn_code_random_value();\r\n        return `${lesson_variable_code_get(name, value)}\r\n${app_learn_code_log(name)}`;\r\n    }, example_before, description, example_message, [screen1]);\r\n    function example_before(parent) {}\r\n    function screen1(parent) {\r\n        html_style_alternate_monospace(parent, ['remember , here is code that outputs twice because there are two ', 'console.log', ' statements :']);\r\n        app_learn_code_code(parent, lesson_statements_two_quiz());\r\n    }\r\n}\r\n","./public/src/lesson_variable_shorthand.mjs":"import {html_style_alternate_bold} from \"./html_style_alternate_bold.mjs\";\r\nimport {js_code_statement_let_assign} from \"./js_code_statement_let_assign.mjs\";\r\nimport {string_delimit_if} from \"./string_delimit_if.mjs\";\r\nimport {string_to} from \"./string_to.mjs\";\r\nimport {js_code_statement_assign} from \"./js_code_statement_assign.mjs\";\r\nimport {html_style_alternate_monospace} from \"./html_style_alternate_monospace.mjs\";\r\nimport {app_learn_code_log} from \"./app_learn_code_log.mjs\";\r\nimport {app_learn_code_random_value} from \"./app_learn_code_random_value.mjs\";\r\nimport {app_learn_code_random_identifier} from \"./app_learn_code_random_identifier.mjs\";\r\nimport {app_learn_code_code_part_contrast} from \"./app_learn_code_code_part_contrast.mjs\";\r\nimport {html_p_text} from \"./html_p_text.mjs\";\r\nimport {lesson_simple} from \"./lesson_simple.mjs\";\r\nimport {html_hr} from \"./html_hr.mjs\";\r\nimport {js_code_statement_let} from \"./js_code_statement_let.mjs\";\r\nexport function lesson_variable_shorthand() {\r\n    let example_message = 'declaring and assigning a variable in a single statement';\r\n    let description = example_message;\r\n    return lesson_simple(function () {\r\n        let name = app_learn_code_random_identifier();\r\n        let value = app_learn_code_random_value();\r\n        return `${js_code_statement_let_assign(name, value)}\r\n${app_learn_code_log(name)}`;\r\n    }, example_before, description, example_message, [screen1]);\r\n    function example_before(parent) {}\r\n    function screen1(parent) {\r\n        let name = app_learn_code_random_identifier();\r\n        let value = app_learn_code_random_value();\r\n        let value_string = string_delimit_if(value);\r\n        value_string = string_to(value);\r\n        html_style_alternate_monospace(parent, ['remember the code to tell javascript about a variable named ', name, ' :']);\r\n        app_learn_code_code_part_contrast(parent, js_code_statement_let(name));\r\n        html_style_alternate_bold(parent, ['this is called ', 'declaring', ' a variable']);\r\n        html_hr(parent);\r\n        html_style_alternate_monospace(parent, ['remember the code to give ', name, ' a value of ', value, ' :']);\r\n        app_learn_code_code_part_contrast(parent, js_code_statement_assign(name, value));\r\n        html_style_alternate_bold(parent, ['this is called ', 'assigning', ' a variable a value']);\r\n        html_hr(parent);\r\n        html_p_text(parent, 'in javascript it is possible to declare and assign a variable in a single statement , like this :');\r\n        app_learn_code_code_part_contrast(parent, js_code_statement_let_assign(name, value));\r\n    }\r\n}\r\n","./public/src/less_than.mjs":"export function less_than(n, b_split_length) {\r\n    return n < b_split_length;\r\n}\r\n","./public/src/less_than_equal.mjs":"export function less_than_equal(a, b) {\r\n    return a <= b;\r\n}\r\n","./public/src/list_1.mjs":"export function list_1(item) {\r\n    return [item];\r\n}\r\n","./public/src/list_add.mjs":"export function list_add(list, item) {\r\n    list.push(item);\r\n}\r\n","./public/src/list_adder.mjs":"import {list_add} from \"./list_add.mjs\";\r\nexport function list_adder(lambda) {\r\n    let result = [];\r\n    lambda(item => list_add(result, item));\r\n    return result;\r\n}\r\n","./public/src/list_adder_async.mjs":"import {list_add} from \"./list_add.mjs\";\r\nexport async function list_adder_async(lambda) {\r\n    let result = [];\r\n    await lambda(item => list_add(result, item));\r\n    return result;\r\n}\r\n","./public/src/list_adder_unique.mjs":"import {list_includes} from './list_includes.mjs';\r\nimport {list_add} from './list_add.mjs';\r\nexport function list_adder_unique(lambda) {\r\n    let result = [];\r\n    lambda(item => {\r\n        if (!list_includes(result, item)) {\r\n            list_add(result, item);\r\n        }\r\n    });\r\n    return result;\r\n}\r\n","./public/src/list_add_beginning.mjs":"import {list_insert} from \"./list_insert.mjs\";\r\nexport function list_add_beginning(list, element) {\r\n    list_insert(list, 0, element);\r\n}\r\n","./public/src/list_add_multiple.mjs":"import {list_add} from \"./list_add.mjs\";\r\nexport function list_add_multiple(list, other) {\r\n    for (let s of other) {\r\n        list_add(list, s);\r\n    }\r\n}\r\n","./public/src/list_any.mjs":"export function list_any(list, predicate) {\r\n    for (let element of list) {\r\n        if (predicate(element)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n","./public/src/list_concat.mjs":"export function list_concat(a, b) {\r\n    return a.concat(b);\r\n}\r\n","./public/src/list_concat_multiple.mjs":"import {list_add_multiple} from \"./list_add_multiple.mjs\";\r\nexport function list_concat_multiple(lists) {\r\n    let result = [];\r\n    for (let list of lists) {\r\n        list_add_multiple(result, list);\r\n    }\r\n    return result;\r\n}\r\n","./public/src/list_copy.mjs":"import {list_skip} from \"./list_skip.mjs\";\r\nexport function list_copy(list) {\r\n    return list_skip(list, 0);\r\n}\r\n","./public/src/list_counter_async.mjs":"export async function list_counter_async(lambda) {\r\n    let result = 0;\r\n    await lambda(() => {\r\n        result = result + 1;\r\n        return result;\r\n    });\r\n    return result;\r\n}\r\n","./public/src/list_difference.mjs":"import {list_adder} from \"./list_adder.mjs\";\r\nimport {list_includes} from \"./list_includes.mjs\";\r\nexport function list_difference(a, b) {\r\n    return list_adder(la => {\r\n        for (let element of a) {\r\n            if (!list_includes(b, element)) {\r\n                la(element);\r\n            }\r\n        }\r\n    });\r\n}\r\n","./public/src/list_empty_is.mjs":"import {list_length} from \"./list_length.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function list_empty_is(filtered) {\r\n    return equal(list_length(filtered), 0);\r\n}\r\n","./public/src/list_empty_not_is.mjs":"import {list_empty_is} from \"./list_empty_is.mjs\";\r\nexport function list_empty_not_is(remaining) {\r\n    return !list_empty_is(remaining);\r\n}\r\n","./public/src/list_equal.mjs":"import {list_get} from \"./list_get.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {list_length} from \"./list_length.mjs\";\r\nimport {range} from \"./range.mjs\";\r\nexport function list_equal(a, b) {\r\n    let a_length = list_length(a);\r\n    let b_length = list_length(b);\r\n    if (!equal(a_length, b_length)) {\r\n        return false;\r\n    }\r\n    for (let i of range(a_length)) {\r\n        let a_i = list_get(a, i);\r\n        let b_i = list_get(b, i);\r\n        if (!equal(a_i, b_i)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","./public/src/list_filter.mjs":"export function list_filter(list, filter) {\r\n    return list.filter(item => filter(item));\r\n}\r\n","./public/src/list_first.mjs":"import {list_get} from './list_get.mjs';\r\nexport function list_first(list) {\r\n    return list_get(list, 0);\r\n}\r\n","./public/src/list_get.mjs":"import {assert} from \"./assert.mjs\";\r\nimport {list_length} from \"./list_length.mjs\";\r\nimport {number_less_than} from \"./number_less_than.mjs\";\r\nexport function list_get(list, index) {\r\n    assert(number_less_than, [index, list_length(list)]);\r\n    return list[index];\r\n}\r\n","./public/src/list_get_end.mjs":"import {list_get} from \"./list_get.mjs\";\r\nimport {list_index_last} from \"./list_index_last.mjs\";\r\nexport function list_get_end(list, index) {\r\n    let index_end = list_index_last(list);\r\n    let index_actual = index_end - index;\r\n    return list_get(list, index_actual);\r\n}\r\n","./public/src/list_includes.mjs":"export function list_includes(list, item) {\r\n    return list.includes(item);\r\n}\r\n","./public/src/list_includes_multiple.mjs":"import {list_includes} from './list_includes.mjs';\r\nexport function list_includes_multiple(list, items_to_include) {\r\n    for (let item of items_to_include) {\r\n        if (!list_includes(list, item)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","./public/src/list_includes_not.mjs":"import {list_includes} from \"./list_includes.mjs\";\r\nexport function list_includes_not(existing, value2) {\r\n    return !list_includes(existing, value2);\r\n}\r\n","./public/src/list_index.mjs":"import {number_less_than} from \"./number_less_than.mjs\";\r\nimport {assert_not} from \"./assert_not.mjs\";\r\nexport function list_index(list, element) {\r\n    let index = list.indexOf(element);\r\n    assert_not(number_less_than, [index, 0]);\r\n    return index;\r\n}\r\n","./public/src/list_index_first.mjs":"export function list_index_first() {\r\n    return 0;\r\n}\r\n","./public/src/list_index_last.mjs":"import {list_length} from \"./list_length.mjs\";\r\nexport function list_index_last(input) {\r\n    let length = list_length(input);\r\n    let index_last = length - 1;\r\n    return index_last;\r\n}\r\n","./public/src/list_insert.mjs":"export function list_insert(list, index, element) {\r\n    list.splice(index, 0, element);\r\n}\r\n","./public/src/list_intersect.mjs":"import {list_adder} from \"./list_adder.mjs\";\r\nimport {list_includes} from \"./list_includes.mjs\";\r\nexport function list_intersect(a, b) {\r\n    return list_adder(la => {\r\n        for (let element of a) {\r\n            if (list_includes(b, element)) {\r\n                la(element);\r\n            }\r\n        }\r\n    });\r\n}\r\n","./public/src/list_is.mjs":"export function list_is(candidate) {\r\n    return Array.isArray(candidate);\r\n}\r\n","./public/src/list_join.mjs":"export function list_join(list, join_by) {\r\n    return list.join(join_by);\r\n}\r\n","./public/src/list_join_comma.mjs":"import {list_join} from \"./list_join.mjs\";\r\nexport function list_join_comma(list) {\r\n    return list_join(list, ',');\r\n}\r\n","./public/src/list_join_newine.mjs":"import {list_join} from \"./list_join.mjs\";\r\nexport function list_join_newine(lines) {\r\n    return list_join(lines, '\\n');\r\n}\r\n","./public/src/list_join_newline.mjs":"import {list_join} from \"./list_join.mjs\";\r\nexport function list_join_newline(lines) {\r\n    return list_join(lines, '\\n');\r\n}\r\n","./public/src/list_last.mjs":"import {list_index_last} from \"./list_index_last.mjs\";\r\nimport {list_get} from \"./list_get.mjs\";\r\nexport function list_last(list) {\r\n    return list_get(list, list_index_last(list));\r\n}\r\n","./public/src/list_length.mjs":"export function list_length(list) {\r\n    return list.length;\r\n}\r\n","./public/src/list_length_1.mjs":"import {list_length} from \"./list_length.mjs\";\r\nimport {equal_1} from \"./equal_1.mjs\";\r\nexport function list_length_1(list) {\r\n    let length = list_length(list);\r\n    return equal_1(length);\r\n}\r\n","./public/src/list_map.mjs":"export function list_map(list, mapper) {\r\n    return list.map(element => mapper(element));\r\n}\r\n","./public/src/list_map_async.mjs":"import {list_add} from \"./list_add.mjs\";\r\nexport async function list_map_async(list, mapper) {\r\n    let result = [];\r\n    for (let l of list) {\r\n        let mapped = mapper(l);\r\n        let waited = await mapped;\r\n        list_add(result, waited);\r\n    }\r\n    return result;\r\n}\r\n","./public/src/list_pop.mjs":"export function list_pop(list) {\r\n    return list.pop();\r\n}\r\n","./public/src/list_random_index.mjs":"export function list_random_index(list) {\r\n    return Math.floor(Math.random() * list.length);\r\n}\r\n","./public/src/list_random_item.mjs":"import {list_random_index} from \"./list_random_index.mjs\";\r\nexport function list_random_item(list) {\r\n    return list[list_random_index(list)];\r\n}\r\n","./public/src/list_remove.mjs":"import {assert_not} from \"./assert_not.mjs\";\r\nimport {list_includes} from \"./list_includes.mjs\";\r\nimport {list_index} from \"./list_index.mjs\";\r\nimport {number_less_than} from \"./number_less_than.mjs\";\r\nexport function list_remove(list, element) {\r\n    let index = list_index(list, element);\r\n    assert_not(number_less_than, [index, 0]);\r\n    list.splice(index, 1);\r\n    assert_not(list_includes, [list, element]);\r\n}\r\n","./public/src/list_reverse.mjs":"export function list_reverse(list) {\r\n    list.reverse();\r\n}\r\n","./public/src/list_scramble.mjs":"import {list_set} from \"./list_set.mjs\";\r\nimport {list_get} from \"./list_get.mjs\";\r\nimport {integer_random} from \"./integer_random.mjs\";\r\nimport {list_length} from \"./list_length.mjs\";\r\nimport {range} from \"./range.mjs\";\r\nimport {list_index_last} from \"./list_index_last.mjs\";\r\nexport function list_scramble(scrambled) {\r\n    let mapped_index_last = list_index_last(scrambled);\r\n    for (let i of range(list_length(scrambled))) {\r\n        let j = integer_random(i, mapped_index_last);\r\n        let temp = list_get(scrambled, j);\r\n        list_set(scrambled, j, list_get(scrambled, i));\r\n        list_set(scrambled, i, temp);\r\n    }\r\n}\r\n","./public/src/list_set.mjs":"export function list_set(list, index, value) {\r\n    list[index] = value;\r\n}\r\n","./public/src/list_single.mjs":"import {assert} from './assert.mjs';\r\nimport {list_first} from './list_first.mjs';\r\nimport {list_length_1} from './list_length_1.mjs';\r\nexport function list_single(list) {\r\n    assert(list_length_1, [list]);\r\n    return list_first(list);\r\n}\r\n","./public/src/list_skip.mjs":"export function list_skip(list, index) {\r\n    return list.slice(index);\r\n}\r\n","./public/src/list_slice.mjs":"export function list_slice(list, start, end) {\r\n    return list.slice(start, end);\r\n}\r\n","./public/src/list_sort.mjs":"export function list_sort(list, element_mapper) {\r\n    list.sort((a, b) => element_mapper(a) - element_mapper(b));\r\n}\r\n","./public/src/list_sort_string.mjs":"export function list_sort_string(list, element_mapper) {\r\n    list.sort((a, b) => element_mapper(a).localeCompare(element_mapper(b)));\r\n}\r\n","./public/src/list_sum.mjs":"import {add} from \"./add.mjs\";\r\nexport function list_sum(lambda) {\r\n    let result = 0;\r\n    lambda(item => result = add(result, item));\r\n    return result;\r\n}\r\n","./public/src/list_take.mjs":"export function list_take(list, count) {\r\n    return list.slice(0, count);\r\n}\r\n","./public/src/list_unique.mjs":"import {list_adder_unique} from \"./list_adder_unique.mjs\";\r\nexport function list_unique(list) {\r\n    return list_adder_unique(la => {\r\n        for (let e of list) {\r\n            la(e);\r\n        }\r\n    });\r\n}\r\n","./public/src/mod.mjs":"export function mod(index, pattern_length) {\r\n    return index % pattern_length;\r\n}\r\n","./public/src/multiply.mjs":"export function multiply(a, b) {\r\n    return a * b;\r\n}\r\n","./public/src/newline.mjs":"export function newline() {\r\n    return '\\n';\r\n}\r\n","./public/src/noop.mjs":"export function noop() {}\r\n","./public/src/npm_install.mjs":"import {command_line} from './command_line.mjs';\r\nexport async function npm_install(package_name) {\r\n    return await command_line(`npm install ${package_name}@latest`);\r\n}\r\n","./public/src/null_is.mjs":"import {equal} from \"./equal.mjs\";\r\nexport function null_is(candidate) {\r\n    return equal(candidate, null);\r\n}\r\n","./public/src/null_not_is.mjs":"import {null_is} from \"./null_is.mjs\";\r\nexport function null_not_is(m) {\r\n    return !null_is(m);\r\n}\r\n","./public/src/number_is.mjs":"export function number_is(value) {\r\n    return typeof value === 'number';\r\n}\r\n","./public/src/number_less_than.mjs":"export function number_less_than(a, b) {\r\n    return a < b;\r\n}\r\n","./public/src/number_string_to.mjs":"export function number_string_to(value, base) {\r\n    return value.toString(base);\r\n}\r\n","./public/src/object_copy.mjs":"import {object_merge} from \"./object_merge.mjs\";\r\nexport function object_copy(object) {\r\n    let copy = {};\r\n    object_merge(copy, object);\r\n    return copy;\r\n}\r\n","./public/src/object_merge.mjs":"import {object_properties} from \"./object_properties.mjs\";\r\nimport {object_property_get} from \"./object_property_get.mjs\";\r\nimport {object_property_set} from \"./object_property_set.mjs\";\r\nexport function object_merge(to, from) {\r\n    let from_properties = object_properties(from);\r\n    for (let p of from_properties) {\r\n        let value = object_property_get(from, p);\r\n        object_property_set(to, p, value);\r\n    }\r\n}\r\n","./public/src/object_new.mjs":"export function object_new() {\r\n    return {};\r\n}\r\n","./public/src/object_properties.mjs":"export function object_properties(object) {\r\n    return Object.keys(object);\r\n}\r\n","./public/src/object_properties_delete.mjs":"import {object_property_delete} from \"./object_property_delete.mjs\";\r\nimport {object_properties} from \"./object_properties.mjs\";\r\nexport function object_properties_delete(object) {\r\n    for (let property of object_properties(object)) {\r\n        object_property_delete(object, property);\r\n    }\r\n}\r\n","./public/src/object_property_delete.mjs":"export function object_property_delete(object, property) {\r\n    delete object[property];\r\n}\r\n","./public/src/object_property_exists.mjs":"export function object_property_exists(object, property_name) {\r\n    return object.hasOwnProperty(property_name);\r\n}\r\n","./public/src/object_property_get.mjs":"export function object_property_get(object, property_name) {\r\n    return object[property_name];\r\n}\r\n","./public/src/object_property_set.mjs":"export function object_property_set(object, property_name, value) {\r\n    object[property_name] = value;\r\n}\r\n","./public/src/object_property_swap.mjs":"import {object_property_get} from \"./object_property_get.mjs\";\r\nimport {object_property_set} from \"./object_property_set.mjs\";\r\nexport function object_property_swap(object, property_a, property_b) {\r\n    let value_a = object_property_get(object, property_a);\r\n    let value_b = object_property_get(object, property_b);\r\n    object_property_set(object, property_a, value_b);\r\n    object_property_set(object, property_b, value_a);\r\n}\r\n","./public/src/object_replace.mjs":"import {object_properties_delete} from \"./object_properties_delete.mjs\";\r\nimport {object_merge} from \"./object_merge.mjs\";\r\nexport function object_replace(original, replacement) {\r\n    object_properties_delete(original);\r\n    object_merge(original, replacement);\r\n}\r\n","./public/src/object_values.mjs":"import {object_properties} from './object_properties.mjs';\r\nimport {object_property_get} from './object_property_get.mjs';\r\nimport {list_map} from './list_map.mjs';\r\nexport function object_values(object) {\r\n    let properties = object_properties(object);\r\n    return list_map(properties, p => object_property_get(object, p));\r\n}\r\n","./public/src/path_join.mjs":"import {import_node} from './import_node.mjs';let path = await import_node('path');\r\nexport function path_join(paths) {\r\n    return path.join(...paths);\r\n}\r\n","./public/src/process_argv_remaining.mjs":"export function process_argv_remaining() {\r\n    let {argv} = process;\r\n    let remaining = argv.slice(2);\r\n    return remaining;\r\n}\r\n","./public/src/promise_all.mjs":"export function promise_all(mapped) {\r\n    return Promise.all(mapped);\r\n}\r\n","./public/src/random_50_50.mjs":"import {integer_random} from \"./integer_random.mjs\";\r\nexport function random_50_50() {\r\n    return integer_random(1, 2) === 1;\r\n}\r\n","./public/src/range.mjs":"import {list_add} from './list_add.mjs';\r\nexport function range(count) {\r\n    let result = [];\r\n    for (let i = 0; i < count; i++) {\r\n        list_add(result, i);\r\n    }\r\n    return result;\r\n}\r\n","./public/src/returns.mjs":"import {assert_boolean} from './assert_boolean.mjs';\r\nimport {equal} from './equal.mjs';\r\nexport function returns(fn, expected, args) {\r\n    let actual = fn(...args);\r\n    let e = equal(actual, expected);\r\n    assert_boolean(e);\r\n}\r\n","./public/src/returns_async.mjs":"import {assert_boolean} from './assert_boolean.mjs';\r\nimport {equal} from './equal.mjs';\r\nexport async function returns_async(fn, expected, args) {\r\n    let actual = await fn(...args);\r\n    let e = equal(actual, expected);\r\n    assert_boolean(e);\r\n}\r\n","./public/src/round.mjs":"export function round(product) {\r\n    return Math.round(product);\r\n}\r\n","./public/src/run.mjs":"import {function_run} from './function_run.mjs';\r\nimport { list_first } from './list_first.mjs';\r\nimport { list_skip } from './list_skip.mjs';\r\nimport {process_argv_remaining} from './process_argv_remaining.mjs';\r\nexport async function run() {\r\n    let remaining = process_argv_remaining();\r\n    let first = list_first(remaining);\r\n    let args = list_skip(remaining, 1)\r\n    return await function_run(first, args);\r\n}\r\n","./public/src/run_git.mjs":"import {run} from \"./run.mjs\";\r\nimport {git_ac_message} from \"./git_ac_message.mjs\";\r\nimport {process_argv_remaining} from \"./process_argv_remaining.mjs\";\r\nimport {list_add_beginning} from \"./list_add_beginning.mjs\";\r\nexport async function run_git() {\r\n    let result = await run();\r\n    let remaining = process_argv_remaining();\r\n    list_add_beginning(remaining, ' ');\r\n    let commit_message = remaining.join(' ');\r\n    await git_ac_message(commit_message);\r\n    return result;\r\n}\r\n","./public/src/sandbox.mjs":"export function sandbox() {\r\n    return a + b;\r\n}\r\n","./public/src/server.mjs":"import {uuid_file} from \"./uuid_file.mjs\";\r\nimport {command_line} from \"./command_line.mjs\";\r\nimport {json_to} from \"./json_to.mjs\";\r\nimport {server_port} from \"./server_port.mjs\";\r\nimport express from 'express';\r\nimport cors from 'cors';\r\nimport {function_run_json} from \"./function_run_json.mjs\";\r\nimport {string_replace} from \"./string_replace.mjs\";\r\nimport {run} from \"./run.mjs\";\r\nimport {file_overwrite} from \"./file_overwrite.mjs\";\r\nimport {file_read} from \"./file_read.mjs\";\r\nimport bodyParser from \"body-parser\";\r\nimport { error } from \"./error.mjs\";\r\nimport { assert } from \"./assert.mjs\";\r\nimport { list_is } from \"./list_is.mjs\";\r\nexport function server() {\r\n    let app = express();\r\n    let port = server_port();\r\n    let options = {\r\n        origin: ['http://localhost:8080']\r\n    };\r\n    app.use(cors(options));\r\n    app.use(express.json({\r\n        limit: '50mb'\r\n    }));\r\n    app.use(bodyParser.urlencoded({\r\n        limit: '50mb',\r\n        extended: true\r\n    }));\r\n    app.post('/', async (req, res) => {\r\n        let {body} = req;\r\n        let {function_name, args} = body;\r\n        assert(list_is, [args])\r\n        let args_json = json_to({\r\n            args\r\n        });\r\n        let replaced = string_replace(args_json, '\\'', '\\'\\'');\r\n        replaced = string_replace(replaced, '\"', '\\\\\"');\r\n        await uuid_file(async file_path_input => {\r\n            await uuid_file(async file_path_output => {\r\n                await file_overwrite(file_path_input, args_json);\r\n                let command = `node ${run.name}.mjs ${function_run_json.name} ${function_name} ${file_path_input} ${file_path_output}`;\r\n                console.log({\r\n                    command\r\n                });\r\n                let r = await command_line(command);\r\n                console.log({\r\n                    r\r\n                });\r\n                let contents = await file_read(file_path_output);\r\n                res.end(contents);\r\n            });\r\n        });\r\n    });\r\n    app.listen(port, () => {\r\n        console.log(`Example app listening on port ${port}`);\r\n    });\r\n}\r\n","./public/src/server_port.mjs":"export function server_port() {\r\n    return 8000;\r\n}\r\n","./public/src/sleep.mjs":"export function sleep(ms) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\r\n","./public/src/square.mjs":"import {multiply} from \"./multiply.mjs\";\r\nexport function square(base) {\r\n    return multiply(base, base);\r\n}\r\n","./public/src/storage_upload_file.mjs":"import admin from \"firebase-admin\";\r\nlet service_account = await file_read_json('../firebase.json');\r\nadmin.initializeApp({\r\n    credential: admin.credential.cert(service_account),\r\n    storageBucket: \"gs://letjesusbeexalted.appspot.com\"\r\n});\r\nlet bucket = admin.storage().bucket();\r\nexport async function storage_upload_file(file_path, destination) {\r\n    await bucket.upload(file_path, {\r\n        destination\r\n    });\r\n}\r\n","./public/src/storage_upload_object.mjs":"import {storage_upload_string} from \"./storage_upload_string.mjs\";\r\nimport {json_to} from \"./json_to.mjs\";\r\nexport async function storage_upload_object(object, destination) {\r\n    let json = json_to(object);\r\n    await storage_upload_string(json, destination);\r\n}\r\n","./public/src/storage_upload_string.mjs":"import {uuid_file} from \"./uuid_file.mjs\";\r\nimport {storage_upload_file} from \"./storage_upload_file.mjs\";\r\nimport {file_write} from \"./file_write.mjs\";\r\nexport async function storage_upload_string(string, destination) {\r\n    await uuid_file(async file_path => {\r\n        await file_write(file_path, string);\r\n        await storage_upload_file(file_path, destination);\r\n    });\r\n}\r\n","./public/src/storage_url.mjs":"import {string_replace} from \"./string_replace.mjs\";\r\nexport function storage_url(file_path) {\r\n    let replaced = string_replace(file_path, '/', '%2F');\r\n    return `https://firebasestorage.googleapis.com/v0/b/letjesusbeexalted.appspot.com/o/${replaced}?alt=media`;\r\n}\r\n","./public/src/string_base64_from.mjs":"export function string_base64_from(input) {\r\n    return Buffer.from(input).toString('ascii');\r\n}\r\n","./public/src/string_base64_to.mjs":"export function string_base64_to(input) {\r\n    return Buffer.from(input).toString('base64');\r\n}\r\n","./public/src/string_case_lower.mjs":"export function string_case_lower(input) {\r\n    return input.toLowerCase();\r\n}\r\n","./public/src/string_case_upper.mjs":"export function string_case_upper(input) {\r\n    return input.toUpperCase();\r\n}\r\n","./public/src/string_combine.mjs":"export function string_combine(a, b) {\r\n    return a + b;\r\n}\r\n","./public/src/string_combine_multiple.mjs":"import {string_combine} from \"./string_combine.mjs\";\r\nexport function string_combine_multiple(list) {\r\n    let result = '';\r\n    for (let l of list) {\r\n        result = string_combine(result, l);\r\n    }\r\n    return result;\r\n}\r\n","./public/src/string_delimit.mjs":"export function string_delimit(input) {\r\n    let string_delimeter = \"'\";\r\n    let result = `${string_delimeter}${input}${string_delimeter}`;\r\n    return result;\r\n}\r\n","./public/src/string_delimit_if.mjs":"import {string_delimit} from \"./string_delimit.mjs\";\r\nimport {string_is} from \"./string_is.mjs\";\r\nexport function string_delimit_if(value) {\r\n    let value_string;\r\n    if (string_is(value)) {\r\n        value_string = string_delimit(value);\r\n    }\r\n    return value_string;\r\n}\r\n","./public/src/string_empty_is.mjs":"import {equal} from \"./equal.mjs\";\r\nexport function string_empty_is(s) {\r\n    return equal(s, \"\");\r\n}\r\n","./public/src/string_empty_not_is.mjs":"import {string_empty_is} from \"./string_empty_is.mjs\";\r\nexport function string_empty_not_is(s3) {\r\n    return !string_empty_is(s3);\r\n}\r\n","./public/src/string_encoded_from.mjs":"export function string_encoded_from(input) {\r\n    return decodeURIComponent(input);\r\n}\r\n","./public/src/string_encoded_to.mjs":"export function string_encoded_to(input) {\r\n    return encodeURIComponent(input);\r\n}\r\n","./public/src/string_ends_with.mjs":"import {string_get_reverse} from './string_get_reverse.mjs';\r\nimport {string_starts_with_generic} from './string_starts_with_generic.mjs';\r\nexport function string_ends_with(input, prefix) {\r\n    let string_get_lambda = string_get_reverse;\r\n    return string_starts_with_generic(string_get_lambda, input, prefix);\r\n}\r\n","./public/src/string_ends_with_test_1.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_ends_with_test_1() {\r\n    let result = string_ends_with('ba', 'ba');\r\n    assert_boolean(equal(result, true));\r\n}\r\n","./public/src/string_ends_with_test_10.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_ends_with_test_10() {\r\n    let result = string_ends_with('bb', 'aa');\r\n    assert_boolean(equal(result, false));\r\n}\r\n","./public/src/string_ends_with_test_2.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_ends_with_test_2() {\r\n    let result = string_ends_with('abc', 'ba');\r\n    assert_boolean(equal(result, false));\r\n}\r\n","./public/src/string_ends_with_test_3.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_ends_with_test_3() {\r\n    let result = string_ends_with('bb', 'bb');\r\n    assert_boolean(equal(result, true));\r\n}\r\n","./public/src/string_ends_with_test_4.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_ends_with_test_4() {\r\n    let result = string_ends_with('abc', '');\r\n    assert_boolean(equal(result, true));\r\n}\r\n","./public/src/string_ends_with_test_5.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_ends_with_test_5() {\r\n    let result = string_ends_with('b', 'ba');\r\n    assert_boolean(equal(result, false));\r\n}\r\n","./public/src/string_ends_with_test_6.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_ends_with_test_6() {\r\n    let result = string_ends_with('a', '');\r\n    assert_boolean(equal(result, true));\r\n}\r\n","./public/src/string_ends_with_test_7.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_ends_with_test_7() {\r\n    let result = string_ends_with('ba', 'ab');\r\n    assert_boolean(equal(result, false));\r\n}\r\n","./public/src/string_ends_with_test_8.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_ends_with_test_8() {\r\n    let result = string_ends_with('b', 'b');\r\n    assert_boolean(equal(result, true));\r\n}\r\n","./public/src/string_ends_with_test_9.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_ends_with_test_9() {\r\n    let result = string_ends_with('', 'a');\r\n    assert_boolean(equal(result, false));\r\n}\r\n","./public/src/string_get.mjs":"export function string_get(input, index) {\r\n    return input[index];\r\n}\r\n","./public/src/string_get_reverse.mjs":"import {string_index_last} from \"./string_index_last.mjs\";\r\nexport function string_get_reverse(input, index) {\r\n    let last = string_index_last(input);\r\n    return input[last - index];\r\n}\r\n","./public/src/string_includes.mjs":"export function string_includes(string, value) {\r\n    return string.includes(value);\r\n}\r\n","./public/src/string_index_last.mjs":"import {string_length} from \"./string_length.mjs\";\r\nexport function string_index_last(input) {\r\n    let length = string_length(input);\r\n    let index_last = length - 1;\r\n    return index_last;\r\n}\r\n","./public/src/string_is.mjs":"export function string_is(candidate) {\r\n    return typeof candidate === 'string';\r\n}\r\n","./public/src/string_is_values.mjs":"export function string_is_values() {\r\n    return ['', 'a', 'b', 'aa', 'ab', 'ba', 'bb', 'abc'];\r\n}\r\n","./public/src/string_is_values_tuples_2.mjs":"import {list_join_comma} from \"./list_join_comma.mjs\";\r\nimport {tuples_2} from \"./tuples_2.mjs\";\r\nimport {string_is_values} from \"./string_is_values.mjs\";\r\nexport function string_is_values_tuples_2() {\r\n    let s = string_is_values.name;\r\n    return tuples_2(list_join_comma([s, s]));\r\n}\r\n","./public/src/string_length.mjs":"export function string_length(input) {\r\n    return input.length;\r\n}\r\n","./public/src/string_letter_first.mjs":"export function string_letter_first(current_token) {\r\n    return current_token.match(/[a-z]/i)[0];\r\n}\r\n","./public/src/string_multiply.mjs":"import {string_combine} from \"./string_combine.mjs\";\r\nimport {subtract_1} from \"./subtract_1.mjs\";\r\nimport {range} from \"./range.mjs\";\r\nexport function string_multiply(input, count) {\r\n    let s = input;\r\n    for (let j of range(subtract_1(count))) {\r\n        s = string_combine(s, input);\r\n    }\r\n    return s;\r\n}\r\n","./public/src/string_prefix_without.mjs":"import {string_length} from \"./string_length.mjs\";\r\nimport {string_skip} from \"./string_skip.mjs\";\r\nimport {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {string_starts_with} from \"./string_starts_with.mjs\";\r\nexport function string_prefix_without(input, prefix) {\r\n    assert_boolean(string_starts_with(input, prefix));\r\n    let prefix_length = string_length(prefix);\r\n    return string_skip(input, prefix_length);\r\n}\r\n","./public/src/string_random_letter.mjs":"import {string_case_upper} from \"./string_case_upper.mjs\";\r\nimport {random_50_50} from \"./random_50_50.mjs\";\r\nimport {list_random_item} from \"./list_random_item.mjs\";\r\nimport {keyboard_keys} from \"./keyboard_keys.mjs\";\r\nexport function string_random_letter() {\r\n    let ks = keyboard_keys();\r\n    let name = list_random_item(ks);\r\n    if (random_50_50()) {\r\n        name = string_case_upper(name);\r\n    }\r\n    return name;\r\n}\r\n","./public/src/string_replace.mjs":"import {string_split} from './string_split.mjs';\r\nimport {list_join} from './list_join.mjs';\r\nexport function string_replace(input, from, to) {\r\n    let split = string_split(input, from);\r\n    let joined = list_join(split, to);\r\n    return joined;\r\n}\r\n","./public/src/string_replace_multiple.mjs":"import {string_replace} from './string_replace.mjs';\r\nexport function string_replace_multiple(input, froms, to) {\r\n    for (let from of froms) {\r\n        input = string_replace(input, from, to);\r\n    }\r\n    return input;\r\n}\r\n","./public/src/string_skip.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {string_length} from \"./string_length.mjs\";\r\nexport function string_skip(input, count) {\r\n    let length = string_length(input);\r\n    assert_boolean(count <= length);\r\n    return input.substring(count);\r\n}\r\n","./public/src/string_split.mjs":"export function string_split(input, delimeter) {\r\n    return input.split(delimeter);\r\n}\r\n","./public/src/string_split_comma.mjs":"import {string_split} from './string_split.mjs';\r\nexport function string_split_comma(input) {\r\n    return string_split(input, ',');\r\n}\r\n","./public/src/string_split_empty.mjs":"import {string_split} from \"./string_split.mjs\";\r\nexport function string_split_empty(input) {\r\n    return string_split(input, '');\r\n}\r\n","./public/src/string_split_space.mjs":"import {string_split} from \"./string_split.mjs\";\r\nexport function string_split_space(sentence) {\r\n    return string_split(sentence, ' ');\r\n}\r\n","./public/src/string_split_underscore.mjs":"import {string_split} from './string_split.mjs';\r\nexport function string_split_underscore(input) {\r\n    return string_split(input, '_');\r\n}\r\n","./public/src/string_starts_with.mjs":"import {string_get} from './string_get.mjs';\r\nimport {string_starts_with_generic} from './string_starts_with_generic.mjs';\r\nexport function string_starts_with(input, prefix) {\r\n    let string_get_lambda = string_get;\r\n    return string_starts_with_generic(string_get_lambda, input, prefix);\r\n}\r\n","./public/src/string_starts_with_generic.mjs":"import {string_length} from './string_length.mjs';\r\nimport {range} from './range.mjs';\r\nexport function string_starts_with_generic(string_get_lambda, input, prefix) {\r\n    let input_length = string_length(input);\r\n    let prefix_length = string_length(prefix);\r\n    if (input_length < prefix_length) {\r\n        return false;\r\n    }\r\n    for (let i of range(prefix_length)) {\r\n        if (string_get_lambda(input, i) !== string_get_lambda(prefix, i)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","./public/src/string_starts_with_test_1.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_starts_with_test_1() {\r\n    let result = string_starts_with('bb', 'aa');\r\n    assert_boolean(equal(result, false));\r\n}\r\n","./public/src/string_starts_with_test_10.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_starts_with_test_10() {\r\n    let result = string_starts_with('', '');\r\n    assert_boolean(equal(result, true));\r\n}\r\n","./public/src/string_starts_with_test_2.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_starts_with_test_2() {\r\n    let result = string_starts_with('', 'b');\r\n    assert_boolean(equal(result, false));\r\n}\r\n","./public/src/string_starts_with_test_3.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_starts_with_test_3() {\r\n    let result = string_starts_with('', 'aa');\r\n    assert_boolean(equal(result, false));\r\n}\r\n","./public/src/string_starts_with_test_4.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_starts_with_test_4() {\r\n    let result = string_starts_with('aa', 'b');\r\n    assert_boolean(equal(result, false));\r\n}\r\n","./public/src/string_starts_with_test_5.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_starts_with_test_5() {\r\n    let result = string_starts_with('ab', 'a');\r\n    assert_boolean(equal(result, true));\r\n}\r\n","./public/src/string_starts_with_test_6.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_starts_with_test_6() {\r\n    let result = string_starts_with('b', 'b');\r\n    assert_boolean(equal(result, true));\r\n}\r\n","./public/src/string_starts_with_test_7.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_starts_with_test_7() {\r\n    let result = string_starts_with('b', 'ab');\r\n    assert_boolean(equal(result, false));\r\n}\r\n","./public/src/string_starts_with_test_8.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_starts_with_test_8() {\r\n    let result = string_starts_with('a', 'aa');\r\n    assert_boolean(equal(result, false));\r\n}\r\n","./public/src/string_starts_with_test_9.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nexport function string_starts_with_test_9() {\r\n    let result = string_starts_with('aa', 'aa');\r\n    assert_boolean(equal(result, true));\r\n}\r\n","./public/src/string_suffix_without.mjs":"import {string_length} from \"./string_length.mjs\";\r\nimport {string_take} from \"./string_take.mjs\";\r\nimport {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {string_ends_with} from \"./string_ends_with.mjs\";\r\nexport function string_suffix_without(input, prefix) {\r\n    assert_boolean(string_ends_with(input, prefix));\r\n    let prefix_length = string_length(prefix);\r\n    let input_length = string_length(input);\r\n    let difference = input_length - prefix_length;\r\n    return string_take(input, difference);\r\n}\r\n","./public/src/string_take.mjs":"import {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {string_length} from \"./string_length.mjs\";\r\nexport function string_take(input, count) {\r\n    let length = string_length(input);\r\n    assert_boolean(count <= length);\r\n    return input.substring(0, count);\r\n}\r\n","./public/src/string_to.mjs":"export function string_to(input) {\r\n    return input.toString();\r\n}\r\n","./public/src/string_trim.mjs":"export function string_trim(input) {\r\n    return input.trim();\r\n}\r\n","./public/src/subtract.mjs":"export function subtract(a, b) {\r\n    return a - b;\r\n}\r\n","./public/src/subtract_1.mjs":"import {subtract} from \"./subtract.mjs\";\r\nexport function subtract_1(input) {\r\n    return subtract(input, 1);\r\n}\r\n","./public/src/tests_generate_single.mjs":"import {list_concat} from \"./list_concat.mjs\";\r\nimport {function_new_generic} from \"./function_new_generic.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {list_map} from \"./list_map.mjs\";\r\nimport {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {string_includes} from \"./string_includes.mjs\";\r\nimport {function_run} from \"./function_run.mjs\";\r\nexport async function tests_generate_single(function_name, args, test_number) {\r\n    let result = await function_run(function_name, args);\r\n    console.log(test_number.toString(), list_concat(args, [result]));\r\n    let result_name = 'result';\r\n    let string_delimeter = \"'\";\r\n    for (let arg of args) {\r\n        assert_boolean(!string_includes(arg, string_delimeter));\r\n    }\r\n    let args_mapped = list_map(args, arg => {\r\n        let result = string_delimit(arg);\r\n        return result;\r\n    });\r\n    await function_new_generic(`${function_name}_test_${test_number}`, ``, `    let ${result_name} = ${function_name}(${args_mapped.join(', ')});\r\n    ${assert_boolean.name}(${equal.name}(${result_name}, ${result}))`, false, [assert_boolean.name, equal.name], false);\r\n}\r\n","./public/src/todo.mjs":"export function todo() {}\r\n","./public/src/tuples_2.mjs":"import {string_split_comma} from \"./string_split_comma.mjs\";\r\nimport {function_run} from \"./function_run.mjs\";\r\nimport {list_map_async} from \"./list_map_async.mjs\";\r\nimport {assert_boolean} from \"./assert_boolean.mjs\";\r\nimport {equal} from \"./equal.mjs\";\r\nimport {list_get} from \"./list_get.mjs\";\r\nimport {list_adder} from \"./list_adder.mjs\";\r\nimport {list_length} from \"./list_length.mjs\";\r\nexport async function tuples_2(names_pair) {\r\n    let args_values = string_split_comma(names_pair);\r\n    let mapped = await list_map_async(args_values, async av => await function_run(av, []));\r\n    assert_boolean(equal(list_length(mapped), 2));\r\n    let m1 = list_get(mapped, 0);\r\n    let m2 = list_get(mapped, 1);\r\n    return list_adder(la => {\r\n        for (let m1_i of m1) {\r\n            for (let m2_i of m2) {\r\n                la([m1_i, m2_i]);\r\n            }\r\n        }\r\n    });\r\n}\r\n","./public/src/undefined_is.mjs":"export function undefined_is(input) {\r\n    return typeof input === 'undefined';\r\n}\r\n","./public/src/undefined_not_is.mjs":"import {undefined_is} from \"./undefined_is.mjs\";\r\nexport function undefined_not_is(previous_token) {\r\n    return !undefined_is(previous_token);\r\n}\r\n","./public/src/uuid.mjs":"import crypto from 'crypto';\r\nexport function uuid() {\r\n    return crypto.randomUUID();\r\n}\r\n","./public/src/uuid_file.mjs":"import {file_delete} from \"./file_delete.mjs\";\r\nimport {file_name_json} from \"./file_name_json.mjs\";\r\nimport {uuid} from \"./uuid.mjs\";\r\nexport async function uuid_file(lambda) {\r\n    let u = uuid();\r\n    let file_path = file_name_json(u);\r\n    await lambda(file_path);\r\n    await file_delete(file_path);\r\n}\r\n","./public/src/visit.mjs":"import {list_concat} from \"./list_concat.mjs\";\r\nexport function visit(root, children_get, filter, each, stack) {\r\n    let children = children_get(root);\r\n    for (let node of children) {\r\n        if (filter(node)) {\r\n            each({\r\n                node,\r\n                parent: root,\r\n                stack\r\n            });\r\n            let stacked = list_concat(stack, [node]);\r\n            visit(node, children_get, filter, each, stacked);\r\n        }\r\n    }\r\n}\r\n","./public/src/web_is.mjs":"import {web_not_is} from \"./web_not_is.mjs\";\r\nexport function web_is() {\r\n    return !web_not_is();\r\n}\r\n","./public/src/web_not_is.mjs":"export function web_not_is() {\r\n    return typeof window === 'undefined';\r\n}\r\n","./public/src/a.mjs":"export function a() {}\n"}]}